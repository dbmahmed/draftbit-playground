"use strict";

/* eslint-disable */
!function (modules) {
  var installedModules = {};

  function __webpack_require__(moduleId) {
    if (installedModules[moduleId]) return installedModules[moduleId].exports;
    var module = installedModules[moduleId] = {
      i: moduleId,
      l: !1,
      exports: {}
    };
    return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.l = !0, module.exports;
  }

  __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.d = function (exports, name, getter) {
    __webpack_require__.o(exports, name) || Object.defineProperty(exports, name, {
      enumerable: !0,
      get: getter
    });
  }, __webpack_require__.r = function (exports) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports, Symbol.toStringTag, {
      value: "Module"
    }), Object.defineProperty(exports, "__esModule", {
      value: !0
    });
  }, __webpack_require__.t = function (value, mode) {
    if (1 & mode && (value = __webpack_require__(value)), 8 & mode) return value;
    if (4 & mode && "object" == typeof value && value && value.__esModule) return value;
    var ns = Object.create(null);
    if (__webpack_require__.r(ns), Object.defineProperty(ns, "default", {
      enumerable: !0,
      value: value
    }), 2 & mode && "string" != typeof value) for (var key in value) __webpack_require__.d(ns, key, function (key) {
      return value[key];
    }.bind(null, key));
    return ns;
  }, __webpack_require__.n = function (module) {
    var getter = module && module.__esModule ? function () {
      return module.default;
    } : function () {
      return module;
    };
    return __webpack_require__.d(getter, "a", getter), getter;
  }, __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }, __webpack_require__.p = "", __webpack_require__(__webpack_require__.s = 97);
}([function (module, exports) {
  module.exports = function (obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };
}, function (module, exports) {
  var isArray = Array.isArray;
  module.exports = isArray;
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _interopRequireWildcard = __webpack_require__(12);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  var _exportNames = {
    IX2EngineActionTypes: !0,
    IX2EngineConstants: !0
  };
  exports.IX2EngineConstants = exports.IX2EngineActionTypes = void 0;

  var _triggerEvents = __webpack_require__(117);

  Object.keys(_triggerEvents).forEach(function (key) {
    "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || Object.defineProperty(exports, key, {
      enumerable: !0,
      get: function () {
        return _triggerEvents[key];
      }
    }));
  });

  var _animationActions = __webpack_require__(118);

  Object.keys(_animationActions).forEach(function (key) {
    "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || Object.defineProperty(exports, key, {
      enumerable: !0,
      get: function () {
        return _animationActions[key];
      }
    }));
  });

  var _triggerInteractions = __webpack_require__(119);

  Object.keys(_triggerInteractions).forEach(function (key) {
    "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || Object.defineProperty(exports, key, {
      enumerable: !0,
      get: function () {
        return _triggerInteractions[key];
      }
    }));
  });

  var IX2EngineActionTypes = _interopRequireWildcard(__webpack_require__(120));

  exports.IX2EngineActionTypes = IX2EngineActionTypes;

  var IX2EngineConstants = _interopRequireWildcard(__webpack_require__(121));

  exports.IX2EngineConstants = IX2EngineConstants;
}, function (module, exports, __webpack_require__) {
  var freeGlobal = __webpack_require__(64),
      freeSelf = "object" == typeof self && self && self.Object === Object && self,
      root = freeGlobal || freeSelf || Function("return this")();

  module.exports = root;
}, function (module, exports) {
  module.exports = function (value) {
    var type = typeof value;
    return null != value && ("object" == type || "function" == type);
  };
}, function (module, exports, __webpack_require__) {
  var baseMatches = __webpack_require__(124),
      baseMatchesProperty = __webpack_require__(178),
      identity = __webpack_require__(45),
      isArray = __webpack_require__(1),
      property = __webpack_require__(185);

  module.exports = function (value) {
    return "function" == typeof value ? value : null == value ? identity : "object" == typeof value ? isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value) : property(value);
  };
}, function (module, exports, __webpack_require__) {
  var baseIsNative = __webpack_require__(136),
      getValue = __webpack_require__(141);

  module.exports = function (object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  };
}, function (module, exports) {
  module.exports = function (value) {
    return null != value && "object" == typeof value;
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _interopRequireWildcard = __webpack_require__(12);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.IX2VanillaUtils = exports.IX2VanillaPlugins = exports.IX2ElementsReducer = exports.IX2EasingUtils = exports.IX2Easings = exports.IX2BrowserSupport = void 0;

  var IX2BrowserSupport = _interopRequireWildcard(__webpack_require__(31));

  exports.IX2BrowserSupport = IX2BrowserSupport;

  var IX2Easings = _interopRequireWildcard(__webpack_require__(82));

  exports.IX2Easings = IX2Easings;

  var IX2EasingUtils = _interopRequireWildcard(__webpack_require__(84));

  exports.IX2EasingUtils = IX2EasingUtils;

  var IX2ElementsReducer = _interopRequireWildcard(__webpack_require__(192));

  exports.IX2ElementsReducer = IX2ElementsReducer;

  var IX2VanillaPlugins = _interopRequireWildcard(__webpack_require__(86));

  exports.IX2VanillaPlugins = IX2VanillaPlugins;

  var IX2VanillaUtils = _interopRequireWildcard(__webpack_require__(194));

  exports.IX2VanillaUtils = IX2VanillaUtils;
}, function (module, exports, __webpack_require__) {
  var Symbol = __webpack_require__(14),
      getRawTag = __webpack_require__(137),
      objectToString = __webpack_require__(138),
      symToStringTag = Symbol ? Symbol.toStringTag : void 0;

  module.exports = function (value) {
    return null == value ? void 0 === value ? "[object Undefined]" : "[object Null]" : symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  };
}, function (module, exports, __webpack_require__) {
  var isFunction = __webpack_require__(63),
      isLength = __webpack_require__(39);

  module.exports = function (value) {
    return null != value && isLength(value.length) && !isFunction(value);
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var Webflow = {},
      modules = {},
      primary = [],
      secondary = window.Webflow || [],
      $ = window.jQuery,
      $win = $(window),
      $doc = $(document),
      isFunction = $.isFunction,
      _ = Webflow._ = __webpack_require__(99),
      tram = Webflow.tram = __webpack_require__(52) && $.tram,
      domready = !1,
      destroyed = !1;

  function bindModule(module) {
    Webflow.env() && (isFunction(module.design) && $win.on("__wf_design", module.design), isFunction(module.preview) && $win.on("__wf_preview", module.preview)), isFunction(module.destroy) && $win.on("__wf_destroy", module.destroy), module.ready && isFunction(module.ready) && function (module) {
      domready ? module.ready() : _.contains(primary, module.ready) || primary.push(module.ready);
    }(module);
  }

  function unbindModule(module) {
    isFunction(module.design) && $win.off("__wf_design", module.design), isFunction(module.preview) && $win.off("__wf_preview", module.preview), isFunction(module.destroy) && $win.off("__wf_destroy", module.destroy), module.ready && isFunction(module.ready) && function (module) {
      primary = _.filter(primary, function (readyFn) {
        return readyFn !== module.ready;
      });
    }(module);
  }

  tram.config.hideBackface = !1, tram.config.keepInherited = !0, Webflow.define = function (name, factory, options) {
    modules[name] && unbindModule(modules[name]);
    var instance = modules[name] = factory($, _, options) || {};
    return bindModule(instance), instance;
  }, Webflow.require = function (name) {
    return modules[name];
  }, Webflow.push = function (ready) {
    domready ? isFunction(ready) && ready() : secondary.push(ready);
  }, Webflow.env = function (mode) {
    var designFlag = window.__wf_design,
        inApp = void 0 !== designFlag;
    return mode ? "design" === mode ? inApp && designFlag : "preview" === mode ? inApp && !designFlag : "slug" === mode ? inApp && window.__wf_slug : "editor" === mode ? window.WebflowEditor : "test" === mode ? window.__wf_test : "frame" === mode ? window !== window.top : void 0 : inApp;
  };
  var touchTarget,
      deferLoad,
      userAgent = navigator.userAgent.toLowerCase(),
      touch = Webflow.env.touch = "ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch,
      chrome = Webflow.env.chrome = /chrome/.test(userAgent) && /Google/.test(navigator.vendor) && parseInt(userAgent.match(/chrome\/(\d+)\./)[1], 10),
      ios = Webflow.env.ios = /(ipod|iphone|ipad)/.test(userAgent);

  function eventProxy(target, types) {
    var handlers = [],
        proxy = {};
    return proxy.up = _.throttle(function (evt) {
      _.each(handlers, function (h) {
        h(evt);
      });
    }), target && types && target.on(types, proxy.up), proxy.on = function (handler) {
      "function" == typeof handler && (_.contains(handlers, handler) || handlers.push(handler));
    }, proxy.off = function (handler) {
      handlers = arguments.length ? _.filter(handlers, function (h) {
        return h !== handler;
      }) : [];
    }, proxy;
  }

  function callReady(readyFn) {
    isFunction(readyFn) && readyFn();
  }

  function bindLoad() {
    deferLoad && (deferLoad.reject(), $win.off("load", deferLoad.resolve)), deferLoad = new $.Deferred(), $win.on("load", deferLoad.resolve);
  }

  Webflow.env.safari = /safari/.test(userAgent) && !chrome && !ios, touch && $doc.on("touchstart mousedown", function (evt) {
    touchTarget = evt.target;
  }), Webflow.validClick = touch ? function (clickTarget) {
    return clickTarget === touchTarget || $.contains(clickTarget, touchTarget);
  } : function () {
    return !0;
  }, Webflow.resize = eventProxy($win, "resize.webflow orientationchange.webflow load.webflow"), Webflow.scroll = eventProxy($win, "scroll.webflow resize.webflow orientationchange.webflow load.webflow"), Webflow.redraw = eventProxy(), Webflow.location = function (url) {
    window.location = url;
  }, Webflow.env() && (Webflow.location = function () {}), Webflow.ready = function () {
    domready = !0, destroyed ? (destroyed = !1, _.each(modules, bindModule)) : _.each(primary, callReady), _.each(secondary, callReady), Webflow.resize.up();
  }, Webflow.load = function (handler) {
    deferLoad.then(handler);
  }, Webflow.destroy = function (options) {
    options = options || {}, destroyed = !0, $win.triggerHandler("__wf_destroy"), null != options.domready && (domready = options.domready), _.each(modules, unbindModule), Webflow.resize.off(), Webflow.scroll.off(), Webflow.redraw.off(), primary = [], secondary = [], "pending" === deferLoad.state() && bindLoad();
  }, $(Webflow.ready), bindLoad(), module.exports = window.Webflow = Webflow;
}, function (module, exports) {
  module.exports = function (obj) {
    if (obj && obj.__esModule) return obj;
    var newObj = {};
    if (null != obj) for (var key in obj) if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
      desc.get || desc.set ? Object.defineProperty(newObj, key, desc) : newObj[key] = obj[key];
    }
    return newObj.default = obj, newObj;
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  });

  var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  function throwStr(msg) {
    throw new Error(msg);
  }

  function getKeysAndSymbols(obj) {
    var keys = Object.keys(obj);
    return Object.getOwnPropertySymbols ? keys.concat(Object.getOwnPropertySymbols(obj)) : keys;
  }

  exports.clone = clone, exports.addLast = addLast, exports.addFirst = addFirst, exports.removeLast = removeLast, exports.removeFirst = removeFirst, exports.insert = insert, exports.removeAt = removeAt, exports.replaceAt = replaceAt, exports.getIn = getIn, exports.set = set, exports.setIn = setIn, exports.update = update, exports.updateIn = updateIn, exports.merge = merge, exports.mergeDeep = mergeDeep, exports.mergeIn = mergeIn, exports.omit = omit, exports.addDefaults = addDefaults;
  var hasOwnProperty = {}.hasOwnProperty;

  function clone(obj) {
    if (Array.isArray(obj)) return obj.slice();

    for (var keys = getKeysAndSymbols(obj), out = {}, i = 0; i < keys.length; i++) {
      var key = keys[i];
      out[key] = obj[key];
    }

    return out;
  }

  function doMerge(fAddDefaults, fDeep, first) {
    var out = first;
    null == out && throwStr("INVALID_ARGS");

    for (var fChanged = !1, _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) rest[_key - 3] = arguments[_key];

    for (var idx = 0; idx < rest.length; idx++) {
      var obj = rest[idx];

      if (null != obj) {
        var keys = getKeysAndSymbols(obj);
        if (keys.length) for (var j = 0; j <= keys.length; j++) {
          var key = keys[j];

          if (!fAddDefaults || void 0 === out[key]) {
            var nextVal = obj[key];
            fDeep && isObject(out[key]) && isObject(nextVal) && (nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal)), void 0 !== nextVal && nextVal !== out[key] && (fChanged || (fChanged = !0, out = clone(out)), out[key] = nextVal);
          }
        }
      }
    }

    return out;
  }

  function isObject(o) {
    var type = void 0 === o ? "undefined" : _typeof(o);
    return null != o && ("object" === type || "function" === type);
  }

  function addLast(array, val) {
    return Array.isArray(val) ? array.concat(val) : array.concat([val]);
  }

  function addFirst(array, val) {
    return Array.isArray(val) ? val.concat(array) : [val].concat(array);
  }

  function removeLast(array) {
    return array.length ? array.slice(0, array.length - 1) : array;
  }

  function removeFirst(array) {
    return array.length ? array.slice(1) : array;
  }

  function insert(array, idx, val) {
    return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));
  }

  function removeAt(array, idx) {
    return idx >= array.length || idx < 0 ? array : array.slice(0, idx).concat(array.slice(idx + 1));
  }

  function replaceAt(array, idx, newItem) {
    if (array[idx] === newItem) return array;

    for (var len = array.length, result = Array(len), i = 0; i < len; i++) result[i] = array[i];

    return result[idx] = newItem, result;
  }

  function getIn(obj, path) {
    if (!Array.isArray(path) && throwStr("INVALID_ARGS"), null != obj) {
      for (var ptr = obj, i = 0; i < path.length; i++) {
        var key = path[i];
        if (void 0 === (ptr = null != ptr ? ptr[key] : void 0)) return ptr;
      }

      return ptr;
    }
  }

  function set(obj, key, val) {
    var finalObj = null == obj ? "number" == typeof key ? [] : {} : obj;
    if (finalObj[key] === val) return finalObj;
    var obj2 = clone(finalObj);
    return obj2[key] = val, obj2;
  }

  function doSetIn(obj, path, val, idx) {
    var key = path[idx];
    return set(obj, key, idx === path.length - 1 ? val : doSetIn(isObject(obj) && isObject(obj[key]) ? obj[key] : "number" == typeof path[idx + 1] ? [] : {}, path, val, idx + 1));
  }

  function setIn(obj, path, val) {
    return path.length ? doSetIn(obj, path, val, 0) : val;
  }

  function update(obj, key, fnUpdate) {
    return set(obj, key, fnUpdate(null == obj ? void 0 : obj[key]));
  }

  function updateIn(obj, path, fnUpdate) {
    return setIn(obj, path, fnUpdate(getIn(obj, path)));
  }

  function merge(a, b, c, d, e, f) {
    for (var _len2 = arguments.length, rest = Array(_len2 > 6 ? _len2 - 6 : 0), _key2 = 6; _key2 < _len2; _key2++) rest[_key2 - 6] = arguments[_key2];

    return rest.length ? doMerge.call.apply(doMerge, [null, !1, !1, a, b, c, d, e, f].concat(rest)) : doMerge(!1, !1, a, b, c, d, e, f);
  }

  function mergeDeep(a, b, c, d, e, f) {
    for (var _len3 = arguments.length, rest = Array(_len3 > 6 ? _len3 - 6 : 0), _key3 = 6; _key3 < _len3; _key3++) rest[_key3 - 6] = arguments[_key3];

    return rest.length ? doMerge.call.apply(doMerge, [null, !1, !0, a, b, c, d, e, f].concat(rest)) : doMerge(!1, !0, a, b, c, d, e, f);
  }

  function mergeIn(a, path, b, c, d, e, f) {
    var prevVal = getIn(a, path);
    null == prevVal && (prevVal = {});

    for (var _len4 = arguments.length, rest = Array(_len4 > 7 ? _len4 - 7 : 0), _key4 = 7; _key4 < _len4; _key4++) rest[_key4 - 7] = arguments[_key4];

    return setIn(a, path, rest.length ? doMerge.call.apply(doMerge, [null, !1, !1, prevVal, b, c, d, e, f].concat(rest)) : doMerge(!1, !1, prevVal, b, c, d, e, f));
  }

  function omit(obj, attrs) {
    for (var omitList = Array.isArray(attrs) ? attrs : [attrs], fDoSomething = !1, i = 0; i < omitList.length; i++) if (hasOwnProperty.call(obj, omitList[i])) {
      fDoSomething = !0;
      break;
    }

    if (!fDoSomething) return obj;

    for (var out = {}, keys = getKeysAndSymbols(obj), _i = 0; _i < keys.length; _i++) {
      var key = keys[_i];
      omitList.indexOf(key) >= 0 || (out[key] = obj[key]);
    }

    return out;
  }

  function addDefaults(a, b, c, d, e, f) {
    for (var _len5 = arguments.length, rest = Array(_len5 > 6 ? _len5 - 6 : 0), _key5 = 6; _key5 < _len5; _key5++) rest[_key5 - 6] = arguments[_key5];

    return rest.length ? doMerge.call.apply(doMerge, [null, !0, !1, a, b, c, d, e, f].concat(rest)) : doMerge(!0, !1, a, b, c, d, e, f);
  }

  var timm = {
    clone: clone,
    addLast: addLast,
    addFirst: addFirst,
    removeLast: removeLast,
    removeFirst: removeFirst,
    insert: insert,
    removeAt: removeAt,
    replaceAt: replaceAt,
    getIn: getIn,
    set: set,
    setIn: setIn,
    update: update,
    updateIn: updateIn,
    merge: merge,
    mergeDeep: mergeDeep,
    mergeIn: mergeIn,
    omit: omit,
    addDefaults: addDefaults
  };
  exports.default = timm;
}, function (module, exports, __webpack_require__) {
  var Symbol = __webpack_require__(3).Symbol;

  module.exports = Symbol;
}, function (module, exports, __webpack_require__) {
  var isSymbol = __webpack_require__(27);

  module.exports = function (value) {
    if ("string" == typeof value || isSymbol(value)) return value;
    var result = value + "";
    return "0" == result && 1 / value == -1 / 0 ? "-0" : result;
  };
}, function (module, exports) {
  function _typeof2(obj) {
    return (_typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    })(obj);
  }

  function _typeof(obj) {
    return "function" == typeof Symbol && "symbol" === _typeof2(Symbol.iterator) ? module.exports = _typeof = function (obj) {
      return _typeof2(obj);
    } : module.exports = _typeof = function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    }, _typeof(obj);
  }

  module.exports = _typeof;
}, function (module, exports) {
  module.exports = function (obj, key, value) {
    return key in obj ? Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : obj[key] = value, obj;
  };
}, function (module, exports) {
  function _extends() {
    return module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
      }

      return target;
    }, _extends.apply(this, arguments);
  }

  module.exports = _extends;
}, function (module, exports, __webpack_require__) {
  var listCacheClear = __webpack_require__(126),
      listCacheDelete = __webpack_require__(127),
      listCacheGet = __webpack_require__(128),
      listCacheHas = __webpack_require__(129),
      listCacheSet = __webpack_require__(130);

  function ListCache(entries) {
    var index = -1,
        length = null == entries ? 0 : entries.length;

    for (this.clear(); ++index < length;) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  ListCache.prototype.clear = listCacheClear, ListCache.prototype.delete = listCacheDelete, ListCache.prototype.get = listCacheGet, ListCache.prototype.has = listCacheHas, ListCache.prototype.set = listCacheSet, module.exports = ListCache;
}, function (module, exports, __webpack_require__) {
  var eq = __webpack_require__(32);

  module.exports = function (array, key) {
    for (var length = array.length; length--;) if (eq(array[length][0], key)) return length;

    return -1;
  };
}, function (module, exports, __webpack_require__) {
  var nativeCreate = __webpack_require__(6)(Object, "create");

  module.exports = nativeCreate;
}, function (module, exports, __webpack_require__) {
  var isKeyable = __webpack_require__(150);

  module.exports = function (map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data["string" == typeof key ? "string" : "hash"] : data.map;
  };
}, function (module, exports, __webpack_require__) {
  var arrayLikeKeys = __webpack_require__(71),
      baseKeys = __webpack_require__(40),
      isArrayLike = __webpack_require__(10);

  module.exports = function (object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  };
}, function (module, exports, __webpack_require__) {
  var baseIsArguments = __webpack_require__(168),
      isObjectLike = __webpack_require__(7),
      objectProto = Object.prototype,
      hasOwnProperty = objectProto.hasOwnProperty,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      isArguments = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };

  module.exports = isArguments;
}, function (module, exports, __webpack_require__) {
  var baseGet = __webpack_require__(43);

  module.exports = function (object, path, defaultValue) {
    var result = null == object ? void 0 : baseGet(object, path);
    return void 0 === result ? defaultValue : result;
  };
}, function (module, exports, __webpack_require__) {
  var isArray = __webpack_require__(1),
      isKey = __webpack_require__(44),
      stringToPath = __webpack_require__(179),
      toString = __webpack_require__(77);

  module.exports = function (value, object) {
    return isArray(value) ? value : isKey(value, object) ? [value] : stringToPath(toString(value));
  };
}, function (module, exports, __webpack_require__) {
  var baseGetTag = __webpack_require__(9),
      isObjectLike = __webpack_require__(7);

  module.exports = function (value) {
    return "symbol" == typeof value || isObjectLike(value) && "[object Symbol]" == baseGetTag(value);
  };
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, "ActionTypes", function () {
    return ActionTypes;
  }), __webpack_require__.d(__webpack_exports__, "default", function () {
    return createStore;
  });

  var lodash_es_isPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(54),
      symbol_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(112),
      ActionTypes = {
    INIT: "@@redux/INIT"
  };

  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;

    if ("function" == typeof preloadedState && void 0 === enhancer && (enhancer = preloadedState, preloadedState = void 0), void 0 !== enhancer) {
      if ("function" != typeof enhancer) throw new Error("Expected the enhancer to be a function.");
      return enhancer(createStore)(reducer, preloadedState);
    }

    if ("function" != typeof reducer) throw new Error("Expected the reducer to be a function.");
    var currentReducer = reducer,
        currentState = preloadedState,
        currentListeners = [],
        nextListeners = currentListeners,
        isDispatching = !1;

    function ensureCanMutateNextListeners() {
      nextListeners === currentListeners && (nextListeners = currentListeners.slice());
    }

    function getState() {
      return currentState;
    }

    function subscribe(listener) {
      if ("function" != typeof listener) throw new Error("Expected listener to be a function.");
      var isSubscribed = !0;
      return ensureCanMutateNextListeners(), nextListeners.push(listener), function () {
        if (isSubscribed) {
          isSubscribed = !1, ensureCanMutateNextListeners();
          var index = nextListeners.indexOf(listener);
          nextListeners.splice(index, 1);
        }
      };
    }

    function dispatch(action) {
      if (!Object(lodash_es_isPlainObject__WEBPACK_IMPORTED_MODULE_0__.default)(action)) throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
      if (void 0 === action.type) throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
      if (isDispatching) throw new Error("Reducers may not dispatch actions.");

      try {
        isDispatching = !0, currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = !1;
      }

      for (var listeners = currentListeners = nextListeners, i = 0; i < listeners.length; i++) listeners[i]();

      return action;
    }

    return dispatch({
      type: ActionTypes.INIT
    }), (_ref2 = {
      dispatch: dispatch,
      subscribe: subscribe,
      getState: getState,
      replaceReducer: function (nextReducer) {
        if ("function" != typeof nextReducer) throw new Error("Expected the nextReducer to be a function.");
        currentReducer = nextReducer, dispatch({
          type: ActionTypes.INIT
        });
      }
    })[symbol_observable__WEBPACK_IMPORTED_MODULE_1__.default] = function () {
      var _ref,
          outerSubscribe = subscribe;

      return (_ref = {
        subscribe: function (observer) {
          if ("object" != typeof observer) throw new TypeError("Expected the observer to be an object.");

          function observeState() {
            observer.next && observer.next(getState());
          }

          return observeState(), {
            unsubscribe: outerSubscribe(observeState)
          };
        }
      })[symbol_observable__WEBPACK_IMPORTED_MODULE_1__.default] = function () {
        return this;
      }, _ref;
    }, _ref2;
  }
}, function (module, exports) {
  var g;

  g = function () {
    return this;
  }();

  try {
    g = g || new Function("return this")();
  } catch (e) {
    "object" == typeof window && (g = window);
  }

  module.exports = g;
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  function compose() {
    for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) funcs[_key] = arguments[_key];

    if (0 === funcs.length) return function (arg) {
      return arg;
    };
    if (1 === funcs.length) return funcs[0];
    var last = funcs[funcs.length - 1],
        rest = funcs.slice(0, -1);
    return function () {
      return rest.reduceRight(function (composed, f) {
        return f(composed);
      }, last.apply(void 0, arguments));
    };
  }

  __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, "default", function () {
    return compose;
  });
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(0);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.TRANSFORM_STYLE_PREFIXED = exports.TRANSFORM_PREFIXED = exports.FLEX_PREFIXED = exports.ELEMENT_MATCHES = exports.withBrowser = exports.IS_BROWSER_ENV = void 0;

  var _find = _interopRequireDefault(__webpack_require__(60)),
      IS_BROWSER_ENV = "undefined" != typeof window;

  exports.IS_BROWSER_ENV = IS_BROWSER_ENV;

  var withBrowser = function (fn, fallback) {
    return IS_BROWSER_ENV ? fn() : fallback;
  };

  exports.withBrowser = withBrowser;
  var ELEMENT_MATCHES = withBrowser(function () {
    return (0, _find.default)(["matches", "matchesSelector", "mozMatchesSelector", "msMatchesSelector", "oMatchesSelector", "webkitMatchesSelector"], function (key) {
      return key in Element.prototype;
    });
  });
  exports.ELEMENT_MATCHES = ELEMENT_MATCHES;
  var FLEX_PREFIXED = withBrowser(function () {
    var el = document.createElement("i"),
        values = ["flex", "-webkit-flex", "-ms-flexbox", "-moz-box", "-webkit-box"];

    try {
      for (var length = values.length, i = 0; i < length; i++) {
        var value = values[i];
        if (el.style.display = value, el.style.display === value) return value;
      }

      return "";
    } catch (err) {
      return "";
    }
  }, "flex");
  exports.FLEX_PREFIXED = FLEX_PREFIXED;
  var TRANSFORM_PREFIXED = withBrowser(function () {
    var el = document.createElement("i");
    if (null == el.style.transform) for (var prefixes = ["Webkit", "Moz", "ms"], length = prefixes.length, i = 0; i < length; i++) {
      var prop = prefixes[i] + "Transform";
      if (void 0 !== el.style[prop]) return prop;
    }
    return "transform";
  }, "transform");
  exports.TRANSFORM_PREFIXED = TRANSFORM_PREFIXED;
  var TRANSFORM_PREFIX = TRANSFORM_PREFIXED.split("transform")[0],
      TRANSFORM_STYLE_PREFIXED = TRANSFORM_PREFIX ? TRANSFORM_PREFIX + "TransformStyle" : "transformStyle";
  exports.TRANSFORM_STYLE_PREFIXED = TRANSFORM_STYLE_PREFIXED;
}, function (module, exports) {
  module.exports = function (value, other) {
    return value === other || value != value && other != other;
  };
}, function (module, exports, __webpack_require__) {
  var Map = __webpack_require__(6)(__webpack_require__(3), "Map");

  module.exports = Map;
}, function (module, exports, __webpack_require__) {
  var mapCacheClear = __webpack_require__(142),
      mapCacheDelete = __webpack_require__(149),
      mapCacheGet = __webpack_require__(151),
      mapCacheHas = __webpack_require__(152),
      mapCacheSet = __webpack_require__(153);

  function MapCache(entries) {
    var index = -1,
        length = null == entries ? 0 : entries.length;

    for (this.clear(); ++index < length;) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  MapCache.prototype.clear = mapCacheClear, MapCache.prototype.delete = mapCacheDelete, MapCache.prototype.get = mapCacheGet, MapCache.prototype.has = mapCacheHas, MapCache.prototype.set = mapCacheSet, module.exports = MapCache;
}, function (module, exports) {
  module.exports = function (array, values) {
    for (var index = -1, length = values.length, offset = array.length; ++index < length;) array[offset + index] = values[index];

    return array;
  };
}, function (module, exports, __webpack_require__) {
  (function (module) {
    var root = __webpack_require__(3),
        stubFalse = __webpack_require__(169),
        freeExports = exports && !exports.nodeType && exports,
        freeModule = freeExports && "object" == typeof module && module && !module.nodeType && module,
        Buffer = freeModule && freeModule.exports === freeExports ? root.Buffer : void 0,
        isBuffer = (Buffer ? Buffer.isBuffer : void 0) || stubFalse;

    module.exports = isBuffer;
  }).call(this, __webpack_require__(72)(module));
}, function (module, exports) {
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  module.exports = function (value, length) {
    var type = typeof value;
    return !!(length = null == length ? 9007199254740991 : length) && ("number" == type || "symbol" != type && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  };
}, function (module, exports, __webpack_require__) {
  var baseIsTypedArray = __webpack_require__(170),
      baseUnary = __webpack_require__(171),
      nodeUtil = __webpack_require__(172),
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray,
      isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  module.exports = isTypedArray;
}, function (module, exports) {
  module.exports = function (value) {
    return "number" == typeof value && value > -1 && value % 1 == 0 && value <= 9007199254740991;
  };
}, function (module, exports, __webpack_require__) {
  var isPrototype = __webpack_require__(41),
      nativeKeys = __webpack_require__(173),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];

    for (var key in Object(object)) hasOwnProperty.call(object, key) && "constructor" != key && result.push(key);

    return result;
  };
}, function (module, exports) {
  var objectProto = Object.prototype;

  module.exports = function (value) {
    var Ctor = value && value.constructor;
    return value === ("function" == typeof Ctor && Ctor.prototype || objectProto);
  };
}, function (module, exports, __webpack_require__) {
  var DataView = __webpack_require__(174),
      Map = __webpack_require__(33),
      Promise = __webpack_require__(175),
      Set = __webpack_require__(176),
      WeakMap = __webpack_require__(74),
      baseGetTag = __webpack_require__(9),
      toSource = __webpack_require__(65),
      dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap),
      getTag = baseGetTag;

  (DataView && "[object DataView]" != getTag(new DataView(new ArrayBuffer(1))) || Map && "[object Map]" != getTag(new Map()) || Promise && "[object Promise]" != getTag(Promise.resolve()) || Set && "[object Set]" != getTag(new Set()) || WeakMap && "[object WeakMap]" != getTag(new WeakMap())) && (getTag = function (value) {
    var result = baseGetTag(value),
        Ctor = "[object Object]" == result ? value.constructor : void 0,
        ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) switch (ctorString) {
      case dataViewCtorString:
        return "[object DataView]";

      case mapCtorString:
        return "[object Map]";

      case promiseCtorString:
        return "[object Promise]";

      case setCtorString:
        return "[object Set]";

      case weakMapCtorString:
        return "[object WeakMap]";
    }
    return result;
  }), module.exports = getTag;
}, function (module, exports, __webpack_require__) {
  var castPath = __webpack_require__(26),
      toKey = __webpack_require__(15);

  module.exports = function (object, path) {
    for (var index = 0, length = (path = castPath(path, object)).length; null != object && index < length;) object = object[toKey(path[index++])];

    return index && index == length ? object : void 0;
  };
}, function (module, exports, __webpack_require__) {
  var isArray = __webpack_require__(1),
      isSymbol = __webpack_require__(27),
      reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  module.exports = function (value, object) {
    if (isArray(value)) return !1;
    var type = typeof value;
    return !("number" != type && "symbol" != type && "boolean" != type && null != value && !isSymbol(value)) || reIsPlainProp.test(value) || !reIsDeepProp.test(value) || null != object && value in Object(object);
  };
}, function (module, exports) {
  module.exports = function (value) {
    return value;
  };
}, function (module, exports, __webpack_require__) {
  var toFinite = __webpack_require__(188);

  module.exports = function (value) {
    var result = toFinite(value),
        remainder = result % 1;
    return result == result ? remainder ? result - remainder : result : 0;
  };
}, function (module, exports, __webpack_require__) {
  var isObject = __webpack_require__(4),
      isSymbol = __webpack_require__(27),
      reTrim = /^\s+|\s+$/g,
      reIsBadHex = /^[-+]0x[0-9a-f]+$/i,
      reIsBinary = /^0b[01]+$/i,
      reIsOctal = /^0o[0-7]+$/i,
      freeParseInt = parseInt;

  module.exports = function (value) {
    if ("number" == typeof value) return value;
    if (isSymbol(value)) return NaN;

    if (isObject(value)) {
      var other = "function" == typeof value.valueOf ? value.valueOf() : value;
      value = isObject(other) ? other + "" : other;
    }

    if ("string" != typeof value) return 0 === value ? value : +value;
    value = value.replace(reTrim, "");
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NaN : +value;
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(0);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.mediaQueriesDefined = exports.viewportWidthChanged = exports.actionListPlaybackChanged = exports.elementStateChanged = exports.instanceRemoved = exports.instanceStarted = exports.instanceAdded = exports.parameterChanged = exports.animationFrameChanged = exports.eventStateChanged = exports.testFrameRendered = exports.eventListenerAdded = exports.clearRequested = exports.stopRequested = exports.playbackRequested = exports.previewRequested = exports.sessionStopped = exports.sessionStarted = exports.sessionInitialized = exports.rawDataImported = void 0;

  var _extends2 = _interopRequireDefault(__webpack_require__(18)),
      _constants = __webpack_require__(2),
      _shared = __webpack_require__(8),
      _constants$IX2EngineA = _constants.IX2EngineActionTypes,
      IX2_RAW_DATA_IMPORTED = _constants$IX2EngineA.IX2_RAW_DATA_IMPORTED,
      IX2_SESSION_INITIALIZED = _constants$IX2EngineA.IX2_SESSION_INITIALIZED,
      IX2_SESSION_STARTED = _constants$IX2EngineA.IX2_SESSION_STARTED,
      IX2_SESSION_STOPPED = _constants$IX2EngineA.IX2_SESSION_STOPPED,
      IX2_PREVIEW_REQUESTED = _constants$IX2EngineA.IX2_PREVIEW_REQUESTED,
      IX2_PLAYBACK_REQUESTED = _constants$IX2EngineA.IX2_PLAYBACK_REQUESTED,
      IX2_STOP_REQUESTED = _constants$IX2EngineA.IX2_STOP_REQUESTED,
      IX2_CLEAR_REQUESTED = _constants$IX2EngineA.IX2_CLEAR_REQUESTED,
      IX2_EVENT_LISTENER_ADDED = _constants$IX2EngineA.IX2_EVENT_LISTENER_ADDED,
      IX2_TEST_FRAME_RENDERED = _constants$IX2EngineA.IX2_TEST_FRAME_RENDERED,
      IX2_EVENT_STATE_CHANGED = _constants$IX2EngineA.IX2_EVENT_STATE_CHANGED,
      IX2_ANIMATION_FRAME_CHANGED = _constants$IX2EngineA.IX2_ANIMATION_FRAME_CHANGED,
      IX2_PARAMETER_CHANGED = _constants$IX2EngineA.IX2_PARAMETER_CHANGED,
      IX2_INSTANCE_ADDED = _constants$IX2EngineA.IX2_INSTANCE_ADDED,
      IX2_INSTANCE_STARTED = _constants$IX2EngineA.IX2_INSTANCE_STARTED,
      IX2_INSTANCE_REMOVED = _constants$IX2EngineA.IX2_INSTANCE_REMOVED,
      IX2_ELEMENT_STATE_CHANGED = _constants$IX2EngineA.IX2_ELEMENT_STATE_CHANGED,
      IX2_ACTION_LIST_PLAYBACK_CHANGED = _constants$IX2EngineA.IX2_ACTION_LIST_PLAYBACK_CHANGED,
      IX2_VIEWPORT_WIDTH_CHANGED = _constants$IX2EngineA.IX2_VIEWPORT_WIDTH_CHANGED,
      IX2_MEDIA_QUERIES_DEFINED = _constants$IX2EngineA.IX2_MEDIA_QUERIES_DEFINED,
      reifyState = _shared.IX2VanillaUtils.reifyState;

  exports.rawDataImported = function (rawData) {
    return {
      type: IX2_RAW_DATA_IMPORTED,
      payload: (0, _extends2.default)({}, reifyState(rawData))
    };
  }, exports.sessionInitialized = function (_ref) {
    var hasBoundaryNodes = _ref.hasBoundaryNodes;
    return {
      type: IX2_SESSION_INITIALIZED,
      payload: {
        hasBoundaryNodes: hasBoundaryNodes
      }
    };
  }, exports.sessionStarted = function () {
    return {
      type: IX2_SESSION_STARTED
    };
  }, exports.sessionStopped = function () {
    return {
      type: IX2_SESSION_STOPPED
    };
  }, exports.previewRequested = function (_ref2) {
    var rawData = _ref2.rawData,
        defer = _ref2.defer;
    return {
      type: IX2_PREVIEW_REQUESTED,
      payload: {
        defer: defer,
        rawData: rawData
      }
    };
  }, exports.playbackRequested = function (_ref3) {
    var _ref3$actionTypeId = _ref3.actionTypeId,
        actionTypeId = void 0 === _ref3$actionTypeId ? _constants.ActionTypeConsts.GENERAL_START_ACTION : _ref3$actionTypeId,
        actionListId = _ref3.actionListId,
        actionItemId = _ref3.actionItemId,
        eventId = _ref3.eventId,
        allowEvents = _ref3.allowEvents,
        immediate = _ref3.immediate,
        testManual = _ref3.testManual,
        verbose = _ref3.verbose,
        rawData = _ref3.rawData;
    return {
      type: IX2_PLAYBACK_REQUESTED,
      payload: {
        actionTypeId: actionTypeId,
        actionListId: actionListId,
        actionItemId: actionItemId,
        testManual: testManual,
        eventId: eventId,
        allowEvents: allowEvents,
        immediate: immediate,
        verbose: verbose,
        rawData: rawData
      }
    };
  }, exports.stopRequested = function (actionListId) {
    return {
      type: IX2_STOP_REQUESTED,
      payload: {
        actionListId: actionListId
      }
    };
  }, exports.clearRequested = function () {
    return {
      type: IX2_CLEAR_REQUESTED
    };
  }, exports.eventListenerAdded = function (target, listenerParams) {
    return {
      type: IX2_EVENT_LISTENER_ADDED,
      payload: {
        target: target,
        listenerParams: listenerParams
      }
    };
  }, exports.testFrameRendered = function () {
    var step = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
    return {
      type: IX2_TEST_FRAME_RENDERED,
      payload: {
        step: step
      }
    };
  }, exports.eventStateChanged = function (stateKey, newState) {
    return {
      type: IX2_EVENT_STATE_CHANGED,
      payload: {
        stateKey: stateKey,
        newState: newState
      }
    };
  }, exports.animationFrameChanged = function (now, parameters) {
    return {
      type: IX2_ANIMATION_FRAME_CHANGED,
      payload: {
        now: now,
        parameters: parameters
      }
    };
  }, exports.parameterChanged = function (key, value) {
    return {
      type: IX2_PARAMETER_CHANGED,
      payload: {
        key: key,
        value: value
      }
    };
  }, exports.instanceAdded = function (options) {
    return {
      type: IX2_INSTANCE_ADDED,
      payload: (0, _extends2.default)({}, options)
    };
  }, exports.instanceStarted = function (instanceId, time) {
    return {
      type: IX2_INSTANCE_STARTED,
      payload: {
        instanceId: instanceId,
        time: time
      }
    };
  }, exports.instanceRemoved = function (instanceId) {
    return {
      type: IX2_INSTANCE_REMOVED,
      payload: {
        instanceId: instanceId
      }
    };
  }, exports.elementStateChanged = function (elementId, actionTypeId, current, actionItem) {
    return {
      type: IX2_ELEMENT_STATE_CHANGED,
      payload: {
        elementId: elementId,
        actionTypeId: actionTypeId,
        current: current,
        actionItem: actionItem
      }
    };
  }, exports.actionListPlaybackChanged = function (_ref4) {
    var actionListId = _ref4.actionListId,
        isPlaying = _ref4.isPlaying;
    return {
      type: IX2_ACTION_LIST_PLAYBACK_CHANGED,
      payload: {
        actionListId: actionListId,
        isPlaying: isPlaying
      }
    };
  }, exports.viewportWidthChanged = function (_ref5) {
    var width = _ref5.width,
        mediaQueries = _ref5.mediaQueries;
    return {
      type: IX2_VIEWPORT_WIDTH_CHANGED,
      payload: {
        width: width,
        mediaQueries: mediaQueries
      }
    };
  }, exports.mediaQueriesDefined = function () {
    return {
      type: IX2_MEDIA_QUERIES_DEFINED
    };
  };
}, function (module, exports, __webpack_require__) {
  var baseCreate = __webpack_require__(94),
      baseLodash = __webpack_require__(50);

  function LodashWrapper(value, chainAll) {
    this.__wrapped__ = value, this.__actions__ = [], this.__chain__ = !!chainAll, this.__index__ = 0, this.__values__ = void 0;
  }

  LodashWrapper.prototype = baseCreate(baseLodash.prototype), LodashWrapper.prototype.constructor = LodashWrapper, module.exports = LodashWrapper;
}, function (module, exports) {
  module.exports = function () {};
}, function (module, exports, __webpack_require__) {
  var baseCreate = __webpack_require__(94),
      baseLodash = __webpack_require__(50);

  function LazyWrapper(value) {
    this.__wrapped__ = value, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = 4294967295, this.__views__ = [];
  }

  LazyWrapper.prototype = baseCreate(baseLodash.prototype), LazyWrapper.prototype.constructor = LazyWrapper, module.exports = LazyWrapper;
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _typeof2 = __webpack_require__(0)(__webpack_require__(16));

  window.tram = function (a) {
    function b(a, b) {
      return new M.Bare().init(a, b);
    }

    function c(a) {
      return a.replace(/[A-Z]/g, function (a) {
        return "-" + a.toLowerCase();
      });
    }

    function d(a) {
      var b = parseInt(a.slice(1), 16);
      return [b >> 16 & 255, b >> 8 & 255, 255 & b];
    }

    function e(a, b, c) {
      return "#" + (1 << 24 | a << 16 | b << 8 | c).toString(16).slice(1);
    }

    function f() {}

    function i(a, b, c) {
      if (void 0 !== b && (c = b), void 0 === a) return c;
      var d = c;
      return $.test(a) || !_.test(a) ? d = parseInt(a, 10) : _.test(a) && (d = 1e3 * parseFloat(a)), 0 > d && (d = 0), d == d ? d : c;
    }

    function j(a) {
      U.debug && window && window.console.warn(a);
    }

    var l = function (a, b, c) {
      function d(a) {
        return "object" == (0, _typeof2.default)(a);
      }

      function e(a) {
        return "function" == typeof a;
      }

      function f() {}

      return function g(h, i) {
        function j() {
          var a = new k();
          return e(a.init) && a.init.apply(a, arguments), a;
        }

        function k() {}

        void 0 === i && (i = h, h = Object), j.Bare = k;
        var l,
            m = f[a] = h[a],
            n = k[a] = j[a] = new f();
        return n.constructor = j, j.mixin = function (b) {
          return k[a] = j[a] = g(j, b)[a], j;
        }, j.open = function (a) {
          if (l = {}, e(a) ? l = a.call(j, n, m, j, h) : d(a) && (l = a), d(l)) for (var c in l) b.call(l, c) && (n[c] = l[c]);
          return e(n.init) || (n.init = h), j;
        }, j.open(i);
      };
    }("prototype", {}.hasOwnProperty),
        m = {
      ease: ["ease", function (a, b, c, d) {
        var e = (a /= d) * a,
            f = e * a;
        return b + c * (-2.75 * f * e + 11 * e * e + -15.5 * f + 8 * e + .25 * a);
      }],
      "ease-in": ["ease-in", function (a, b, c, d) {
        var e = (a /= d) * a,
            f = e * a;
        return b + c * (-1 * f * e + 3 * e * e + -3 * f + 2 * e);
      }],
      "ease-out": ["ease-out", function (a, b, c, d) {
        var e = (a /= d) * a,
            f = e * a;
        return b + c * (.3 * f * e + -1.6 * e * e + 2.2 * f + -1.8 * e + 1.9 * a);
      }],
      "ease-in-out": ["ease-in-out", function (a, b, c, d) {
        var e = (a /= d) * a,
            f = e * a;
        return b + c * (2 * f * e + -5 * e * e + 2 * f + 2 * e);
      }],
      linear: ["linear", function (a, b, c, d) {
        return c * a / d + b;
      }],
      "ease-in-quad": ["cubic-bezier(0.550, 0.085, 0.680, 0.530)", function (a, b, c, d) {
        return c * (a /= d) * a + b;
      }],
      "ease-out-quad": ["cubic-bezier(0.250, 0.460, 0.450, 0.940)", function (a, b, c, d) {
        return -c * (a /= d) * (a - 2) + b;
      }],
      "ease-in-out-quad": ["cubic-bezier(0.455, 0.030, 0.515, 0.955)", function (a, b, c, d) {
        return (a /= d / 2) < 1 ? c / 2 * a * a + b : -c / 2 * (--a * (a - 2) - 1) + b;
      }],
      "ease-in-cubic": ["cubic-bezier(0.550, 0.055, 0.675, 0.190)", function (a, b, c, d) {
        return c * (a /= d) * a * a + b;
      }],
      "ease-out-cubic": ["cubic-bezier(0.215, 0.610, 0.355, 1)", function (a, b, c, d) {
        return c * ((a = a / d - 1) * a * a + 1) + b;
      }],
      "ease-in-out-cubic": ["cubic-bezier(0.645, 0.045, 0.355, 1)", function (a, b, c, d) {
        return (a /= d / 2) < 1 ? c / 2 * a * a * a + b : c / 2 * ((a -= 2) * a * a + 2) + b;
      }],
      "ease-in-quart": ["cubic-bezier(0.895, 0.030, 0.685, 0.220)", function (a, b, c, d) {
        return c * (a /= d) * a * a * a + b;
      }],
      "ease-out-quart": ["cubic-bezier(0.165, 0.840, 0.440, 1)", function (a, b, c, d) {
        return -c * ((a = a / d - 1) * a * a * a - 1) + b;
      }],
      "ease-in-out-quart": ["cubic-bezier(0.770, 0, 0.175, 1)", function (a, b, c, d) {
        return (a /= d / 2) < 1 ? c / 2 * a * a * a * a + b : -c / 2 * ((a -= 2) * a * a * a - 2) + b;
      }],
      "ease-in-quint": ["cubic-bezier(0.755, 0.050, 0.855, 0.060)", function (a, b, c, d) {
        return c * (a /= d) * a * a * a * a + b;
      }],
      "ease-out-quint": ["cubic-bezier(0.230, 1, 0.320, 1)", function (a, b, c, d) {
        return c * ((a = a / d - 1) * a * a * a * a + 1) + b;
      }],
      "ease-in-out-quint": ["cubic-bezier(0.860, 0, 0.070, 1)", function (a, b, c, d) {
        return (a /= d / 2) < 1 ? c / 2 * a * a * a * a * a + b : c / 2 * ((a -= 2) * a * a * a * a + 2) + b;
      }],
      "ease-in-sine": ["cubic-bezier(0.470, 0, 0.745, 0.715)", function (a, b, c, d) {
        return -c * Math.cos(a / d * (Math.PI / 2)) + c + b;
      }],
      "ease-out-sine": ["cubic-bezier(0.390, 0.575, 0.565, 1)", function (a, b, c, d) {
        return c * Math.sin(a / d * (Math.PI / 2)) + b;
      }],
      "ease-in-out-sine": ["cubic-bezier(0.445, 0.050, 0.550, 0.950)", function (a, b, c, d) {
        return -c / 2 * (Math.cos(Math.PI * a / d) - 1) + b;
      }],
      "ease-in-expo": ["cubic-bezier(0.950, 0.050, 0.795, 0.035)", function (a, b, c, d) {
        return 0 === a ? b : c * Math.pow(2, 10 * (a / d - 1)) + b;
      }],
      "ease-out-expo": ["cubic-bezier(0.190, 1, 0.220, 1)", function (a, b, c, d) {
        return a === d ? b + c : c * (1 - Math.pow(2, -10 * a / d)) + b;
      }],
      "ease-in-out-expo": ["cubic-bezier(1, 0, 0, 1)", function (a, b, c, d) {
        return 0 === a ? b : a === d ? b + c : (a /= d / 2) < 1 ? c / 2 * Math.pow(2, 10 * (a - 1)) + b : c / 2 * (2 - Math.pow(2, -10 * --a)) + b;
      }],
      "ease-in-circ": ["cubic-bezier(0.600, 0.040, 0.980, 0.335)", function (a, b, c, d) {
        return -c * (Math.sqrt(1 - (a /= d) * a) - 1) + b;
      }],
      "ease-out-circ": ["cubic-bezier(0.075, 0.820, 0.165, 1)", function (a, b, c, d) {
        return c * Math.sqrt(1 - (a = a / d - 1) * a) + b;
      }],
      "ease-in-out-circ": ["cubic-bezier(0.785, 0.135, 0.150, 0.860)", function (a, b, c, d) {
        return (a /= d / 2) < 1 ? -c / 2 * (Math.sqrt(1 - a * a) - 1) + b : c / 2 * (Math.sqrt(1 - (a -= 2) * a) + 1) + b;
      }],
      "ease-in-back": ["cubic-bezier(0.600, -0.280, 0.735, 0.045)", function (a, b, c, d, e) {
        return void 0 === e && (e = 1.70158), c * (a /= d) * a * ((e + 1) * a - e) + b;
      }],
      "ease-out-back": ["cubic-bezier(0.175, 0.885, 0.320, 1.275)", function (a, b, c, d, e) {
        return void 0 === e && (e = 1.70158), c * ((a = a / d - 1) * a * ((e + 1) * a + e) + 1) + b;
      }],
      "ease-in-out-back": ["cubic-bezier(0.680, -0.550, 0.265, 1.550)", function (a, b, c, d, e) {
        return void 0 === e && (e = 1.70158), (a /= d / 2) < 1 ? c / 2 * a * a * ((1 + (e *= 1.525)) * a - e) + b : c / 2 * ((a -= 2) * a * ((1 + (e *= 1.525)) * a + e) + 2) + b;
      }]
    },
        n = {
      "ease-in-back": "cubic-bezier(0.600, 0, 0.735, 0.045)",
      "ease-out-back": "cubic-bezier(0.175, 0.885, 0.320, 1)",
      "ease-in-out-back": "cubic-bezier(0.680, 0, 0.265, 1)"
    },
        o = document,
        p = window,
        q = "bkwld-tram",
        r = /[\-\.0-9]/g,
        s = /[A-Z]/,
        t = "number",
        u = /^(rgb|#)/,
        v = /(em|cm|mm|in|pt|pc|px)$/,
        w = /(em|cm|mm|in|pt|pc|px|%)$/,
        x = /(deg|rad|turn)$/,
        y = "unitless",
        z = /(all|none) 0s ease 0s/,
        A = /^(width|height)$/,
        B = " ",
        C = o.createElement("a"),
        D = ["Webkit", "Moz", "O", "ms"],
        E = ["-webkit-", "-moz-", "-o-", "-ms-"],
        F = function (a) {
      if (a in C.style) return {
        dom: a,
        css: a
      };
      var b,
          c,
          d = "",
          e = a.split("-");

      for (b = 0; b < e.length; b++) d += e[b].charAt(0).toUpperCase() + e[b].slice(1);

      for (b = 0; b < D.length; b++) if ((c = D[b] + d) in C.style) return {
        dom: c,
        css: E[b] + a
      };
    },
        G = b.support = {
      bind: Function.prototype.bind,
      transform: F("transform"),
      transition: F("transition"),
      backface: F("backface-visibility"),
      timing: F("transition-timing-function")
    };

    if (G.transition) {
      var H = G.timing.dom;
      if (C.style[H] = m["ease-in-back"][0], !C.style[H]) for (var I in n) m[I][0] = n[I];
    }

    var J = b.frame = function () {
      var a = p.requestAnimationFrame || p.webkitRequestAnimationFrame || p.mozRequestAnimationFrame || p.oRequestAnimationFrame || p.msRequestAnimationFrame;
      return a && G.bind ? a.bind(p) : function (a) {
        p.setTimeout(a, 16);
      };
    }(),
        K = b.now = function () {
      var a = p.performance,
          b = a && (a.now || a.webkitNow || a.msNow || a.mozNow);
      return b && G.bind ? b.bind(a) : Date.now || function () {
        return +new Date();
      };
    }(),
        L = l(function (b) {
      function d(a, b) {
        var c = function (a) {
          for (var b = -1, c = a ? a.length : 0, d = []; ++b < c;) {
            var e = a[b];
            e && d.push(e);
          }

          return d;
        }(("" + a).split(B)),
            d = c[0];

        b = b || {};
        var e = Y[d];
        if (!e) return j("Unsupported property: " + d);

        if (!b.weak || !this.props[d]) {
          var f = e[0],
              g = this.props[d];
          return g || (g = this.props[d] = new f.Bare()), g.init(this.$el, c, e, b), g;
        }
      }

      function e(a, b, c) {
        if (a) {
          var e = (0, _typeof2.default)(a);
          if (b || (this.timer && this.timer.destroy(), this.queue = [], this.active = !1), "number" == e && b) return this.timer = new S({
            duration: a,
            context: this,
            complete: h
          }), void (this.active = !0);

          if ("string" == e && b) {
            switch (a) {
              case "hide":
                o.call(this);
                break;

              case "stop":
                l.call(this);
                break;

              case "redraw":
                p.call(this);
                break;

              default:
                d.call(this, a, c && c[1]);
            }

            return h.call(this);
          }

          if ("function" == e) return void a.call(this, this);

          if ("object" == e) {
            var f = 0;
            u.call(this, a, function (a, b) {
              a.span > f && (f = a.span), a.stop(), a.animate(b);
            }, function (a) {
              "wait" in a && (f = i(a.wait, 0));
            }), t.call(this), f > 0 && (this.timer = new S({
              duration: f,
              context: this
            }), this.active = !0, b && (this.timer.complete = h));
            var g = this,
                j = !1,
                k = {};
            J(function () {
              u.call(g, a, function (a) {
                a.active && (j = !0, k[a.name] = a.nextStyle);
              }), j && g.$el.css(k);
            });
          }
        }
      }

      function h() {
        if (this.timer && this.timer.destroy(), this.active = !1, this.queue.length) {
          var a = this.queue.shift();
          e.call(this, a.options, !0, a.args);
        }
      }

      function l(a) {
        var b;
        this.timer && this.timer.destroy(), this.queue = [], this.active = !1, "string" == typeof a ? (b = {})[a] = 1 : b = "object" == (0, _typeof2.default)(a) && null != a ? a : this.props, u.call(this, b, v), t.call(this);
      }

      function o() {
        l.call(this), this.el.style.display = "none";
      }

      function p() {
        this.el.offsetHeight;
      }

      function t() {
        var a,
            b,
            c = [];

        for (a in this.upstream && c.push(this.upstream), this.props) (b = this.props[a]).active && c.push(b.string);

        c = c.join(","), this.style !== c && (this.style = c, this.el.style[G.transition.dom] = c);
      }

      function u(a, b, e) {
        var f,
            g,
            h,
            i,
            j = b !== v,
            k = {};

        for (f in a) h = a[f], f in Z ? (k.transform || (k.transform = {}), k.transform[f] = h) : (s.test(f) && (f = c(f)), f in Y ? k[f] = h : (i || (i = {}), i[f] = h));

        for (f in k) {
          if (h = k[f], !(g = this.props[f])) {
            if (!j) continue;
            g = d.call(this, f);
          }

          b.call(this, g, h);
        }

        e && i && e.call(this, i);
      }

      function v(a) {
        a.stop();
      }

      function w(a, b) {
        a.set(b);
      }

      function x(a) {
        this.$el.css(a);
      }

      function y(a, c) {
        b[a] = function () {
          return this.children ? A.call(this, c, arguments) : (this.el && c.apply(this, arguments), this);
        };
      }

      function A(a, b) {
        var c,
            d = this.children.length;

        for (c = 0; d > c; c++) a.apply(this.children[c], b);

        return this;
      }

      b.init = function (b) {
        if (this.$el = a(b), this.el = this.$el[0], this.props = {}, this.queue = [], this.style = "", this.active = !1, U.keepInherited && !U.fallback) {
          var c = W(this.el, "transition");
          c && !z.test(c) && (this.upstream = c);
        }

        G.backface && U.hideBackface && V(this.el, G.backface.css, "hidden");
      }, y("add", d), y("start", e), y("wait", function (a) {
        a = i(a, 0), this.active ? this.queue.push({
          options: a
        }) : (this.timer = new S({
          duration: a,
          context: this,
          complete: h
        }), this.active = !0);
      }), y("then", function (a) {
        return this.active ? (this.queue.push({
          options: a,
          args: arguments
        }), void (this.timer.complete = h)) : j("No active transition timer. Use start() or wait() before then().");
      }), y("next", h), y("stop", l), y("set", function (a) {
        l.call(this, a), u.call(this, a, w, x);
      }), y("show", function (a) {
        "string" != typeof a && (a = "block"), this.el.style.display = a;
      }), y("hide", o), y("redraw", p), y("destroy", function () {
        l.call(this), a.removeData(this.el, q), this.$el = this.el = null;
      });
    }),
        M = l(L, function (b) {
      function c(b, c) {
        var d = a.data(b, q) || a.data(b, q, new L.Bare());
        return d.el || d.init(b), c ? d.start(c) : d;
      }

      b.init = function (b, d) {
        var e = a(b);
        if (!e.length) return this;
        if (1 === e.length) return c(e[0], d);
        var f = [];
        return e.each(function (a, b) {
          f.push(c(b, d));
        }), this.children = f, this;
      };
    }),
        N = l(function (a) {
      function b() {
        var a = this.get();
        this.update("auto");
        var b = this.get();
        return this.update(a), b;
      }

      function d(a) {
        var b = /rgba?\((\d+),\s*(\d+),\s*(\d+)/.exec(a);
        return (b ? e(b[1], b[2], b[3]) : a).replace(/#(\w)(\w)(\w)$/, "#$1$1$2$2$3$3");
      }

      a.init = function (a, b, d, e) {
        this.$el = a, this.el = a[0];
        var g = b[0];
        d[2] && (g = d[2]), X[g] && (g = X[g]), this.name = g, this.type = d[1], this.duration = i(b[1], this.duration, 500), this.ease = function (a, b, c) {
          return void 0 !== b && (c = b), a in m ? a : c;
        }(b[2], this.ease, "ease"), this.delay = i(b[3], this.delay, 0), this.span = this.duration + this.delay, this.active = !1, this.nextStyle = null, this.auto = A.test(this.name), this.unit = e.unit || this.unit || U.defaultUnit, this.angle = e.angle || this.angle || U.defaultAngle, U.fallback || e.fallback ? this.animate = this.fallback : (this.animate = this.transition, this.string = this.name + B + this.duration + "ms" + ("ease" != this.ease ? B + m[this.ease][0] : "") + (this.delay ? B + this.delay + "ms" : ""));
      }, a.set = function (a) {
        a = this.convert(a, this.type), this.update(a), this.redraw();
      }, a.transition = function (a) {
        this.active = !0, a = this.convert(a, this.type), this.auto && ("auto" == this.el.style[this.name] && (this.update(this.get()), this.redraw()), "auto" == a && (a = b.call(this))), this.nextStyle = a;
      }, a.fallback = function (a) {
        var c = this.el.style[this.name] || this.convert(this.get(), this.type);
        a = this.convert(a, this.type), this.auto && ("auto" == c && (c = this.convert(this.get(), this.type)), "auto" == a && (a = b.call(this))), this.tween = new R({
          from: c,
          to: a,
          duration: this.duration,
          delay: this.delay,
          ease: this.ease,
          update: this.update,
          context: this
        });
      }, a.get = function () {
        return W(this.el, this.name);
      }, a.update = function (a) {
        V(this.el, this.name, a);
      }, a.stop = function () {
        (this.active || this.nextStyle) && (this.active = !1, this.nextStyle = null, V(this.el, this.name, this.get()));
        var a = this.tween;
        a && a.context && a.destroy();
      }, a.convert = function (a, b) {
        if ("auto" == a && this.auto) return a;
        var c,
            e = "number" == typeof a,
            f = "string" == typeof a;

        switch (b) {
          case t:
            if (e) return a;
            if (f && "" === a.replace(r, "")) return +a;
            c = "number(unitless)";
            break;

          case u:
            if (f) {
              if ("" === a && this.original) return this.original;
              if (b.test(a)) return "#" == a.charAt(0) && 7 == a.length ? a : d(a);
            }

            c = "hex or rgb string";
            break;

          case v:
            if (e) return a + this.unit;
            if (f && b.test(a)) return a;
            c = "number(px) or string(unit)";
            break;

          case w:
            if (e) return a + this.unit;
            if (f && b.test(a)) return a;
            c = "number(px) or string(unit or %)";
            break;

          case x:
            if (e) return a + this.angle;
            if (f && b.test(a)) return a;
            c = "number(deg) or string(angle)";
            break;

          case y:
            if (e) return a;
            if (f && w.test(a)) return a;
            c = "number(unitless) or string(unit or %)";
        }

        return function (a, b) {
          j("Type warning: Expected: [" + a + "] Got: [" + (0, _typeof2.default)(b) + "] " + b);
        }(c, a), a;
      }, a.redraw = function () {
        this.el.offsetHeight;
      };
    }),
        O = l(N, function (a, b) {
      a.init = function () {
        b.init.apply(this, arguments), this.original || (this.original = this.convert(this.get(), u));
      };
    }),
        P = l(N, function (a, b) {
      a.init = function () {
        b.init.apply(this, arguments), this.animate = this.fallback;
      }, a.get = function () {
        return this.$el[this.name]();
      }, a.update = function (a) {
        this.$el[this.name](a);
      };
    }),
        Q = l(N, function (a, b) {
      function c(a, b) {
        var c, d, e, f, g;

        for (c in a) e = (f = Z[c])[0], d = f[1] || c, g = this.convert(a[c], e), b.call(this, d, g, e);
      }

      a.init = function () {
        b.init.apply(this, arguments), this.current || (this.current = {}, Z.perspective && U.perspective && (this.current.perspective = U.perspective, V(this.el, this.name, this.style(this.current)), this.redraw()));
      }, a.set = function (a) {
        c.call(this, a, function (a, b) {
          this.current[a] = b;
        }), V(this.el, this.name, this.style(this.current)), this.redraw();
      }, a.transition = function (a) {
        var b = this.values(a);
        this.tween = new T({
          current: this.current,
          values: b,
          duration: this.duration,
          delay: this.delay,
          ease: this.ease
        });
        var c,
            d = {};

        for (c in this.current) d[c] = c in b ? b[c] : this.current[c];

        this.active = !0, this.nextStyle = this.style(d);
      }, a.fallback = function (a) {
        var b = this.values(a);
        this.tween = new T({
          current: this.current,
          values: b,
          duration: this.duration,
          delay: this.delay,
          ease: this.ease,
          update: this.update,
          context: this
        });
      }, a.update = function () {
        V(this.el, this.name, this.style(this.current));
      }, a.style = function (a) {
        var b,
            c = "";

        for (b in a) c += b + "(" + a[b] + ") ";

        return c;
      }, a.values = function (a) {
        var b,
            d = {};
        return c.call(this, a, function (a, c, e) {
          d[a] = c, void 0 === this.current[a] && (b = 0, ~a.indexOf("scale") && (b = 1), this.current[a] = this.convert(b, e));
        }), d;
      };
    }),
        R = l(function (b) {
      function g() {
        var a,
            b,
            c,
            d = n.length;
        if (d) for (J(g), b = K(), a = d; a--;) (c = n[a]) && c.render(b);
      }

      var l = {
        ease: m.ease[1],
        from: 0,
        to: 1
      };
      b.init = function (a) {
        this.duration = a.duration || 0, this.delay = a.delay || 0;
        var b = a.ease || l.ease;
        m[b] && (b = m[b][1]), "function" != typeof b && (b = l.ease), this.ease = b, this.update = a.update || f, this.complete = a.complete || f, this.context = a.context || this, this.name = a.name;
        var c = a.from,
            d = a.to;
        void 0 === c && (c = l.from), void 0 === d && (d = l.to), this.unit = a.unit || "", "number" == typeof c && "number" == typeof d ? (this.begin = c, this.change = d - c) : this.format(d, c), this.value = this.begin + this.unit, this.start = K(), !1 !== a.autoplay && this.play();
      }, b.play = function () {
        this.active || (this.start || (this.start = K()), this.active = !0, function (a) {
          1 === n.push(a) && J(g);
        }(this));
      }, b.stop = function () {
        this.active && (this.active = !1, function (b) {
          var c,
              d = a.inArray(b, n);
          d >= 0 && (c = n.slice(d + 1), n.length = d, c.length && (n = n.concat(c)));
        }(this));
      }, b.render = function (a) {
        var b,
            c = a - this.start;

        if (this.delay) {
          if (c <= this.delay) return;
          c -= this.delay;
        }

        if (c < this.duration) {
          var d = this.ease(c, 0, 1, this.duration);
          return b = this.startRGB ? function (a, b, c) {
            return e(a[0] + c * (b[0] - a[0]), a[1] + c * (b[1] - a[1]), a[2] + c * (b[2] - a[2]));
          }(this.startRGB, this.endRGB, d) : function (a) {
            return Math.round(a * o) / o;
          }(this.begin + d * this.change), this.value = b + this.unit, void this.update.call(this.context, this.value);
        }

        b = this.endHex || this.begin + this.change, this.value = b + this.unit, this.update.call(this.context, this.value), this.complete.call(this.context), this.destroy();
      }, b.format = function (a, b) {
        if (b += "", "#" == (a += "").charAt(0)) return this.startRGB = d(b), this.endRGB = d(a), this.endHex = a, this.begin = 0, void (this.change = 1);

        if (!this.unit) {
          var c = b.replace(r, "");
          c !== a.replace(r, "") && function (a, b, c) {
            j("Units do not match [tween]: " + b + ", " + c);
          }(0, b, a), this.unit = c;
        }

        b = parseFloat(b), a = parseFloat(a), this.begin = this.value = b, this.change = a - b;
      }, b.destroy = function () {
        this.stop(), this.context = null, this.ease = this.update = this.complete = f;
      };
      var n = [],
          o = 1e3;
    }),
        S = l(R, function (a) {
      a.init = function (a) {
        this.duration = a.duration || 0, this.complete = a.complete || f, this.context = a.context, this.play();
      }, a.render = function (a) {
        a - this.start < this.duration || (this.complete.call(this.context), this.destroy());
      };
    }),
        T = l(R, function (a, b) {
      a.init = function (a) {
        var b, c;

        for (b in this.context = a.context, this.update = a.update, this.tweens = [], this.current = a.current, a.values) c = a.values[b], this.current[b] !== c && this.tweens.push(new R({
          name: b,
          from: this.current[b],
          to: c,
          duration: a.duration,
          delay: a.delay,
          ease: a.ease,
          autoplay: !1
        }));

        this.play();
      }, a.render = function (a) {
        var b,
            c,
            e = !1;

        for (b = this.tweens.length; b--;) (c = this.tweens[b]).context && (c.render(a), this.current[c.name] = c.value, e = !0);

        return e ? void (this.update && this.update.call(this.context)) : this.destroy();
      }, a.destroy = function () {
        if (b.destroy.call(this), this.tweens) {
          var a;

          for (a = this.tweens.length; a--;) this.tweens[a].destroy();

          this.tweens = null, this.current = null;
        }
      };
    }),
        U = b.config = {
      debug: !1,
      defaultUnit: "px",
      defaultAngle: "deg",
      keepInherited: !1,
      hideBackface: !1,
      perspective: "",
      fallback: !G.transition,
      agentTests: []
    };

    b.fallback = function (a) {
      if (!G.transition) return U.fallback = !0;
      U.agentTests.push("(" + a + ")");
      var b = new RegExp(U.agentTests.join("|"), "i");
      U.fallback = b.test(navigator.userAgent);
    }, b.fallback("6.0.[2-5] Safari"), b.tween = function (a) {
      return new R(a);
    }, b.delay = function (a, b, c) {
      return new S({
        complete: b,
        duration: a,
        context: c
      });
    }, a.fn.tram = function (a) {
      return b.call(null, this, a);
    };
    var V = a.style,
        W = a.css,
        X = {
      transform: G.transform && G.transform.css
    },
        Y = {
      color: [O, u],
      background: [O, u, "background-color"],
      "outline-color": [O, u],
      "border-color": [O, u],
      "border-top-color": [O, u],
      "border-right-color": [O, u],
      "border-bottom-color": [O, u],
      "border-left-color": [O, u],
      "border-width": [N, v],
      "border-top-width": [N, v],
      "border-right-width": [N, v],
      "border-bottom-width": [N, v],
      "border-left-width": [N, v],
      "border-spacing": [N, v],
      "letter-spacing": [N, v],
      margin: [N, v],
      "margin-top": [N, v],
      "margin-right": [N, v],
      "margin-bottom": [N, v],
      "margin-left": [N, v],
      padding: [N, v],
      "padding-top": [N, v],
      "padding-right": [N, v],
      "padding-bottom": [N, v],
      "padding-left": [N, v],
      "outline-width": [N, v],
      opacity: [N, t],
      top: [N, w],
      right: [N, w],
      bottom: [N, w],
      left: [N, w],
      "font-size": [N, w],
      "text-indent": [N, w],
      "word-spacing": [N, w],
      width: [N, w],
      "min-width": [N, w],
      "max-width": [N, w],
      height: [N, w],
      "min-height": [N, w],
      "max-height": [N, w],
      "line-height": [N, y],
      "scroll-top": [P, t, "scrollTop"],
      "scroll-left": [P, t, "scrollLeft"]
    },
        Z = {};
    G.transform && (Y.transform = [Q], Z = {
      x: [w, "translateX"],
      y: [w, "translateY"],
      rotate: [x],
      rotateX: [x],
      rotateY: [x],
      scale: [t],
      scaleX: [t],
      scaleY: [t],
      skew: [x],
      skewX: [x],
      skewY: [x]
    }), G.transform && G.backface && (Z.z = [w, "translateZ"], Z.rotateZ = [x], Z.scaleZ = [t], Z.perspective = [v]);
    var $ = /ms/,
        _ = /s|\./;
    return a.tram = b;
  }(window.jQuery);
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__);

  var _createStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);

  __webpack_require__.d(__webpack_exports__, "createStore", function () {
    return _createStore__WEBPACK_IMPORTED_MODULE_0__.default;
  });

  var _combineReducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56);

  __webpack_require__.d(__webpack_exports__, "combineReducers", function () {
    return _combineReducers__WEBPACK_IMPORTED_MODULE_1__.default;
  });

  var _bindActionCreators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(58);

  __webpack_require__.d(__webpack_exports__, "bindActionCreators", function () {
    return _bindActionCreators__WEBPACK_IMPORTED_MODULE_2__.default;
  });

  var _applyMiddleware__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(59);

  __webpack_require__.d(__webpack_exports__, "applyMiddleware", function () {
    return _applyMiddleware__WEBPACK_IMPORTED_MODULE_3__.default;
  });

  var _compose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(30);

  __webpack_require__.d(__webpack_exports__, "compose", function () {
    return _compose__WEBPACK_IMPORTED_MODULE_4__.default;
  }), __webpack_require__(57);
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__);

  var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(104),
      _getPrototype_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(109),
      _isObjectLike_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(111),
      funcProto = Function.prototype,
      objectProto = Object.prototype,
      funcToString = funcProto.toString,
      hasOwnProperty = objectProto.hasOwnProperty,
      objectCtorString = funcToString.call(Object);

  __webpack_exports__.default = function (value) {
    if (!Object(_isObjectLike_js__WEBPACK_IMPORTED_MODULE_2__.default)(value) || "[object Object]" != Object(_baseGetTag_js__WEBPACK_IMPORTED_MODULE_0__.default)(value)) return !1;
    var proto = Object(_getPrototype_js__WEBPACK_IMPORTED_MODULE_1__.default)(value);
    if (null === proto) return !0;
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return "function" == typeof Ctor && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  };
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__);

  var Symbol = __webpack_require__(105).default.Symbol;

  __webpack_exports__.default = Symbol;
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, "default", function () {
    return combineReducers;
  });

  var _createStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);

  function getUndefinedStateErrorMessage(key, action) {
    var actionType = action && action.type;
    return "Given action " + (actionType && '"' + actionType.toString() + '"' || "an action") + ', reducer "' + key + '" returned undefined. To ignore an action, you must explicitly return the previous state.';
  }

  function combineReducers(reducers) {
    for (var reducerKeys = Object.keys(reducers), finalReducers = {}, i = 0; i < reducerKeys.length; i++) {
      var key = reducerKeys[i];
      "function" == typeof reducers[key] && (finalReducers[key] = reducers[key]);
    }

    var sanityError,
        finalReducerKeys = Object.keys(finalReducers);

    try {
      !function (reducers) {
        Object.keys(reducers).forEach(function (key) {
          var reducer = reducers[key];
          if (void 0 === reducer(void 0, {
            type: _createStore__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.INIT
          })) throw new Error('Reducer "' + key + '" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined.');
          if (void 0 === reducer(void 0, {
            type: "@@redux/PROBE_UNKNOWN_ACTION_" + Math.random().toString(36).substring(7).split("").join(".")
          })) throw new Error('Reducer "' + key + "\" returned undefined when probed with a random type. Don't try to handle " + _createStore__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.INIT + ' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined.');
        });
      }(finalReducers);
    } catch (e) {
      sanityError = e;
    }

    return function () {
      var state = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0],
          action = arguments[1];
      if (sanityError) throw sanityError;

      for (var hasChanged = !1, nextState = {}, i = 0; i < finalReducerKeys.length; i++) {
        var key = finalReducerKeys[i],
            reducer = finalReducers[key],
            previousStateForKey = state[key],
            nextStateForKey = reducer(previousStateForKey, action);

        if (void 0 === nextStateForKey) {
          var errorMessage = getUndefinedStateErrorMessage(key, action);
          throw new Error(errorMessage);
        }

        nextState[key] = nextStateForKey, hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }

      return hasChanged ? nextState : state;
    };
  }

  __webpack_require__(54), __webpack_require__(57);
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  function warning(message) {
    "undefined" != typeof console && "function" == typeof console.error && console.error(message);

    try {
      throw new Error(message);
    } catch (e) {}
  }

  __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, "default", function () {
    return warning;
  });
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  function bindActionCreator(actionCreator, dispatch) {
    return function () {
      return dispatch(actionCreator.apply(void 0, arguments));
    };
  }

  function bindActionCreators(actionCreators, dispatch) {
    if ("function" == typeof actionCreators) return bindActionCreator(actionCreators, dispatch);
    if ("object" != typeof actionCreators || null === actionCreators) throw new Error("bindActionCreators expected an object or a function, instead received " + (null === actionCreators ? "null" : typeof actionCreators) + '. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');

    for (var keys = Object.keys(actionCreators), boundActionCreators = {}, i = 0; i < keys.length; i++) {
      var key = keys[i],
          actionCreator = actionCreators[key];
      "function" == typeof actionCreator && (boundActionCreators[key] = bindActionCreator(actionCreator, dispatch));
    }

    return boundActionCreators;
  }

  __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, "default", function () {
    return bindActionCreators;
  });
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, "default", function () {
    return applyMiddleware;
  });

  var _compose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30),
      _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }

    return target;
  };

  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) middlewares[_key] = arguments[_key];

    return function (createStore) {
      return function (reducer, preloadedState, enhancer) {
        var chain,
            store = createStore(reducer, preloadedState, enhancer),
            _dispatch = store.dispatch,
            middlewareAPI = {
          getState: store.getState,
          dispatch: function (action) {
            return _dispatch(action);
          }
        };
        return chain = middlewares.map(function (middleware) {
          return middleware(middlewareAPI);
        }), _dispatch = _compose__WEBPACK_IMPORTED_MODULE_0__.default.apply(void 0, chain)(store.dispatch), _extends({}, store, {
          dispatch: _dispatch
        });
      };
    };
  }
}, function (module, exports, __webpack_require__) {
  var find = __webpack_require__(61)(__webpack_require__(187));

  module.exports = find;
}, function (module, exports, __webpack_require__) {
  var baseIteratee = __webpack_require__(5),
      isArrayLike = __webpack_require__(10),
      keys = __webpack_require__(23);

  module.exports = function (findIndexFunc) {
    return function (collection, predicate, fromIndex) {
      var iterable = Object(collection);

      if (!isArrayLike(collection)) {
        var iteratee = baseIteratee(predicate, 3);
        collection = keys(collection), predicate = function (key) {
          return iteratee(iterable[key], key, iterable);
        };
      }

      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;
    };
  };
}, function (module, exports, __webpack_require__) {
  var ListCache = __webpack_require__(19),
      stackClear = __webpack_require__(131),
      stackDelete = __webpack_require__(132),
      stackGet = __webpack_require__(133),
      stackHas = __webpack_require__(134),
      stackSet = __webpack_require__(135);

  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  Stack.prototype.clear = stackClear, Stack.prototype.delete = stackDelete, Stack.prototype.get = stackGet, Stack.prototype.has = stackHas, Stack.prototype.set = stackSet, module.exports = Stack;
}, function (module, exports, __webpack_require__) {
  var baseGetTag = __webpack_require__(9),
      isObject = __webpack_require__(4);

  module.exports = function (value) {
    if (!isObject(value)) return !1;
    var tag = baseGetTag(value);
    return "[object Function]" == tag || "[object GeneratorFunction]" == tag || "[object AsyncFunction]" == tag || "[object Proxy]" == tag;
  };
}, function (module, exports, __webpack_require__) {
  (function (global) {
    var freeGlobal = "object" == typeof global && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }).call(this, __webpack_require__(29));
}, function (module, exports) {
  var funcToString = Function.prototype.toString;

  module.exports = function (func) {
    if (null != func) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + "";
      } catch (e) {}
    }

    return "";
  };
}, function (module, exports, __webpack_require__) {
  var baseIsEqualDeep = __webpack_require__(154),
      isObjectLike = __webpack_require__(7);

  module.exports = function baseIsEqual(value, other, bitmask, customizer, stack) {
    return value === other || (null == value || null == other || !isObjectLike(value) && !isObjectLike(other) ? value != value && other != other : baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack));
  };
}, function (module, exports, __webpack_require__) {
  var SetCache = __webpack_require__(155),
      arraySome = __webpack_require__(158),
      cacheHas = __webpack_require__(159);

  module.exports = function (array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = 1 & bitmask,
        arrLength = array.length,
        othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return !1;
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) return stacked == other;
    var index = -1,
        result = !0,
        seen = 2 & bitmask ? new SetCache() : void 0;

    for (stack.set(array, other), stack.set(other, array); ++index < arrLength;) {
      var arrValue = array[index],
          othValue = other[index];
      if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);

      if (void 0 !== compared) {
        if (compared) continue;
        result = !1;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
        })) {
          result = !1;
          break;
        }
      } else if (arrValue !== othValue && !equalFunc(arrValue, othValue, bitmask, customizer, stack)) {
        result = !1;
        break;
      }
    }

    return stack.delete(array), stack.delete(other), result;
  };
}, function (module, exports, __webpack_require__) {
  var arrayPush = __webpack_require__(35),
      isArray = __webpack_require__(1);

  module.exports = function (object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  };
}, function (module, exports, __webpack_require__) {
  var arrayFilter = __webpack_require__(166),
      stubArray = __webpack_require__(70),
      propertyIsEnumerable = Object.prototype.propertyIsEnumerable,
      nativeGetSymbols = Object.getOwnPropertySymbols,
      getSymbols = nativeGetSymbols ? function (object) {
    return null == object ? [] : (object = Object(object), arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    }));
  } : stubArray;

  module.exports = getSymbols;
}, function (module, exports) {
  module.exports = function () {
    return [];
  };
}, function (module, exports, __webpack_require__) {
  var baseTimes = __webpack_require__(167),
      isArguments = __webpack_require__(24),
      isArray = __webpack_require__(1),
      isBuffer = __webpack_require__(36),
      isIndex = __webpack_require__(37),
      isTypedArray = __webpack_require__(38),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) !inherited && !hasOwnProperty.call(value, key) || skipIndexes && ("length" == key || isBuff && ("offset" == key || "parent" == key) || isType && ("buffer" == key || "byteLength" == key || "byteOffset" == key) || isIndex(key, length)) || result.push(key);

    return result;
  };
}, function (module, exports) {
  module.exports = function (module) {
    return module.webpackPolyfill || (module.deprecate = function () {}, module.paths = [], module.children || (module.children = []), Object.defineProperty(module, "loaded", {
      enumerable: !0,
      get: function () {
        return module.l;
      }
    }), Object.defineProperty(module, "id", {
      enumerable: !0,
      get: function () {
        return module.i;
      }
    }), module.webpackPolyfill = 1), module;
  };
}, function (module, exports) {
  module.exports = function (func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  };
}, function (module, exports, __webpack_require__) {
  var WeakMap = __webpack_require__(6)(__webpack_require__(3), "WeakMap");

  module.exports = WeakMap;
}, function (module, exports, __webpack_require__) {
  var isObject = __webpack_require__(4);

  module.exports = function (value) {
    return value == value && !isObject(value);
  };
}, function (module, exports) {
  module.exports = function (key, srcValue) {
    return function (object) {
      return null != object && object[key] === srcValue && (void 0 !== srcValue || key in Object(object));
    };
  };
}, function (module, exports, __webpack_require__) {
  var baseToString = __webpack_require__(78);

  module.exports = function (value) {
    return null == value ? "" : baseToString(value);
  };
}, function (module, exports, __webpack_require__) {
  var Symbol = __webpack_require__(14),
      arrayMap = __webpack_require__(79),
      isArray = __webpack_require__(1),
      isSymbol = __webpack_require__(27),
      symbolProto = Symbol ? Symbol.prototype : void 0,
      symbolToString = symbolProto ? symbolProto.toString : void 0;

  module.exports = function baseToString(value) {
    if ("string" == typeof value) return value;
    if (isArray(value)) return arrayMap(value, baseToString) + "";
    if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
    var result = value + "";
    return "0" == result && 1 / value == -1 / 0 ? "-0" : result;
  };
}, function (module, exports) {
  module.exports = function (array, iteratee) {
    for (var index = -1, length = null == array ? 0 : array.length, result = Array(length); ++index < length;) result[index] = iteratee(array[index], index, array);

    return result;
  };
}, function (module, exports) {
  module.exports = function (key) {
    return function (object) {
      return null == object ? void 0 : object[key];
    };
  };
}, function (module, exports) {
  module.exports = function (array, predicate, fromIndex, fromRight) {
    for (var length = array.length, index = fromIndex + (fromRight ? 1 : -1); fromRight ? index-- : ++index < length;) if (predicate(array[index], index, array)) return index;

    return -1;
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(0);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.inQuad = function (pos) {
    return Math.pow(pos, 2);
  }, exports.outQuad = function (pos) {
    return -(Math.pow(pos - 1, 2) - 1);
  }, exports.inOutQuad = function (pos) {
    return (pos /= .5) < 1 ? .5 * Math.pow(pos, 2) : -.5 * ((pos -= 2) * pos - 2);
  }, exports.inCubic = function (pos) {
    return Math.pow(pos, 3);
  }, exports.outCubic = function (pos) {
    return Math.pow(pos - 1, 3) + 1;
  }, exports.inOutCubic = function (pos) {
    return (pos /= .5) < 1 ? .5 * Math.pow(pos, 3) : .5 * (Math.pow(pos - 2, 3) + 2);
  }, exports.inQuart = function (pos) {
    return Math.pow(pos, 4);
  }, exports.outQuart = function (pos) {
    return -(Math.pow(pos - 1, 4) - 1);
  }, exports.inOutQuart = function (pos) {
    return (pos /= .5) < 1 ? .5 * Math.pow(pos, 4) : -.5 * ((pos -= 2) * Math.pow(pos, 3) - 2);
  }, exports.inQuint = function (pos) {
    return Math.pow(pos, 5);
  }, exports.outQuint = function (pos) {
    return Math.pow(pos - 1, 5) + 1;
  }, exports.inOutQuint = function (pos) {
    return (pos /= .5) < 1 ? .5 * Math.pow(pos, 5) : .5 * (Math.pow(pos - 2, 5) + 2);
  }, exports.inSine = function (pos) {
    return 1 - Math.cos(pos * (Math.PI / 2));
  }, exports.outSine = function (pos) {
    return Math.sin(pos * (Math.PI / 2));
  }, exports.inOutSine = function (pos) {
    return -.5 * (Math.cos(Math.PI * pos) - 1);
  }, exports.inExpo = function (pos) {
    return 0 === pos ? 0 : Math.pow(2, 10 * (pos - 1));
  }, exports.outExpo = function (pos) {
    return 1 === pos ? 1 : 1 - Math.pow(2, -10 * pos);
  }, exports.inOutExpo = function (pos) {
    return 0 === pos ? 0 : 1 === pos ? 1 : (pos /= .5) < 1 ? .5 * Math.pow(2, 10 * (pos - 1)) : .5 * (2 - Math.pow(2, -10 * --pos));
  }, exports.inCirc = function (pos) {
    return -(Math.sqrt(1 - pos * pos) - 1);
  }, exports.outCirc = function (pos) {
    return Math.sqrt(1 - Math.pow(pos - 1, 2));
  }, exports.inOutCirc = function (pos) {
    return (pos /= .5) < 1 ? -.5 * (Math.sqrt(1 - pos * pos) - 1) : .5 * (Math.sqrt(1 - (pos -= 2) * pos) + 1);
  }, exports.outBounce = function (pos) {
    return pos < 1 / 2.75 ? 7.5625 * pos * pos : pos < 2 / 2.75 ? 7.5625 * (pos -= 1.5 / 2.75) * pos + .75 : pos < 2.5 / 2.75 ? 7.5625 * (pos -= 2.25 / 2.75) * pos + .9375 : 7.5625 * (pos -= 2.625 / 2.75) * pos + .984375;
  }, exports.inBack = function (pos) {
    return pos * pos * (2.70158 * pos - 1.70158);
  }, exports.outBack = function (pos) {
    return (pos -= 1) * pos * (2.70158 * pos + 1.70158) + 1;
  }, exports.inOutBack = function (pos) {
    var s = 1.70158;
    return (pos /= .5) < 1 ? pos * pos * ((1 + (s *= 1.525)) * pos - s) * .5 : .5 * ((pos -= 2) * pos * ((1 + (s *= 1.525)) * pos + s) + 2);
  }, exports.inElastic = function (pos) {
    var s = 1.70158,
        p = 0,
        a = 1;
    return 0 === pos ? 0 : 1 === pos ? 1 : (p || (p = .3), a < 1 ? (a = 1, s = p / 4) : s = p / (2 * Math.PI) * Math.asin(1 / a), -a * Math.pow(2, 10 * (pos -= 1)) * Math.sin((pos - s) * (2 * Math.PI) / p));
  }, exports.outElastic = function (pos) {
    var s = 1.70158,
        p = 0,
        a = 1;
    return 0 === pos ? 0 : 1 === pos ? 1 : (p || (p = .3), a < 1 ? (a = 1, s = p / 4) : s = p / (2 * Math.PI) * Math.asin(1 / a), a * Math.pow(2, -10 * pos) * Math.sin((pos - s) * (2 * Math.PI) / p) + 1);
  }, exports.inOutElastic = function (pos) {
    var s = 1.70158,
        p = 0,
        a = 1;
    return 0 === pos ? 0 : 2 == (pos /= .5) ? 1 : (p || (p = .3 * 1.5), a < 1 ? (a = 1, s = p / 4) : s = p / (2 * Math.PI) * Math.asin(1 / a), pos < 1 ? a * Math.pow(2, 10 * (pos -= 1)) * Math.sin((pos - s) * (2 * Math.PI) / p) * -.5 : a * Math.pow(2, -10 * (pos -= 1)) * Math.sin((pos - s) * (2 * Math.PI) / p) * .5 + 1);
  }, exports.swingFromTo = function (pos) {
    var s = 1.70158;
    return (pos /= .5) < 1 ? pos * pos * ((1 + (s *= 1.525)) * pos - s) * .5 : .5 * ((pos -= 2) * pos * ((1 + (s *= 1.525)) * pos + s) + 2);
  }, exports.swingFrom = function (pos) {
    return pos * pos * (2.70158 * pos - 1.70158);
  }, exports.swingTo = function (pos) {
    return (pos -= 1) * pos * (2.70158 * pos + 1.70158) + 1;
  }, exports.bounce = function (pos) {
    return pos < 1 / 2.75 ? 7.5625 * pos * pos : pos < 2 / 2.75 ? 7.5625 * (pos -= 1.5 / 2.75) * pos + .75 : pos < 2.5 / 2.75 ? 7.5625 * (pos -= 2.25 / 2.75) * pos + .9375 : 7.5625 * (pos -= 2.625 / 2.75) * pos + .984375;
  }, exports.bouncePast = function (pos) {
    return pos < 1 / 2.75 ? 7.5625 * pos * pos : pos < 2 / 2.75 ? 2 - (7.5625 * (pos -= 1.5 / 2.75) * pos + .75) : pos < 2.5 / 2.75 ? 2 - (7.5625 * (pos -= 2.25 / 2.75) * pos + .9375) : 2 - (7.5625 * (pos -= 2.625 / 2.75) * pos + .984375);
  }, exports.easeInOut = exports.easeOut = exports.easeIn = exports.ease = void 0;

  var _bezierEasing = _interopRequireDefault(__webpack_require__(83)),
      ease = (0, _bezierEasing.default)(.25, .1, .25, 1);

  exports.ease = ease;
  var easeIn = (0, _bezierEasing.default)(.42, 0, 1, 1);
  exports.easeIn = easeIn;
  var easeOut = (0, _bezierEasing.default)(0, 0, .58, 1);
  exports.easeOut = easeOut;
  var easeInOut = (0, _bezierEasing.default)(.42, 0, .58, 1);
  exports.easeInOut = easeInOut;
}, function (module, exports) {
  var float32ArraySupported = "function" == typeof Float32Array;

  function A(aA1, aA2) {
    return 1 - 3 * aA2 + 3 * aA1;
  }

  function B(aA1, aA2) {
    return 3 * aA2 - 6 * aA1;
  }

  function C(aA1) {
    return 3 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
  }

  module.exports = function (mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) throw new Error("bezier x values must be in [0, 1] range");
    var sampleValues = float32ArraySupported ? new Float32Array(11) : new Array(11);
    if (mX1 !== mY1 || mX2 !== mY2) for (var i = 0; i < 11; ++i) sampleValues[i] = calcBezier(.1 * i, mX1, mX2);
    return function (x) {
      return mX1 === mY1 && mX2 === mY2 ? x : 0 === x ? 0 : 1 === x ? 1 : calcBezier(function (aX) {
        for (var intervalStart = 0, currentSample = 1; 10 !== currentSample && sampleValues[currentSample] <= aX; ++currentSample) intervalStart += .1;

        --currentSample;
        var guessForT = intervalStart + (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]) * .1,
            initialSlope = getSlope(guessForT, mX1, mX2);
        return initialSlope >= .001 ? function (aX, aGuessT, mX1, mX2) {
          for (var i = 0; i < 4; ++i) {
            var currentSlope = getSlope(aGuessT, mX1, mX2);
            if (0 === currentSlope) return aGuessT;
            aGuessT -= (calcBezier(aGuessT, mX1, mX2) - aX) / currentSlope;
          }

          return aGuessT;
        }(aX, guessForT, mX1, mX2) : 0 === initialSlope ? guessForT : function (aX, aA, aB, mX1, mX2) {
          var currentX,
              currentT,
              i = 0;

          do {
            (currentX = calcBezier(currentT = aA + (aB - aA) / 2, mX1, mX2) - aX) > 0 ? aB = currentT : aA = currentT;
          } while (Math.abs(currentX) > 1e-7 && ++i < 10);

          return currentT;
        }(aX, intervalStart, intervalStart + .1, mX1, mX2);
      }(x), mY1, mY2);
    };
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _toConsumableArray2 = __webpack_require__(0)(__webpack_require__(85)),
      _interopRequireDefault = __webpack_require__(0),
      _interopRequireWildcard = __webpack_require__(12);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.optimizeFloat = optimizeFloat, exports.createBezierEasing = function (easing) {
    return _bezierEasing.default.apply(void 0, (0, _toConsumableArray2.default)(easing));
  }, exports.applyEasing = function (easing, position, customEasingFn) {
    return 0 === position ? 0 : 1 === position ? 1 : optimizeFloat(customEasingFn ? position > 0 ? customEasingFn(position) : position : position > 0 && easing && easings[easing] ? easings[easing](position) : position);
  };

  var easings = _interopRequireWildcard(__webpack_require__(82)),
      _bezierEasing = _interopRequireDefault(__webpack_require__(83));

  function optimizeFloat(value) {
    var digits = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5,
        base = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,
        pow = Math.pow(base, digits),
        _float = Number(Math.round(value * pow) / pow);

    return Math.abs(_float) > 1e-4 ? _float : 0;
  }
}, function (module, exports, __webpack_require__) {
  var arrayWithoutHoles = __webpack_require__(189),
      iterableToArray = __webpack_require__(190),
      nonIterableSpread = __webpack_require__(191);

  module.exports = function (arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _defineProperty2 = __webpack_require__(0)(__webpack_require__(17));

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.isPluginType = function (actionTypeId) {
    return actionTypeId === _constants.ActionTypeConsts.PLUGIN_LOTTIE;
  }, exports.clearPlugin = exports.renderPlugin = exports.createPluginInstance = exports.getPluginDestination = exports.getPluginDuration = exports.getPluginOrigin = exports.getPluginConfig = void 0;

  var _IX2LottieUtils = __webpack_require__(193),
      _constants = __webpack_require__(2),
      _IX2BrowserSupport = __webpack_require__(31),
      pluginMethodMap = (0, _defineProperty2.default)({}, _constants.ActionTypeConsts.PLUGIN_LOTTIE, {
    getConfig: _IX2LottieUtils.getPluginConfig,
    getOrigin: _IX2LottieUtils.getPluginOrigin,
    getDuration: _IX2LottieUtils.getPluginDuration,
    getDestination: _IX2LottieUtils.getPluginDestination,
    createInstance: _IX2LottieUtils.createPluginInstance,
    render: _IX2LottieUtils.renderPlugin,
    clear: _IX2LottieUtils.clearPlugin
  }),
      pluginMethod = function (methodName) {
    return function (actionTypeId) {
      if (!_IX2BrowserSupport.IS_BROWSER_ENV) return function () {
        return null;
      };
      var plugin = pluginMethodMap[actionTypeId];
      if (!plugin) throw new Error("IX2 no plugin configured for: ".concat(actionTypeId));
      var method = plugin[methodName];
      if (!method) throw new Error("IX2 invalid plugin method: ".concat(methodName));
      return method;
    };
  },
      getPluginConfig = pluginMethod("getConfig");

  exports.getPluginConfig = getPluginConfig;
  var getPluginOrigin = pluginMethod("getOrigin");
  exports.getPluginOrigin = getPluginOrigin;
  var getPluginDuration = pluginMethod("getDuration");
  exports.getPluginDuration = getPluginDuration;
  var getPluginDestination = pluginMethod("getDestination");
  exports.getPluginDestination = getPluginDestination;
  var createPluginInstance = pluginMethod("createInstance");
  exports.createPluginInstance = createPluginInstance;
  var renderPlugin = pluginMethod("render");
  exports.renderPlugin = renderPlugin;
  var clearPlugin = pluginMethod("clear");
  exports.clearPlugin = clearPlugin;
}, function (module, exports, __webpack_require__) {
  var baseForOwn = __webpack_require__(88),
      baseEach = __webpack_require__(200)(baseForOwn);

  module.exports = baseEach;
}, function (module, exports, __webpack_require__) {
  var baseFor = __webpack_require__(198),
      keys = __webpack_require__(23);

  module.exports = function (object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(204);

  exports.__esModule = !0, exports.default = void 0;

  var _default = _interopRequireDefault(__webpack_require__(205)).default;

  exports.default = _default;
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _toConsumableArray2 = __webpack_require__(0)(__webpack_require__(85)),
      _interopRequireWildcard = __webpack_require__(12),
      _interopRequireDefault = __webpack_require__(0);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.observeRequests = function (store) {
    observeStore({
      store: store,
      select: function (_ref) {
        return _ref.ixRequest.preview;
      },
      onChange: handlePreviewRequest
    }), observeStore({
      store: store,
      select: function (_ref2) {
        return _ref2.ixRequest.playback;
      },
      onChange: handlePlaybackRequest
    }), observeStore({
      store: store,
      select: function (_ref3) {
        return _ref3.ixRequest.stop;
      },
      onChange: handleStopRequest
    }), observeStore({
      store: store,
      select: function (_ref4) {
        return _ref4.ixRequest.clear;
      },
      onChange: handleClearRequest
    });
  }, exports.startEngine = startEngine, exports.stopEngine = stopEngine, exports.stopAllActionGroups = stopAllActionGroups, exports.stopActionGroup = stopActionGroup, exports.startActionGroup = startActionGroup;

  var _extends2 = _interopRequireDefault(__webpack_require__(18)),
      _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(208)),
      _find = _interopRequireDefault(__webpack_require__(60)),
      _get = _interopRequireDefault(__webpack_require__(25)),
      _size = _interopRequireDefault(__webpack_require__(209)),
      _omitBy = _interopRequireDefault(__webpack_require__(215)),
      _isEmpty = _interopRequireDefault(__webpack_require__(227)),
      _mapValues = _interopRequireDefault(__webpack_require__(228)),
      _forEach = _interopRequireDefault(__webpack_require__(229)),
      _endsWith = _interopRequireDefault(__webpack_require__(232)),
      _throttle = _interopRequireDefault(__webpack_require__(233)),
      _shallowEqual = _interopRequireDefault(__webpack_require__(89)),
      _constants = __webpack_require__(2),
      _shared = __webpack_require__(8),
      _IX2EngineActions = __webpack_require__(48),
      elementApi = _interopRequireWildcard(__webpack_require__(236)),
      _IX2VanillaEvents = _interopRequireDefault(__webpack_require__(237)),
      _constants$IX2EngineC = _constants.IX2EngineConstants,
      COLON_DELIMITER = _constants$IX2EngineC.COLON_DELIMITER,
      BOUNDARY_SELECTOR = _constants$IX2EngineC.BOUNDARY_SELECTOR,
      HTML_ELEMENT = _constants$IX2EngineC.HTML_ELEMENT,
      RENDER_GENERAL = _constants$IX2EngineC.RENDER_GENERAL,
      W_MOD_IX = _constants$IX2EngineC.W_MOD_IX,
      _shared$IX2VanillaUti = _shared.IX2VanillaUtils,
      getAffectedElements = _shared$IX2VanillaUti.getAffectedElements,
      getElementId = _shared$IX2VanillaUti.getElementId,
      getDestinationValues = _shared$IX2VanillaUti.getDestinationValues,
      observeStore = _shared$IX2VanillaUti.observeStore,
      getInstanceId = _shared$IX2VanillaUti.getInstanceId,
      renderHTMLElement = _shared$IX2VanillaUti.renderHTMLElement,
      clearAllStyles = _shared$IX2VanillaUti.clearAllStyles,
      getMaxDurationItemIndex = _shared$IX2VanillaUti.getMaxDurationItemIndex,
      getComputedStyle = _shared$IX2VanillaUti.getComputedStyle,
      getInstanceOrigin = _shared$IX2VanillaUti.getInstanceOrigin,
      reduceListToGroup = _shared$IX2VanillaUti.reduceListToGroup,
      shouldNamespaceEventParameter = _shared$IX2VanillaUti.shouldNamespaceEventParameter,
      getNamespacedParameterId = _shared$IX2VanillaUti.getNamespacedParameterId,
      shouldAllowMediaQuery = _shared$IX2VanillaUti.shouldAllowMediaQuery,
      cleanupHTMLElement = _shared$IX2VanillaUti.cleanupHTMLElement,
      stringifyTarget = _shared$IX2VanillaUti.stringifyTarget,
      mediaQueriesEqual = _shared$IX2VanillaUti.mediaQueriesEqual,
      _shared$IX2VanillaPlu = _shared.IX2VanillaPlugins,
      isPluginType = _shared$IX2VanillaPlu.isPluginType,
      createPluginInstance = _shared$IX2VanillaPlu.createPluginInstance,
      getPluginDuration = _shared$IX2VanillaPlu.getPluginDuration,
      ua = navigator.userAgent,
      IS_MOBILE_SAFARI = ua.match(/iPad/i) || ua.match(/iPhone/);

  function handlePreviewRequest(_ref7, store) {
    var rawData = _ref7.rawData,
        start = function () {
      startEngine({
        store: store,
        rawData: rawData,
        allowEvents: !0
      }), dispatchPageUpdateEvent();
    };

    _ref7.defer ? setTimeout(start, 0) : start();
  }

  function dispatchPageUpdateEvent() {
    document.dispatchEvent(new CustomEvent("IX2_PAGE_UPDATE"));
  }

  function isQuickEffect(id) {
    return id && (0, _endsWith.default)(id, "_EFFECT");
  }

  function handlePlaybackRequest(playback, store) {
    var actionTypeId = playback.actionTypeId,
        actionListId = playback.actionListId,
        actionItemId = playback.actionItemId,
        eventId = playback.eventId,
        allowEvents = playback.allowEvents,
        immediate = playback.immediate,
        testManual = playback.testManual,
        _playback$verbose = playback.verbose,
        verbose = void 0 === _playback$verbose || _playback$verbose,
        rawData = playback.rawData;

    if (actionListId && actionItemId && rawData && immediate) {
      var actionList = rawData.actionLists[actionListId];
      actionList && (rawData = reduceListToGroup({
        actionList: actionList,
        actionItemId: actionItemId,
        rawData: rawData
      }));
    }

    if (startEngine({
      store: store,
      rawData: rawData,
      allowEvents: allowEvents,
      testManual: testManual
    }), actionListId && actionTypeId === _constants.ActionTypeConsts.GENERAL_START_ACTION || isQuickEffect(actionTypeId)) {
      stopActionGroup({
        store: store,
        actionListId: actionListId
      }), renderInitialGroup({
        store: store,
        actionListId: actionListId,
        eventId: eventId
      });
      var started = startActionGroup({
        store: store,
        eventId: eventId,
        actionListId: actionListId,
        immediate: immediate,
        verbose: verbose
      });
      verbose && started && store.dispatch((0, _IX2EngineActions.actionListPlaybackChanged)({
        actionListId: actionListId,
        isPlaying: !immediate
      }));
    }
  }

  function handleStopRequest(_ref8, store) {
    var actionListId = _ref8.actionListId;
    actionListId ? stopActionGroup({
      store: store,
      actionListId: actionListId
    }) : stopAllActionGroups({
      store: store
    }), stopEngine(store);
  }

  function handleClearRequest(state, store) {
    stopEngine(store), clearAllStyles({
      store: store,
      elementApi: elementApi
    });
  }

  function startEngine(_ref9) {
    var documentElement,
        store = _ref9.store,
        rawData = _ref9.rawData,
        allowEvents = _ref9.allowEvents,
        testManual = _ref9.testManual,
        ixSession = store.getState().ixSession;
    rawData && store.dispatch((0, _IX2EngineActions.rawDataImported)(rawData)), ixSession.active || (store.dispatch((0, _IX2EngineActions.sessionInitialized)({
      hasBoundaryNodes: Boolean(document.querySelector(BOUNDARY_SELECTOR))
    })), allowEvents && (function (store) {
      var eventTypeMap = store.getState().ixData.eventTypeMap;
      updateViewportWidth(store), (0, _forEach.default)(eventTypeMap, function (events, key) {
        var logic = _IX2VanillaEvents.default[key];
        logic ? function (_ref13) {
          var logic = _ref13.logic,
              store = _ref13.store,
              events = _ref13.events;
          !function (events) {
            if (IS_MOBILE_SAFARI) {
              var injectedSelectors = {},
                  cssText = "";

              for (var eventId in events) {
                var _events$eventId = events[eventId],
                    eventTypeId = _events$eventId.eventTypeId,
                    target = _events$eventId.target,
                    selector = elementApi.getQuerySelector(target);
                injectedSelectors[selector] || eventTypeId !== _constants.EventTypeConsts.MOUSE_CLICK && eventTypeId !== _constants.EventTypeConsts.MOUSE_SECOND_CLICK || (injectedSelectors[selector] = !0, cssText += selector + "{cursor: pointer;touch-action: manipulation;}");
              }

              if (cssText) {
                var style = document.createElement("style");
                style.textContent = cssText, document.body.appendChild(style);
              }
            }
          }(events);
          var object,
              iteratee,
              eventTypes = logic.types,
              eventHandler = logic.handler,
              ixData = store.getState().ixData,
              actionLists = ixData.actionLists,
              eventTargets = (object = events, iteratee = getAffectedForEvent, (0, _omitBy.default)((0, _mapValues.default)(object, iteratee), _isEmpty.default));

          if ((0, _size.default)(eventTargets)) {
            (0, _forEach.default)(eventTargets, function (elements, key) {
              var event = events[key],
                  eventAction = event.action,
                  eventId = event.id,
                  _event$mediaQueries = event.mediaQueries,
                  mediaQueries = void 0 === _event$mediaQueries ? ixData.mediaQueryKeys : _event$mediaQueries,
                  actionListId = eventAction.config.actionListId;
              mediaQueriesEqual(mediaQueries, ixData.mediaQueryKeys) || store.dispatch((0, _IX2EngineActions.mediaQueriesDefined)()), eventAction.actionTypeId === _constants.ActionTypeConsts.GENERAL_CONTINUOUS_ACTION && (Array.isArray(event.config) ? event.config : [event.config]).forEach(function (eventConfig) {
                var continuousParameterGroupId = eventConfig.continuousParameterGroupId,
                    paramGroups = (0, _get.default)(actionLists, "".concat(actionListId, ".continuousParameterGroups"), []),
                    parameterGroup = (0, _find.default)(paramGroups, function (_ref14) {
                  return _ref14.id === continuousParameterGroupId;
                }),
                    smoothing = (eventConfig.smoothing || 0) / 100,
                    restingValue = (eventConfig.restingState || 0) / 100;
                parameterGroup && elements.forEach(function (eventTarget, index) {
                  !function (_ref11) {
                    var store = _ref11.store,
                        eventStateKey = _ref11.eventStateKey,
                        eventTarget = _ref11.eventTarget,
                        eventId = _ref11.eventId,
                        eventConfig = _ref11.eventConfig,
                        actionListId = _ref11.actionListId,
                        parameterGroup = _ref11.parameterGroup,
                        smoothing = _ref11.smoothing,
                        restingValue = _ref11.restingValue,
                        _store$getState4 = store.getState(),
                        ixData = _store$getState4.ixData,
                        ixSession = _store$getState4.ixSession,
                        event = ixData.events[eventId],
                        eventTypeId = event.eventTypeId,
                        targetCache = {},
                        instanceActionGroups = {},
                        instanceConfigs = [],
                        continuousActionGroups = parameterGroup.continuousActionGroups,
                        parameterId = parameterGroup.id;

                    shouldNamespaceEventParameter(eventTypeId, eventConfig) && (parameterId = getNamespacedParameterId(eventStateKey, parameterId));
                    var eventElementRoot = ixSession.hasBoundaryNodes && eventTarget ? elementApi.getClosestElement(eventTarget, BOUNDARY_SELECTOR) : null;
                    continuousActionGroups.forEach(function (actionGroup) {
                      var keyframe = actionGroup.keyframe;
                      actionGroup.actionItems.forEach(function (actionItem) {
                        var actionTypeId = actionItem.actionTypeId,
                            target = actionItem.config.target;

                        if (target) {
                          var elementRoot = target.boundaryMode ? eventElementRoot : null,
                              key = stringifyTarget(target) + COLON_DELIMITER + actionTypeId;

                          if (instanceActionGroups[key] = function () {
                            var groupIndex,
                                actionGroups = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                keyframe = arguments.length > 1 ? arguments[1] : void 0,
                                actionItem = arguments.length > 2 ? arguments[2] : void 0,
                                newActionGroups = (0, _toConsumableArray2.default)(actionGroups);
                            return newActionGroups.some(function (group, index) {
                              return group.keyframe === keyframe && (groupIndex = index, !0);
                            }), null == groupIndex && (groupIndex = newActionGroups.length, newActionGroups.push({
                              keyframe: keyframe,
                              actionItems: []
                            })), newActionGroups[groupIndex].actionItems.push(actionItem), newActionGroups;
                          }(instanceActionGroups[key], keyframe, actionItem), !targetCache[key]) {
                            targetCache[key] = !0;
                            var config = actionItem.config;
                            getAffectedElements({
                              config: config,
                              event: event,
                              eventTarget: eventTarget,
                              elementRoot: elementRoot,
                              elementApi: elementApi
                            }).forEach(function (element) {
                              instanceConfigs.push({
                                element: element,
                                key: key
                              });
                            });
                          }
                        }
                      });
                    }), instanceConfigs.forEach(function (_ref12) {
                      var element = _ref12.element,
                          key = _ref12.key,
                          actionGroups = instanceActionGroups[key],
                          actionItem = (0, _get.default)(actionGroups, "[0].actionItems[0]", {}),
                          actionTypeId = actionItem.actionTypeId,
                          pluginInstance = isPluginType(actionTypeId) ? createPluginInstance(actionTypeId)(element, actionItem) : null,
                          destination = getDestinationValues({
                        element: element,
                        actionItem: actionItem,
                        elementApi: elementApi
                      }, pluginInstance);
                      createInstance({
                        store: store,
                        element: element,
                        eventId: eventId,
                        actionListId: actionListId,
                        actionItem: actionItem,
                        destination: destination,
                        continuous: !0,
                        parameterId: parameterId,
                        actionGroups: actionGroups,
                        smoothing: smoothing,
                        restingValue: restingValue,
                        pluginInstance: pluginInstance
                      });
                    });
                  }({
                    store: store,
                    eventStateKey: eventId + COLON_DELIMITER + index,
                    eventTarget: eventTarget,
                    eventId: eventId,
                    eventConfig: eventConfig,
                    actionListId: actionListId,
                    parameterGroup: parameterGroup,
                    smoothing: smoothing,
                    restingValue: restingValue
                  });
                });
              }), (eventAction.actionTypeId === _constants.ActionTypeConsts.GENERAL_START_ACTION || isQuickEffect(eventAction.actionTypeId)) && renderInitialGroup({
                store: store,
                actionListId: actionListId,
                eventId: eventId
              });
            });

            var handleEvent = function (nativeEvent) {
              var ixSession = store.getState().ixSession;
              !function (eventTargets, eventCallback) {
                (0, _forEach.default)(eventTargets, function (elements, eventId) {
                  elements.forEach(function (element, index) {
                    !function (element, eventId, eventStateKey) {
                      var event = events[eventId],
                          oldState = ixSession.eventState[eventStateKey],
                          eventAction = event.action,
                          _event$mediaQueries2 = event.mediaQueries,
                          mediaQueries = void 0 === _event$mediaQueries2 ? ixData.mediaQueryKeys : _event$mediaQueries2;

                      if (shouldAllowMediaQuery(mediaQueries, ixSession.mediaQueryKey)) {
                        var handleEventWithConfig = function () {
                          var newState = eventHandler({
                            store: store,
                            element: element,
                            event: event,
                            eventConfig: arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                            nativeEvent: nativeEvent,
                            eventStateKey: eventStateKey
                          }, oldState);
                          (0, _shallowEqual.default)(newState, oldState) || store.dispatch((0, _IX2EngineActions.eventStateChanged)(eventStateKey, newState));
                        };

                        eventAction.actionTypeId === _constants.ActionTypeConsts.GENERAL_CONTINUOUS_ACTION ? (Array.isArray(event.config) ? event.config : [event.config]).forEach(handleEventWithConfig) : handleEventWithConfig();
                      }
                    }(element, eventId, eventId + COLON_DELIMITER + index);
                  });
                });
              }(eventTargets);
            },
                handleEventThrottled = (0, _throttle.default)(handleEvent, 12),
                addListeners = function (_ref15) {
              var _ref15$target = _ref15.target,
                  target = void 0 === _ref15$target ? document : _ref15$target,
                  types = _ref15.types,
                  shouldThrottle = _ref15.throttle;
              types.split(" ").filter(Boolean).forEach(function (type) {
                var handlerFunc = shouldThrottle ? handleEventThrottled : handleEvent;
                target.addEventListener(type, handlerFunc), store.dispatch((0, _IX2EngineActions.eventListenerAdded)(target, [type, handlerFunc]));
              });
            };

            Array.isArray(eventTypes) ? eventTypes.forEach(addListeners) : "string" == typeof eventTypes && addListeners(logic);
          }
        }({
          logic: logic,
          store: store,
          events: events
        }) : console.warn("IX2 event type not configured: ".concat(key));
      }), store.getState().ixSession.eventListeners.length && function (store) {
        var handleResize = function () {
          updateViewportWidth(store);
        };

        WINDOW_RESIZE_EVENTS.forEach(function (type) {
          window.addEventListener(type, handleResize), store.dispatch((0, _IX2EngineActions.eventListenerAdded)(window, [type, handleResize]));
        }), handleResize();
      }(store);
    }(store), -1 === (documentElement = document.documentElement).className.indexOf(W_MOD_IX) && (documentElement.className += " ".concat(W_MOD_IX)), store.getState().ixSession.hasDefinedMediaQueries && function (store) {
      observeStore({
        store: store,
        select: function (_ref5) {
          return _ref5.ixSession.mediaQueryKey;
        },
        onChange: function () {
          stopEngine(store), clearAllStyles({
            store: store,
            elementApi: elementApi
          }), startEngine({
            store: store,
            allowEvents: !0
          }), dispatchPageUpdateEvent();
        }
      });
    }(store)), store.dispatch((0, _IX2EngineActions.sessionStarted)()), function (store, testManual) {
      !function handleFrame(now) {
        var _store$getState2 = store.getState(),
            ixSession = _store$getState2.ixSession,
            ixParameters = _store$getState2.ixParameters;

        ixSession.active && (store.dispatch((0, _IX2EngineActions.animationFrameChanged)(now, ixParameters)), testManual ? function (store, onTick) {
          var unsubscribe = observeStore({
            store: store,
            select: function (_ref6) {
              return _ref6.ixSession.tick;
            },
            onChange: function (tick) {
              onTick(tick), unsubscribe();
            }
          });
        }(store, handleFrame) : requestAnimationFrame(handleFrame));
      }(window.performance.now());
    }(store, testManual));
  }

  function stopEngine(store) {
    var ixSession = store.getState().ixSession;
    ixSession.active && (ixSession.eventListeners.forEach(clearEventListener), store.dispatch((0, _IX2EngineActions.sessionStopped)()));
  }

  function clearEventListener(_ref10) {
    var target = _ref10.target,
        listenerParams = _ref10.listenerParams;
    target.removeEventListener.apply(target, listenerParams);
  }

  var WINDOW_RESIZE_EVENTS = ["resize", "orientationchange"];

  function updateViewportWidth(store) {
    var _store$getState7 = store.getState(),
        ixSession = _store$getState7.ixSession,
        ixData = _store$getState7.ixData,
        width = window.innerWidth;

    if (width !== ixSession.viewportWidth) {
      var mediaQueries = ixData.mediaQueries;
      store.dispatch((0, _IX2EngineActions.viewportWidthChanged)({
        width: width,
        mediaQueries: mediaQueries
      }));
    }
  }

  var getAffectedForEvent = function (event) {
    var config = {
      target: event.target
    };
    return getAffectedElements({
      config: config,
      elementApi: elementApi
    });
  };

  function renderInitialGroup(_ref16) {
    var store = _ref16.store,
        actionListId = _ref16.actionListId,
        eventId = _ref16.eventId,
        _store$getState10 = store.getState(),
        ixData = _store$getState10.ixData,
        ixSession = _store$getState10.ixSession,
        actionLists = ixData.actionLists,
        event = ixData.events[eventId],
        actionList = actionLists[actionListId];

    if (actionList && actionList.useFirstGroupAsInitialState) {
      var initialStateItems = (0, _get.default)(actionList, "actionItemGroups[0].actionItems", []),
          mediaQueries = (0, _get.default)(event, "mediaQueries", ixData.mediaQueryKeys);
      if (!shouldAllowMediaQuery(mediaQueries, ixSession.mediaQueryKey)) return;
      initialStateItems.forEach(function (actionItem) {
        var config = actionItem.config,
            actionTypeId = actionItem.actionTypeId,
            itemElements = getAffectedElements({
          config: config,
          event: event,
          elementApi: elementApi
        }),
            shouldUsePlugin = isPluginType(actionTypeId);
        itemElements.forEach(function (element) {
          var pluginInstance = shouldUsePlugin ? createPluginInstance(actionTypeId)(element, actionItem) : null;
          createInstance({
            destination: getDestinationValues({
              element: element,
              actionItem: actionItem,
              elementApi: elementApi
            }, pluginInstance),
            immediate: !0,
            store: store,
            element: element,
            eventId: eventId,
            actionItem: actionItem,
            actionListId: actionListId,
            pluginInstance: pluginInstance
          });
        });
      });
    }
  }

  function stopAllActionGroups(_ref17) {
    var store = _ref17.store,
        ixInstances = store.getState().ixInstances;
    (0, _forEach.default)(ixInstances, function (instance) {
      if (!instance.continuous) {
        var actionListId = instance.actionListId,
            verbose = instance.verbose;
        removeInstance(instance, store), verbose && store.dispatch((0, _IX2EngineActions.actionListPlaybackChanged)({
          actionListId: actionListId,
          isPlaying: !1
        }));
      }
    });
  }

  function stopActionGroup(_ref18) {
    var store = _ref18.store,
        eventId = _ref18.eventId,
        eventTarget = _ref18.eventTarget,
        eventStateKey = _ref18.eventStateKey,
        actionListId = _ref18.actionListId,
        _store$getState12 = store.getState(),
        ixInstances = _store$getState12.ixInstances,
        eventElementRoot = _store$getState12.ixSession.hasBoundaryNodes && eventTarget ? elementApi.getClosestElement(eventTarget, BOUNDARY_SELECTOR) : null;

    (0, _forEach.default)(ixInstances, function (instance) {
      var boundaryMode = (0, _get.default)(instance, "actionItem.config.target.boundaryMode"),
          validEventKey = !eventStateKey || instance.eventStateKey === eventStateKey;

      if (instance.actionListId === actionListId && instance.eventId === eventId && validEventKey) {
        if (eventElementRoot && boundaryMode && !elementApi.elementContains(eventElementRoot, instance.element)) return;
        removeInstance(instance, store), instance.verbose && store.dispatch((0, _IX2EngineActions.actionListPlaybackChanged)({
          actionListId: actionListId,
          isPlaying: !1
        }));
      }
    });
  }

  function startActionGroup(_ref19) {
    var store = _ref19.store,
        eventId = _ref19.eventId,
        eventTarget = _ref19.eventTarget,
        eventStateKey = _ref19.eventStateKey,
        actionListId = _ref19.actionListId,
        _ref19$groupIndex = _ref19.groupIndex,
        groupIndex = void 0 === _ref19$groupIndex ? 0 : _ref19$groupIndex,
        immediate = _ref19.immediate,
        verbose = _ref19.verbose,
        _store$getState13 = store.getState(),
        ixData = _store$getState13.ixData,
        ixSession = _store$getState13.ixSession,
        event = ixData.events[eventId] || {},
        _event$mediaQueries3 = event.mediaQueries,
        mediaQueries = void 0 === _event$mediaQueries3 ? ixData.mediaQueryKeys : _event$mediaQueries3,
        actionList = (0, _get.default)(ixData, "actionLists.".concat(actionListId), {}),
        actionItemGroups = actionList.actionItemGroups,
        useFirstGroupAsInitialState = actionList.useFirstGroupAsInitialState;

    if (!actionItemGroups || !actionItemGroups.length) return !1;
    groupIndex >= actionItemGroups.length && (0, _get.default)(event, "config.loop") && (groupIndex = 0), 0 === groupIndex && useFirstGroupAsInitialState && groupIndex++;
    var instanceDelay = (0 === groupIndex || 1 === groupIndex && useFirstGroupAsInitialState) && isQuickEffect(event.action && event.action.actionTypeId) ? event.config.delay : void 0,
        actionItems = (0, _get.default)(actionItemGroups, [groupIndex, "actionItems"], []);
    if (!actionItems.length) return !1;
    if (!shouldAllowMediaQuery(mediaQueries, ixSession.mediaQueryKey)) return !1;
    var eventElementRoot = ixSession.hasBoundaryNodes && eventTarget ? elementApi.getClosestElement(eventTarget, BOUNDARY_SELECTOR) : null,
        carrierIndex = getMaxDurationItemIndex(actionItems),
        groupStartResult = !1;
    return actionItems.forEach(function (actionItem, actionIndex) {
      var config = actionItem.config,
          actionTypeId = actionItem.actionTypeId,
          shouldUsePlugin = isPluginType(actionTypeId),
          target = config.target;

      if (target) {
        var elementRoot = target.boundaryMode ? eventElementRoot : null;
        getAffectedElements({
          config: config,
          event: event,
          eventTarget: eventTarget,
          elementRoot: elementRoot,
          elementApi: elementApi
        }).forEach(function (element, elementIndex) {
          var pluginInstance = shouldUsePlugin ? createPluginInstance(actionTypeId)(element, actionItem) : null,
              pluginDuration = shouldUsePlugin ? getPluginDuration(actionTypeId)(element, actionItem) : null;
          groupStartResult = !0;
          var isCarrier = carrierIndex === actionIndex && 0 === elementIndex,
              computedStyle = getComputedStyle({
            element: element,
            actionItem: actionItem
          }),
              destination = getDestinationValues({
            element: element,
            actionItem: actionItem,
            elementApi: elementApi
          }, pluginInstance);
          createInstance({
            store: store,
            element: element,
            actionItem: actionItem,
            eventId: eventId,
            eventTarget: eventTarget,
            eventStateKey: eventStateKey,
            actionListId: actionListId,
            groupIndex: groupIndex,
            isCarrier: isCarrier,
            computedStyle: computedStyle,
            destination: destination,
            immediate: immediate,
            verbose: verbose,
            pluginInstance: pluginInstance,
            pluginDuration: pluginDuration,
            instanceDelay: instanceDelay
          });
        });
      }
    }), groupStartResult;
  }

  function createInstance(options) {
    var store = options.store,
        computedStyle = options.computedStyle,
        rest = (0, _objectWithoutPropertiesLoose2.default)(options, ["store", "computedStyle"]),
        autoStart = !rest.continuous,
        element = rest.element,
        actionItem = rest.actionItem,
        immediate = rest.immediate,
        pluginInstance = rest.pluginInstance,
        instanceId = getInstanceId(),
        _store$getState14 = store.getState(),
        ixElements = _store$getState14.ixElements,
        ixSession = _store$getState14.ixSession,
        elementId = getElementId(ixElements, element),
        refState = (ixElements[elementId] || {}).refState,
        refType = elementApi.getRefType(element),
        origin = getInstanceOrigin(element, refState, computedStyle, actionItem, elementApi, pluginInstance);

    store.dispatch((0, _IX2EngineActions.instanceAdded)((0, _extends2.default)({
      instanceId: instanceId,
      elementId: elementId,
      origin: origin,
      refType: refType
    }, rest))), dispatchCustomEvent(document.body, "ix2-animation-started", instanceId), immediate ? function (store, instanceId) {
      var ixParameters = store.getState().ixParameters;
      store.dispatch((0, _IX2EngineActions.instanceStarted)(instanceId, 0)), store.dispatch((0, _IX2EngineActions.animationFrameChanged)(performance.now(), ixParameters)), handleInstanceChange(store.getState().ixInstances[instanceId], store);
    }(store, instanceId) : (observeStore({
      store: store,
      select: function (_ref21) {
        return _ref21.ixInstances[instanceId];
      },
      onChange: handleInstanceChange
    }), autoStart && store.dispatch((0, _IX2EngineActions.instanceStarted)(instanceId, ixSession.tick)));
  }

  function removeInstance(instance, store) {
    dispatchCustomEvent(document.body, "ix2-animation-stopping", {
      instanceId: instance.id,
      state: store.getState()
    });

    var elementId = instance.elementId,
        actionItem = instance.actionItem,
        _ref22 = store.getState().ixElements[elementId] || {},
        ref = _ref22.ref;

    _ref22.refType === HTML_ELEMENT && cleanupHTMLElement(ref, actionItem, elementApi), store.dispatch((0, _IX2EngineActions.instanceRemoved)(instance.id));
  }

  function dispatchCustomEvent(element, eventName, detail) {
    var event = document.createEvent("CustomEvent");
    event.initCustomEvent(eventName, !0, !0, detail), element.dispatchEvent(event);
  }

  function handleInstanceChange(instance, store) {
    var active = instance.active,
        continuous = instance.continuous,
        complete = instance.complete,
        elementId = instance.elementId,
        actionItem = instance.actionItem,
        actionTypeId = instance.actionTypeId,
        renderType = instance.renderType,
        current = instance.current,
        groupIndex = instance.groupIndex,
        eventId = instance.eventId,
        eventTarget = instance.eventTarget,
        eventStateKey = instance.eventStateKey,
        actionListId = instance.actionListId,
        isCarrier = instance.isCarrier,
        styleProp = instance.styleProp,
        verbose = instance.verbose,
        pluginInstance = instance.pluginInstance,
        _store$getState18 = store.getState(),
        ixData = _store$getState18.ixData,
        ixSession = _store$getState18.ixSession,
        _event$mediaQueries4 = (ixData.events[eventId] || {}).mediaQueries,
        mediaQueries = void 0 === _event$mediaQueries4 ? ixData.mediaQueryKeys : _event$mediaQueries4;

    if (shouldAllowMediaQuery(mediaQueries, ixSession.mediaQueryKey) && (continuous || active || complete)) {
      if (current || renderType === RENDER_GENERAL && complete) {
        store.dispatch((0, _IX2EngineActions.elementStateChanged)(elementId, actionTypeId, current, actionItem));

        var _ref23 = store.getState().ixElements[elementId] || {},
            ref = _ref23.ref,
            refType = _ref23.refType,
            refState = _ref23.refState,
            actionState = refState && refState[actionTypeId];

        switch (refType) {
          case HTML_ELEMENT:
            renderHTMLElement(ref, refState, actionState, eventId, actionItem, styleProp, elementApi, renderType, pluginInstance);
        }
      }

      if (complete) {
        if (isCarrier) {
          var started = startActionGroup({
            store: store,
            eventId: eventId,
            eventTarget: eventTarget,
            eventStateKey: eventStateKey,
            actionListId: actionListId,
            groupIndex: groupIndex + 1,
            verbose: verbose
          });
          verbose && !started && store.dispatch((0, _IX2EngineActions.actionListPlaybackChanged)({
            actionListId: actionListId,
            isPlaying: !1
          }));
        }

        removeInstance(instance, store);
      }
    }
  }
}, function (module, exports, __webpack_require__) {
  var defineProperty = __webpack_require__(92);

  module.exports = function (object, key, value) {
    "__proto__" == key && defineProperty ? defineProperty(object, key, {
      configurable: !0,
      enumerable: !0,
      value: value,
      writable: !0
    }) : object[key] = value;
  };
}, function (module, exports, __webpack_require__) {
  var getNative = __webpack_require__(6),
      defineProperty = function () {
    try {
      var func = getNative(Object, "defineProperty");
      return func({}, "", {}), func;
    } catch (e) {}
  }();

  module.exports = defineProperty;
}, function (module, exports) {
  module.exports = function (number, lower, upper) {
    return number == number && (void 0 !== upper && (number = number <= upper ? number : upper), void 0 !== lower && (number = number >= lower ? number : lower)), number;
  };
}, function (module, exports, __webpack_require__) {
  var isObject = __webpack_require__(4),
      objectCreate = Object.create,
      baseCreate = function () {
    function object() {}

    return function (proto) {
      if (!isObject(proto)) return {};
      if (objectCreate) return objectCreate(proto);
      object.prototype = proto;
      var result = new object();
      return object.prototype = void 0, result;
    };
  }();

  module.exports = baseCreate;
}, function (module, exports, __webpack_require__) {
  var metaMap = __webpack_require__(250),
      noop = __webpack_require__(251),
      getData = metaMap ? function (func) {
    return metaMap.get(func);
  } : noop;

  module.exports = getData;
}, function (module, exports, __webpack_require__) {
  var realNames = __webpack_require__(252),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (func) {
    for (var result = func.name + "", array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0; length--;) {
      var data = array[length],
          otherFunc = data.func;
      if (null == otherFunc || otherFunc == func) return data.name;
    }

    return result;
  };
}, function (module, exports, __webpack_require__) {
  __webpack_require__(98), __webpack_require__(100), __webpack_require__(102), __webpack_require__(258), __webpack_require__(259), module.exports = __webpack_require__(260);
}, function (module, exports, __webpack_require__) {
  "use strict";

  var Webflow = __webpack_require__(11);

  Webflow.define("brand", module.exports = function ($) {
    var brandElement,
        api = {},
        doc = document,
        $html = $("html"),
        $body = $("body"),
        location = window.location,
        isPhantom = /PhantomJS/i.test(navigator.userAgent),
        fullScreenEvents = "fullscreenchange webkitfullscreenchange mozfullscreenchange msfullscreenchange";

    function onFullScreenChange() {
      var fullScreen = doc.fullScreen || doc.mozFullScreen || doc.webkitIsFullScreen || doc.msFullscreenElement || Boolean(doc.webkitFullscreenElement);
      $(brandElement).attr("style", fullScreen ? "display: none !important;" : "");
    }

    function ensureBrand() {
      var found = $body.children(".w-webflow-badge"),
          match = found.length && found.get(0) === brandElement,
          inEditor = Webflow.env("editor");
      match ? inEditor && found.remove() : (found.length && found.remove(), inEditor || $body.append(brandElement));
    }

    return api.ready = function () {
      var $brand,
          $logoArt,
          $logoText,
          shouldBrand = $html.attr("data-wf-status"),
          publishedDomain = $html.attr("data-wf-domain") || "";
      /\.webflow\.io$/i.test(publishedDomain) && location.hostname !== publishedDomain && (shouldBrand = !0), shouldBrand && !isPhantom && (brandElement = brandElement || ($brand = $('<a class="w-webflow-badge"></a>').attr("href", "https://webflow.com?utm_campaign=brandjs"), $logoArt = $("<img>").attr("src", "https://d3e54v103j8qbb.cloudfront.net/img/webflow-badge-icon.f67cd735e3.svg").attr("alt", "").css({
        marginRight: "8px",
        width: "16px"
      }), $logoText = $("<img>").attr("src", "https://d1otoma47x30pg.cloudfront.net/img/webflow-badge-text.6faa6a38cd.svg").attr("alt", "Made in Webflow"), $brand.append($logoArt, $logoText), $brand[0]), ensureBrand(), setTimeout(ensureBrand, 500), $(doc).off(fullScreenEvents, onFullScreenChange).on(fullScreenEvents, onFullScreenChange));
    }, api;
  });
}, function (module, exports, __webpack_require__) {
  "use strict";

  var $ = window.$,
      tram = __webpack_require__(52) && $.tram;

  module.exports = function () {
    var _ = {
      VERSION: "1.6.0-Webflow"
    },
        breaker = {},
        ArrayProto = Array.prototype,
        ObjProto = Object.prototype,
        FuncProto = Function.prototype,
        slice = (ArrayProto.push, ArrayProto.slice),
        hasOwnProperty = (ArrayProto.concat, ObjProto.toString, ObjProto.hasOwnProperty),
        nativeForEach = ArrayProto.forEach,
        nativeMap = ArrayProto.map,
        nativeFilter = (ArrayProto.reduce, ArrayProto.reduceRight, ArrayProto.filter),
        nativeSome = (ArrayProto.every, ArrayProto.some),
        nativeIndexOf = ArrayProto.indexOf,
        nativeKeys = (ArrayProto.lastIndexOf, Array.isArray, Object.keys),
        each = (FuncProto.bind, _.each = _.forEach = function (obj, iterator, context) {
      if (null == obj) return obj;
      if (nativeForEach && obj.forEach === nativeForEach) obj.forEach(iterator, context);else if (obj.length === +obj.length) {
        for (var i = 0, length = obj.length; i < length; i++) if (iterator.call(context, obj[i], i, obj) === breaker) return;
      } else {
        var keys = _.keys(obj);

        for (i = 0, length = keys.length; i < length; i++) if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
      return obj;
    });
    _.map = _.collect = function (obj, iterator, context) {
      var results = [];
      return null == obj ? results : nativeMap && obj.map === nativeMap ? obj.map(iterator, context) : (each(obj, function (value, index, list) {
        results.push(iterator.call(context, value, index, list));
      }), results);
    }, _.find = _.detect = function (obj, predicate, context) {
      var result;
      return any(obj, function (value, index, list) {
        if (predicate.call(context, value, index, list)) return result = value, !0;
      }), result;
    }, _.filter = _.select = function (obj, predicate, context) {
      var results = [];
      return null == obj ? results : nativeFilter && obj.filter === nativeFilter ? obj.filter(predicate, context) : (each(obj, function (value, index, list) {
        predicate.call(context, value, index, list) && results.push(value);
      }), results);
    };

    var any = _.some = _.any = function (obj, predicate, context) {
      predicate || (predicate = _.identity);
      var result = !1;
      return null == obj ? result : nativeSome && obj.some === nativeSome ? obj.some(predicate, context) : (each(obj, function (value, index, list) {
        if (result || (result = predicate.call(context, value, index, list))) return breaker;
      }), !!result);
    };

    _.contains = _.include = function (obj, target) {
      return null != obj && (nativeIndexOf && obj.indexOf === nativeIndexOf ? -1 != obj.indexOf(target) : any(obj, function (value) {
        return value === target;
      }));
    }, _.delay = function (func, wait) {
      var args = slice.call(arguments, 2);
      return setTimeout(function () {
        return func.apply(null, args);
      }, wait);
    }, _.defer = function (func) {
      return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
    }, _.throttle = function (func) {
      var wait, args, context;
      return function () {
        wait || (wait = !0, args = arguments, context = this, tram.frame(function () {
          wait = !1, func.apply(context, args);
        }));
      };
    }, _.debounce = function (func, wait, immediate) {
      var timeout,
          args,
          context,
          timestamp,
          result,
          later = function later() {
        var last = _.now() - timestamp;
        last < wait ? timeout = setTimeout(later, wait - last) : (timeout = null, immediate || (result = func.apply(context, args), context = args = null));
      };

      return function () {
        context = this, args = arguments, timestamp = _.now();
        var callNow = immediate && !timeout;
        return timeout || (timeout = setTimeout(later, wait)), callNow && (result = func.apply(context, args), context = args = null), result;
      };
    }, _.defaults = function (obj) {
      if (!_.isObject(obj)) return obj;

      for (var i = 1, length = arguments.length; i < length; i++) {
        var source = arguments[i];

        for (var prop in source) void 0 === obj[prop] && (obj[prop] = source[prop]);
      }

      return obj;
    }, _.keys = function (obj) {
      if (!_.isObject(obj)) return [];
      if (nativeKeys) return nativeKeys(obj);
      var keys = [];

      for (var key in obj) _.has(obj, key) && keys.push(key);

      return keys;
    }, _.has = function (obj, key) {
      return hasOwnProperty.call(obj, key);
    }, _.isObject = function (obj) {
      return obj === Object(obj);
    }, _.now = Date.now || function () {
      return new Date().getTime();
    }, _.templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g
    };

    var noMatch = /(.)^/,
        escapes = {
      "'": "'",
      "\\": "\\",
      "\r": "r",
      "\n": "n",
      "\u2028": "u2028",
      "\u2029": "u2029"
    },
        escaper = /\\|'|\r|\n|\u2028|\u2029/g,
        escapeChar = function (match) {
      return "\\" + escapes[match];
    };

    return _.template = function (text, settings, oldSettings) {
      !settings && oldSettings && (settings = oldSettings), settings = _.defaults({}, settings, _.templateSettings);
      var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join("|") + "|$", "g"),
          index = 0,
          source = "__p+='";
      text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
        return source += text.slice(index, offset).replace(escaper, escapeChar), index = offset + match.length, escape ? source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'" : interpolate ? source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'" : evaluate && (source += "';\n" + evaluate + "\n__p+='"), match;
      }), source += "';\n", settings.variable || (source = "with(obj||{}){\n" + source + "}\n"), source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";

      try {
        var render = new Function(settings.variable || "obj", "_", source);
      } catch (e) {
        throw e.source = source, e;
      }

      var template = function (data) {
        return render.call(this, data, _);
      },
          argument = settings.variable || "obj";

      return template.source = "function(" + argument + "){\n" + source + "}", template;
    }, _;
  }();
}, function (module, exports, __webpack_require__) {
  "use strict";

  var IXEvents = __webpack_require__(101);

  function dispatchCustomEvent(element, eventName) {
    var event = document.createEvent("CustomEvent");
    event.initCustomEvent(eventName, !0, !0, null), element.dispatchEvent(event);
  }

  var $ = window.jQuery,
      api = {},
      eventTriggers = {
    reset: function (i, el) {
      IXEvents.triggers.reset(i, el);
    },
    intro: function (i, el) {
      IXEvents.triggers.intro(i, el), dispatchCustomEvent(el, "COMPONENT_ACTIVE");
    },
    outro: function (i, el) {
      IXEvents.triggers.outro(i, el), dispatchCustomEvent(el, "COMPONENT_INACTIVE");
    }
  };
  api.triggers = {}, api.types = {
    INTRO: "w-ix-intro.w-ix",
    OUTRO: "w-ix-outro.w-ix"
  }, $.extend(api.triggers, eventTriggers), module.exports = api;
}, function (module, exports, __webpack_require__) {
  "use strict";

  var $ = window.jQuery,
      api = {},
      eventQueue = [],
      eventTriggers = {
    reset: function (i, el) {
      el.__wf_intro = null;
    },
    intro: function (i, el) {
      el.__wf_intro || (el.__wf_intro = !0, $(el).triggerHandler(api.types.INTRO));
    },
    outro: function (i, el) {
      el.__wf_intro && (el.__wf_intro = null, $(el).triggerHandler(api.types.OUTRO));
    }
  };
  api.triggers = {}, api.types = {
    INTRO: "w-ix-intro.w-ix",
    OUTRO: "w-ix-outro.w-ix"
  }, api.init = function () {
    for (var count = eventQueue.length, i = 0; i < count; i++) {
      var memo = eventQueue[i];
      memo[0](0, memo[1]);
    }

    eventQueue = [], $.extend(api.triggers, eventTriggers);
  }, api.async = function () {
    for (var key in eventTriggers) {
      var func = eventTriggers[key];
      eventTriggers.hasOwnProperty(key) && (api.triggers[key] = function (i, el) {
        eventQueue.push([func, el]);
      });
    }
  }, api.async(), module.exports = api;
}, function (module, exports, __webpack_require__) {
  "use strict";

  var Webflow = __webpack_require__(11),
      ix2 = __webpack_require__(103);

  ix2.setEnv(Webflow.env), Webflow.define("ix2", module.exports = function () {
    return ix2;
  });
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _interopRequireWildcard = __webpack_require__(12),
      _interopRequireDefault = __webpack_require__(0);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.setEnv = function (env) {
    env() && (0, _IX2VanillaEngine.observeRequests)(store);
  }, exports.init = function (rawData) {
    destroy(), (0, _IX2VanillaEngine.startEngine)({
      store: store,
      rawData: rawData,
      allowEvents: !0
    });
  }, exports.destroy = destroy, exports.actions = exports.store = void 0;

  var _redux = __webpack_require__(53),
      _IX2Reducer = _interopRequireDefault(__webpack_require__(115)),
      _IX2VanillaEngine = __webpack_require__(90),
      actions = _interopRequireWildcard(__webpack_require__(48));

  exports.actions = actions;
  var store = (0, _redux.createStore)(_IX2Reducer.default);

  function destroy() {
    (0, _IX2VanillaEngine.stopEngine)(store);
  }

  exports.store = store;
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__);

  var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(55),
      _getRawTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(107),
      _objectToString_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(108),
      symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default.toStringTag : void 0;

  __webpack_exports__.default = function (value) {
    return null == value ? void 0 === value ? "[object Undefined]" : "[object Null]" : symToStringTag && symToStringTag in Object(value) ? Object(_getRawTag_js__WEBPACK_IMPORTED_MODULE_1__.default)(value) : Object(_objectToString_js__WEBPACK_IMPORTED_MODULE_2__.default)(value);
  };
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__);

  var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(106),
      freeSelf = "object" == typeof self && self && self.Object === Object && self,
      root = _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__.default || freeSelf || Function("return this")();

  __webpack_exports__.default = root;
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__), function (global) {
    var freeGlobal = "object" == typeof global && global && global.Object === Object && global;
    __webpack_exports__.default = freeGlobal;
  }.call(this, __webpack_require__(29));
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__);

  var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(55),
      objectProto = Object.prototype,
      hasOwnProperty = objectProto.hasOwnProperty,
      nativeObjectToString = objectProto.toString,
      symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__.default.toStringTag : void 0;

  __webpack_exports__.default = function (value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = void 0;
      var unmasked = !0;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    return unmasked && (isOwn ? value[symToStringTag] = tag : delete value[symToStringTag]), result;
  };
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__);

  var nativeObjectToString = Object.prototype.toString;

  __webpack_exports__.default = function (value) {
    return nativeObjectToString.call(value);
  };
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__);

  var _overArg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(110),
      getPrototype = Object(_overArg_js__WEBPACK_IMPORTED_MODULE_0__.default)(Object.getPrototypeOf, Object);

  __webpack_exports__.default = getPrototype;
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__), __webpack_exports__.default = function (func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  };
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__), __webpack_exports__.default = function (value) {
    return null != value && "object" == typeof value;
  };
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  __webpack_require__.r(__webpack_exports__), function (global, module) {
    var root,
        _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(114);

    root = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== global ? global : module;
    var result = Object(_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.default)(root);
    __webpack_exports__.default = result;
  }.call(this, __webpack_require__(29), __webpack_require__(113)(module));
}, function (module, exports) {
  module.exports = function (originalModule) {
    if (!originalModule.webpackPolyfill) {
      var module = Object.create(originalModule);
      module.children || (module.children = []), Object.defineProperty(module, "loaded", {
        enumerable: !0,
        get: function () {
          return module.l;
        }
      }), Object.defineProperty(module, "id", {
        enumerable: !0,
        get: function () {
          return module.i;
        }
      }), Object.defineProperty(module, "exports", {
        enumerable: !0
      }), module.webpackPolyfill = 1;
    }

    return module;
  };
}, function (module, __webpack_exports__, __webpack_require__) {
  "use strict";

  function symbolObservablePonyfill(root) {
    var result,
        Symbol = root.Symbol;
    return "function" == typeof Symbol ? Symbol.observable ? result = Symbol.observable : (result = Symbol("observable"), Symbol.observable = result) : result = "@@observable", result;
  }

  __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, "default", function () {
    return symbolObservablePonyfill;
  });
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.default = void 0;

  var _redux = __webpack_require__(53),
      _IX2DataReducer = __webpack_require__(116),
      _IX2RequestReducer = __webpack_require__(122),
      _IX2SessionReducer = __webpack_require__(123),
      _shared = __webpack_require__(8),
      _IX2InstancesReducer = __webpack_require__(206),
      _IX2ParametersReducer = __webpack_require__(207),
      ixElements = _shared.IX2ElementsReducer.ixElements,
      _default = (0, _redux.combineReducers)({
    ixData: _IX2DataReducer.ixData,
    ixRequest: _IX2RequestReducer.ixRequest,
    ixSession: _IX2SessionReducer.ixSession,
    ixElements: ixElements,
    ixInstances: _IX2InstancesReducer.ixInstances,
    ixParameters: _IX2ParametersReducer.ixParameters
  });

  exports.default = _default;
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.ixData = void 0;

  var IX2_RAW_DATA_IMPORTED = __webpack_require__(2).IX2EngineActionTypes.IX2_RAW_DATA_IMPORTED;

  exports.ixData = function () {
    var state = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Object.freeze({}),
        action = arguments.length > 1 ? arguments[1] : void 0;

    switch (action.type) {
      case IX2_RAW_DATA_IMPORTED:
        return action.payload.ixData || Object.freeze({});

      default:
        return state;
    }
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.QuickEffectDirectionConsts = exports.QuickEffectIds = exports.EventLimitAffectedElements = exports.EventContinuousMouseAxes = exports.EventBasedOn = exports.EventAppliesTo = exports.EventTypeConsts = void 0, exports.EventTypeConsts = {
    NAVBAR_OPEN: "NAVBAR_OPEN",
    NAVBAR_CLOSE: "NAVBAR_CLOSE",
    TAB_ACTIVE: "TAB_ACTIVE",
    TAB_INACTIVE: "TAB_INACTIVE",
    SLIDER_ACTIVE: "SLIDER_ACTIVE",
    SLIDER_INACTIVE: "SLIDER_INACTIVE",
    DROPDOWN_OPEN: "DROPDOWN_OPEN",
    DROPDOWN_CLOSE: "DROPDOWN_CLOSE",
    MOUSE_CLICK: "MOUSE_CLICK",
    MOUSE_SECOND_CLICK: "MOUSE_SECOND_CLICK",
    MOUSE_DOWN: "MOUSE_DOWN",
    MOUSE_UP: "MOUSE_UP",
    MOUSE_OVER: "MOUSE_OVER",
    MOUSE_OUT: "MOUSE_OUT",
    MOUSE_MOVE: "MOUSE_MOVE",
    MOUSE_MOVE_IN_VIEWPORT: "MOUSE_MOVE_IN_VIEWPORT",
    SCROLL_INTO_VIEW: "SCROLL_INTO_VIEW",
    SCROLL_OUT_OF_VIEW: "SCROLL_OUT_OF_VIEW",
    SCROLLING_IN_VIEW: "SCROLLING_IN_VIEW",
    ECOMMERCE_CART_OPEN: "ECOMMERCE_CART_OPEN",
    ECOMMERCE_CART_CLOSE: "ECOMMERCE_CART_CLOSE",
    PAGE_START: "PAGE_START",
    PAGE_FINISH: "PAGE_FINISH",
    PAGE_SCROLL_UP: "PAGE_SCROLL_UP",
    PAGE_SCROLL_DOWN: "PAGE_SCROLL_DOWN",
    PAGE_SCROLL: "PAGE_SCROLL"
  }, exports.EventAppliesTo = {
    ELEMENT: "ELEMENT",
    CLASS: "CLASS",
    PAGE: "PAGE"
  }, exports.EventBasedOn = {
    ELEMENT: "ELEMENT",
    VIEWPORT: "VIEWPORT"
  }, exports.EventContinuousMouseAxes = {
    X_AXIS: "X_AXIS",
    Y_AXIS: "Y_AXIS"
  }, exports.EventLimitAffectedElements = {
    CHILDREN: "CHILDREN",
    SIBLINGS: "SIBLINGS",
    IMMEDIATE_CHILDREN: "IMMEDIATE_CHILDREN"
  }, exports.QuickEffectIds = {
    FADE_EFFECT: "FADE_EFFECT",
    SLIDE_EFFECT: "SLIDE_EFFECT",
    GROW_EFFECT: "GROW_EFFECT",
    SHRINK_EFFECT: "SHRINK_EFFECT",
    SPIN_EFFECT: "SPIN_EFFECT",
    FLY_EFFECT: "FLY_EFFECT",
    POP_EFFECT: "POP_EFFECT",
    FLIP_EFFECT: "FLIP_EFFECT",
    JIGGLE_EFFECT: "JIGGLE_EFFECT",
    PULSE_EFFECT: "PULSE_EFFECT",
    DROP_EFFECT: "DROP_EFFECT",
    BLINK_EFFECT: "BLINK_EFFECT",
    BOUNCE_EFFECT: "BOUNCE_EFFECT",
    FLIP_LEFT_TO_RIGHT_EFFECT: "FLIP_LEFT_TO_RIGHT_EFFECT",
    FLIP_RIGHT_TO_LEFT_EFFECT: "FLIP_RIGHT_TO_LEFT_EFFECT",
    RUBBER_BAND_EFFECT: "RUBBER_BAND_EFFECT",
    JELLO_EFFECT: "JELLO_EFFECT",
    GROW_BIG_EFFECT: "GROW_BIG_EFFECT",
    SHRINK_BIG_EFFECT: "SHRINK_BIG_EFFECT",
    PLUGIN_LOTTIE_EFFECT: "PLUGIN_LOTTIE_EFFECT"
  }, exports.QuickEffectDirectionConsts = {
    LEFT: "LEFT",
    RIGHT: "RIGHT",
    BOTTOM: "BOTTOM",
    TOP: "TOP",
    BOTTOM_LEFT: "BOTTOM_LEFT",
    BOTTOM_RIGHT: "BOTTOM_RIGHT",
    TOP_RIGHT: "TOP_RIGHT",
    TOP_LEFT: "TOP_LEFT",
    CLOCKWISE: "CLOCKWISE",
    COUNTER_CLOCKWISE: "COUNTER_CLOCKWISE"
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.ActionAppliesTo = exports.ActionTypeConsts = void 0, exports.ActionTypeConsts = {
    TRANSFORM_MOVE: "TRANSFORM_MOVE",
    TRANSFORM_SCALE: "TRANSFORM_SCALE",
    TRANSFORM_ROTATE: "TRANSFORM_ROTATE",
    TRANSFORM_SKEW: "TRANSFORM_SKEW",
    STYLE_OPACITY: "STYLE_OPACITY",
    STYLE_SIZE: "STYLE_SIZE",
    STYLE_FILTER: "STYLE_FILTER",
    STYLE_BACKGROUND_COLOR: "STYLE_BACKGROUND_COLOR",
    STYLE_BORDER: "STYLE_BORDER",
    STYLE_TEXT_COLOR: "STYLE_TEXT_COLOR",
    PLUGIN_LOTTIE: "PLUGIN_LOTTIE",
    GENERAL_DISPLAY: "GENERAL_DISPLAY",
    GENERAL_START_ACTION: "GENERAL_START_ACTION",
    GENERAL_CONTINUOUS_ACTION: "GENERAL_CONTINUOUS_ACTION",
    GENERAL_COMBO_CLASS: "GENERAL_COMBO_CLASS",
    GENERAL_STOP_ACTION: "GENERAL_STOP_ACTION",
    GENERAL_LOOP: "GENERAL_LOOP",
    STYLE_BOX_SHADOW: "STYLE_BOX_SHADOW"
  }, exports.ActionAppliesTo = {
    ELEMENT: "ELEMENT",
    ELEMENT_CLASS: "ELEMENT_CLASS",
    TRIGGER_ELEMENT: "TRIGGER_ELEMENT"
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.InteractionTypeConsts = void 0, exports.InteractionTypeConsts = {
    MOUSE_CLICK_INTERACTION: "MOUSE_CLICK_INTERACTION",
    MOUSE_HOVER_INTERACTION: "MOUSE_HOVER_INTERACTION",
    MOUSE_MOVE_INTERACTION: "MOUSE_MOVE_INTERACTION",
    SCROLL_INTO_VIEW_INTERACTION: "SCROLL_INTO_VIEW_INTERACTION",
    SCROLLING_IN_VIEW_INTERACTION: "SCROLLING_IN_VIEW_INTERACTION",
    MOUSE_MOVE_IN_VIEWPORT_INTERACTION: "MOUSE_MOVE_IN_VIEWPORT_INTERACTION",
    PAGE_IS_SCROLLING_INTERACTION: "PAGE_IS_SCROLLING_INTERACTION",
    PAGE_LOAD_INTERACTION: "PAGE_LOAD_INTERACTION",
    PAGE_SCROLLED_INTERACTION: "PAGE_SCROLLED_INTERACTION",
    NAVBAR_INTERACTION: "NAVBAR_INTERACTION",
    DROPDOWN_INTERACTION: "DROPDOWN_INTERACTION",
    ECOMMERCE_CART_INTERACTION: "ECOMMERCE_CART_INTERACTION",
    TAB_INTERACTION: "TAB_INTERACTION",
    SLIDER_INTERACTION: "SLIDER_INTERACTION"
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.IX2_TEST_FRAME_RENDERED = exports.IX2_MEDIA_QUERIES_DEFINED = exports.IX2_VIEWPORT_WIDTH_CHANGED = exports.IX2_ACTION_LIST_PLAYBACK_CHANGED = exports.IX2_ELEMENT_STATE_CHANGED = exports.IX2_INSTANCE_REMOVED = exports.IX2_INSTANCE_STARTED = exports.IX2_INSTANCE_ADDED = exports.IX2_PARAMETER_CHANGED = exports.IX2_ANIMATION_FRAME_CHANGED = exports.IX2_EVENT_STATE_CHANGED = exports.IX2_EVENT_LISTENER_ADDED = exports.IX2_CLEAR_REQUESTED = exports.IX2_STOP_REQUESTED = exports.IX2_PLAYBACK_REQUESTED = exports.IX2_PREVIEW_REQUESTED = exports.IX2_SESSION_STOPPED = exports.IX2_SESSION_STARTED = exports.IX2_SESSION_INITIALIZED = exports.IX2_RAW_DATA_IMPORTED = void 0, exports.IX2_RAW_DATA_IMPORTED = "IX2_RAW_DATA_IMPORTED", exports.IX2_SESSION_INITIALIZED = "IX2_SESSION_INITIALIZED", exports.IX2_SESSION_STARTED = "IX2_SESSION_STARTED", exports.IX2_SESSION_STOPPED = "IX2_SESSION_STOPPED", exports.IX2_PREVIEW_REQUESTED = "IX2_PREVIEW_REQUESTED", exports.IX2_PLAYBACK_REQUESTED = "IX2_PLAYBACK_REQUESTED", exports.IX2_STOP_REQUESTED = "IX2_STOP_REQUESTED", exports.IX2_CLEAR_REQUESTED = "IX2_CLEAR_REQUESTED", exports.IX2_EVENT_LISTENER_ADDED = "IX2_EVENT_LISTENER_ADDED", exports.IX2_EVENT_STATE_CHANGED = "IX2_EVENT_STATE_CHANGED", exports.IX2_ANIMATION_FRAME_CHANGED = "IX2_ANIMATION_FRAME_CHANGED", exports.IX2_PARAMETER_CHANGED = "IX2_PARAMETER_CHANGED", exports.IX2_INSTANCE_ADDED = "IX2_INSTANCE_ADDED", exports.IX2_INSTANCE_STARTED = "IX2_INSTANCE_STARTED", exports.IX2_INSTANCE_REMOVED = "IX2_INSTANCE_REMOVED", exports.IX2_ELEMENT_STATE_CHANGED = "IX2_ELEMENT_STATE_CHANGED", exports.IX2_ACTION_LIST_PLAYBACK_CHANGED = "IX2_ACTION_LIST_PLAYBACK_CHANGED", exports.IX2_VIEWPORT_WIDTH_CHANGED = "IX2_VIEWPORT_WIDTH_CHANGED", exports.IX2_MEDIA_QUERIES_DEFINED = "IX2_MEDIA_QUERIES_DEFINED", exports.IX2_TEST_FRAME_RENDERED = "IX2_TEST_FRAME_RENDERED";
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.RENDER_PLUGIN = exports.RENDER_STYLE = exports.RENDER_GENERAL = exports.RENDER_TRANSFORM = exports.ABSTRACT_NODE = exports.PLAIN_OBJECT = exports.HTML_ELEMENT = exports.PRESERVE_3D = exports.PARENT = exports.SIBLINGS = exports.IMMEDIATE_CHILDREN = exports.CHILDREN = exports.BAR_DELIMITER = exports.COLON_DELIMITER = exports.COMMA_DELIMITER = exports.AUTO = exports.WILL_CHANGE = exports.FLEX = exports.DISPLAY = exports.COLOR = exports.BORDER_COLOR = exports.BACKGROUND = exports.BACKGROUND_COLOR = exports.HEIGHT = exports.WIDTH = exports.FILTER = exports.OPACITY = exports.SKEW_Y = exports.SKEW_X = exports.SKEW = exports.ROTATE_Z = exports.ROTATE_Y = exports.ROTATE_X = exports.SCALE_3D = exports.SCALE_Z = exports.SCALE_Y = exports.SCALE_X = exports.TRANSLATE_3D = exports.TRANSLATE_Z = exports.TRANSLATE_Y = exports.TRANSLATE_X = exports.TRANSFORM = exports.CONFIG_UNIT = exports.CONFIG_Z_UNIT = exports.CONFIG_Y_UNIT = exports.CONFIG_X_UNIT = exports.CONFIG_VALUE = exports.CONFIG_Z_VALUE = exports.CONFIG_Y_VALUE = exports.CONFIG_X_VALUE = exports.BOUNDARY_SELECTOR = exports.W_MOD_IX = exports.W_MOD_JS = exports.WF_PAGE = exports.IX2_ID_DELIMITER = void 0, exports.IX2_ID_DELIMITER = "|", exports.WF_PAGE = "data-wf-page", exports.W_MOD_JS = "w-mod-js", exports.W_MOD_IX = "w-mod-ix", exports.BOUNDARY_SELECTOR = ".w-dyn-item", exports.CONFIG_X_VALUE = "xValue", exports.CONFIG_Y_VALUE = "yValue", exports.CONFIG_Z_VALUE = "zValue", exports.CONFIG_VALUE = "value", exports.CONFIG_X_UNIT = "xUnit", exports.CONFIG_Y_UNIT = "yUnit", exports.CONFIG_Z_UNIT = "zUnit", exports.CONFIG_UNIT = "unit", exports.TRANSFORM = "transform", exports.TRANSLATE_X = "translateX", exports.TRANSLATE_Y = "translateY", exports.TRANSLATE_Z = "translateZ", exports.TRANSLATE_3D = "translate3d", exports.SCALE_X = "scaleX", exports.SCALE_Y = "scaleY", exports.SCALE_Z = "scaleZ", exports.SCALE_3D = "scale3d", exports.ROTATE_X = "rotateX", exports.ROTATE_Y = "rotateY", exports.ROTATE_Z = "rotateZ", exports.SKEW = "skew", exports.SKEW_X = "skewX", exports.SKEW_Y = "skewY", exports.OPACITY = "opacity", exports.FILTER = "filter", exports.WIDTH = "width", exports.HEIGHT = "height", exports.BACKGROUND_COLOR = "backgroundColor", exports.BACKGROUND = "background", exports.BORDER_COLOR = "borderColor", exports.COLOR = "color", exports.DISPLAY = "display", exports.FLEX = "flex", exports.WILL_CHANGE = "willChange", exports.AUTO = "AUTO", exports.COMMA_DELIMITER = ",", exports.COLON_DELIMITER = ":", exports.BAR_DELIMITER = "|", exports.CHILDREN = "CHILDREN", exports.IMMEDIATE_CHILDREN = "IMMEDIATE_CHILDREN", exports.SIBLINGS = "SIBLINGS", exports.PARENT = "PARENT", exports.PRESERVE_3D = "preserve-3d", exports.HTML_ELEMENT = "HTML_ELEMENT", exports.PLAIN_OBJECT = "PLAIN_OBJECT", exports.ABSTRACT_NODE = "ABSTRACT_NODE", exports.RENDER_TRANSFORM = "RENDER_TRANSFORM", exports.RENDER_GENERAL = "RENDER_GENERAL", exports.RENDER_STYLE = "RENDER_STYLE", exports.RENDER_PLUGIN = "RENDER_PLUGIN";
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _Object$create,
      _defineProperty2 = __webpack_require__(0)(__webpack_require__(17)),
      _interopRequireDefault = __webpack_require__(0);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.ixRequest = void 0;

  var _extends2 = _interopRequireDefault(__webpack_require__(18)),
      _constants = __webpack_require__(2),
      _timm = __webpack_require__(13),
      _constants$IX2EngineA = _constants.IX2EngineActionTypes,
      IX2_PREVIEW_REQUESTED = _constants$IX2EngineA.IX2_PREVIEW_REQUESTED,
      IX2_PLAYBACK_REQUESTED = _constants$IX2EngineA.IX2_PLAYBACK_REQUESTED,
      IX2_STOP_REQUESTED = _constants$IX2EngineA.IX2_STOP_REQUESTED,
      IX2_CLEAR_REQUESTED = _constants$IX2EngineA.IX2_CLEAR_REQUESTED,
      initialState = {
    preview: {},
    playback: {},
    stop: {},
    clear: {}
  },
      stateKeys = Object.create(null, (_Object$create = {}, (0, _defineProperty2.default)(_Object$create, IX2_PREVIEW_REQUESTED, {
    value: "preview"
  }), (0, _defineProperty2.default)(_Object$create, IX2_PLAYBACK_REQUESTED, {
    value: "playback"
  }), (0, _defineProperty2.default)(_Object$create, IX2_STOP_REQUESTED, {
    value: "stop"
  }), (0, _defineProperty2.default)(_Object$create, IX2_CLEAR_REQUESTED, {
    value: "clear"
  }), _Object$create));

  exports.ixRequest = function () {
    var state = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : initialState,
        action = arguments.length > 1 ? arguments[1] : void 0;

    if (action.type in stateKeys) {
      var key = [stateKeys[action.type]];
      return (0, _timm.setIn)(state, [key], (0, _extends2.default)({}, action.payload));
    }

    return state;
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.ixSession = void 0;

  var _constants = __webpack_require__(2),
      _timm = __webpack_require__(13),
      _constants$IX2EngineA = _constants.IX2EngineActionTypes,
      IX2_SESSION_INITIALIZED = _constants$IX2EngineA.IX2_SESSION_INITIALIZED,
      IX2_SESSION_STARTED = _constants$IX2EngineA.IX2_SESSION_STARTED,
      IX2_TEST_FRAME_RENDERED = _constants$IX2EngineA.IX2_TEST_FRAME_RENDERED,
      IX2_SESSION_STOPPED = _constants$IX2EngineA.IX2_SESSION_STOPPED,
      IX2_EVENT_LISTENER_ADDED = _constants$IX2EngineA.IX2_EVENT_LISTENER_ADDED,
      IX2_EVENT_STATE_CHANGED = _constants$IX2EngineA.IX2_EVENT_STATE_CHANGED,
      IX2_ANIMATION_FRAME_CHANGED = _constants$IX2EngineA.IX2_ANIMATION_FRAME_CHANGED,
      IX2_ACTION_LIST_PLAYBACK_CHANGED = _constants$IX2EngineA.IX2_ACTION_LIST_PLAYBACK_CHANGED,
      IX2_VIEWPORT_WIDTH_CHANGED = _constants$IX2EngineA.IX2_VIEWPORT_WIDTH_CHANGED,
      IX2_MEDIA_QUERIES_DEFINED = _constants$IX2EngineA.IX2_MEDIA_QUERIES_DEFINED,
      initialState = {
    active: !1,
    tick: 0,
    eventListeners: [],
    eventState: {},
    playbackState: {},
    viewportWidth: 0,
    mediaQueryKey: null,
    hasBoundaryNodes: !1,
    hasDefinedMediaQueries: !1
  };

  exports.ixSession = function () {
    var state = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : initialState,
        action = arguments.length > 1 ? arguments[1] : void 0;

    switch (action.type) {
      case IX2_SESSION_INITIALIZED:
        var hasBoundaryNodes = action.payload.hasBoundaryNodes;
        return (0, _timm.set)(state, "hasBoundaryNodes", hasBoundaryNodes);

      case IX2_SESSION_STARTED:
        return (0, _timm.set)(state, "active", !0);

      case IX2_TEST_FRAME_RENDERED:
        var _action$payload$step = action.payload.step,
            step = void 0 === _action$payload$step ? 20 : _action$payload$step;
        return (0, _timm.set)(state, "tick", state.tick + step);

      case IX2_SESSION_STOPPED:
        return initialState;

      case IX2_ANIMATION_FRAME_CHANGED:
        var now = action.payload.now;
        return (0, _timm.set)(state, "tick", now);

      case IX2_EVENT_LISTENER_ADDED:
        var eventListeners = (0, _timm.addLast)(state.eventListeners, action.payload);
        return (0, _timm.set)(state, "eventListeners", eventListeners);

      case IX2_EVENT_STATE_CHANGED:
        var _action$payload = action.payload,
            stateKey = _action$payload.stateKey,
            newState = _action$payload.newState;
        return (0, _timm.setIn)(state, ["eventState", stateKey], newState);

      case IX2_ACTION_LIST_PLAYBACK_CHANGED:
        var _action$payload2 = action.payload,
            actionListId = _action$payload2.actionListId,
            isPlaying = _action$payload2.isPlaying;
        return (0, _timm.setIn)(state, ["playbackState", actionListId], isPlaying);

      case IX2_VIEWPORT_WIDTH_CHANGED:
        for (var _action$payload3 = action.payload, width = _action$payload3.width, mediaQueries = _action$payload3.mediaQueries, mediaQueryCount = mediaQueries.length, mediaQueryKey = null, i = 0; i < mediaQueryCount; i++) {
          var _mediaQueries$i = mediaQueries[i],
              key = _mediaQueries$i.key,
              min = _mediaQueries$i.min,
              max = _mediaQueries$i.max;

          if (width >= min && width <= max) {
            mediaQueryKey = key;
            break;
          }
        }

        return (0, _timm.merge)(state, {
          viewportWidth: width,
          mediaQueryKey: mediaQueryKey
        });

      case IX2_MEDIA_QUERIES_DEFINED:
        return (0, _timm.set)(state, "hasDefinedMediaQueries", !0);

      default:
        return state;
    }
  };
}, function (module, exports, __webpack_require__) {
  var baseIsMatch = __webpack_require__(125),
      getMatchData = __webpack_require__(177),
      matchesStrictComparable = __webpack_require__(76);

  module.exports = function (source) {
    var matchData = getMatchData(source);
    return 1 == matchData.length && matchData[0][2] ? matchesStrictComparable(matchData[0][0], matchData[0][1]) : function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  };
}, function (module, exports, __webpack_require__) {
  var Stack = __webpack_require__(62),
      baseIsEqual = __webpack_require__(66);

  module.exports = function (object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;
    if (null == object) return !length;

    for (object = Object(object); index--;) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return !1;
    }

    for (; ++index < length;) {
      var key = (data = matchData[index])[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (void 0 === objValue && !(key in object)) return !1;
      } else {
        var stack = new Stack();
        if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
        if (!(void 0 === result ? baseIsEqual(srcValue, objValue, 3, customizer, stack) : result)) return !1;
      }
    }

    return !0;
  };
}, function (module, exports) {
  module.exports = function () {
    this.__data__ = [], this.size = 0;
  };
}, function (module, exports, __webpack_require__) {
  var assocIndexOf = __webpack_require__(20),
      splice = Array.prototype.splice;

  module.exports = function (key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return !(index < 0 || (index == data.length - 1 ? data.pop() : splice.call(data, index, 1), --this.size, 0));
  };
}, function (module, exports, __webpack_require__) {
  var assocIndexOf = __webpack_require__(20);

  module.exports = function (key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  };
}, function (module, exports, __webpack_require__) {
  var assocIndexOf = __webpack_require__(20);

  module.exports = function (key) {
    return assocIndexOf(this.__data__, key) > -1;
  };
}, function (module, exports, __webpack_require__) {
  var assocIndexOf = __webpack_require__(20);

  module.exports = function (key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? (++this.size, data.push([key, value])) : data[index][1] = value, this;
  };
}, function (module, exports, __webpack_require__) {
  var ListCache = __webpack_require__(19);

  module.exports = function () {
    this.__data__ = new ListCache(), this.size = 0;
  };
}, function (module, exports) {
  module.exports = function (key) {
    var data = this.__data__,
        result = data.delete(key);
    return this.size = data.size, result;
  };
}, function (module, exports) {
  module.exports = function (key) {
    return this.__data__.get(key);
  };
}, function (module, exports) {
  module.exports = function (key) {
    return this.__data__.has(key);
  };
}, function (module, exports, __webpack_require__) {
  var ListCache = __webpack_require__(19),
      Map = __webpack_require__(33),
      MapCache = __webpack_require__(34);

  module.exports = function (key, value) {
    var data = this.__data__;

    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map || pairs.length < 199) return pairs.push([key, value]), this.size = ++data.size, this;
      data = this.__data__ = new MapCache(pairs);
    }

    return data.set(key, value), this.size = data.size, this;
  };
}, function (module, exports, __webpack_require__) {
  var isFunction = __webpack_require__(63),
      isMasked = __webpack_require__(139),
      isObject = __webpack_require__(4),
      toSource = __webpack_require__(65),
      reIsHostCtor = /^\[object .+?Constructor\]$/,
      funcProto = Function.prototype,
      objectProto = Object.prototype,
      funcToString = funcProto.toString,
      hasOwnProperty = objectProto.hasOwnProperty,
      reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");

  module.exports = function (value) {
    return !(!isObject(value) || isMasked(value)) && (isFunction(value) ? reIsNative : reIsHostCtor).test(toSource(value));
  };
}, function (module, exports, __webpack_require__) {
  var Symbol = __webpack_require__(14),
      objectProto = Object.prototype,
      hasOwnProperty = objectProto.hasOwnProperty,
      nativeObjectToString = objectProto.toString,
      symToStringTag = Symbol ? Symbol.toStringTag : void 0;

  module.exports = function (value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = void 0;
      var unmasked = !0;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    return unmasked && (isOwn ? value[symToStringTag] = tag : delete value[symToStringTag]), result;
  };
}, function (module, exports) {
  var nativeObjectToString = Object.prototype.toString;

  module.exports = function (value) {
    return nativeObjectToString.call(value);
  };
}, function (module, exports, __webpack_require__) {
  var uid,
      coreJsData = __webpack_require__(140),
      maskSrcKey = (uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "")) ? "Symbol(src)_1." + uid : "";

  module.exports = function (func) {
    return !!maskSrcKey && maskSrcKey in func;
  };
}, function (module, exports, __webpack_require__) {
  var coreJsData = __webpack_require__(3)["__core-js_shared__"];

  module.exports = coreJsData;
}, function (module, exports) {
  module.exports = function (object, key) {
    return null == object ? void 0 : object[key];
  };
}, function (module, exports, __webpack_require__) {
  var Hash = __webpack_require__(143),
      ListCache = __webpack_require__(19),
      Map = __webpack_require__(33);

  module.exports = function () {
    this.size = 0, this.__data__ = {
      hash: new Hash(),
      map: new (Map || ListCache)(),
      string: new Hash()
    };
  };
}, function (module, exports, __webpack_require__) {
  var hashClear = __webpack_require__(144),
      hashDelete = __webpack_require__(145),
      hashGet = __webpack_require__(146),
      hashHas = __webpack_require__(147),
      hashSet = __webpack_require__(148);

  function Hash(entries) {
    var index = -1,
        length = null == entries ? 0 : entries.length;

    for (this.clear(); ++index < length;) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  Hash.prototype.clear = hashClear, Hash.prototype.delete = hashDelete, Hash.prototype.get = hashGet, Hash.prototype.has = hashHas, Hash.prototype.set = hashSet, module.exports = Hash;
}, function (module, exports, __webpack_require__) {
  var nativeCreate = __webpack_require__(21);

  module.exports = function () {
    this.__data__ = nativeCreate ? nativeCreate(null) : {}, this.size = 0;
  };
}, function (module, exports) {
  module.exports = function (key) {
    var result = this.has(key) && delete this.__data__[key];
    return this.size -= result ? 1 : 0, result;
  };
}, function (module, exports, __webpack_require__) {
  var nativeCreate = __webpack_require__(21),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return "__lodash_hash_undefined__" === result ? void 0 : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : void 0;
  };
}, function (module, exports, __webpack_require__) {
  var nativeCreate = __webpack_require__(21),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (key) {
    var data = this.__data__;
    return nativeCreate ? void 0 !== data[key] : hasOwnProperty.call(data, key);
  };
}, function (module, exports, __webpack_require__) {
  var nativeCreate = __webpack_require__(21);

  module.exports = function (key, value) {
    var data = this.__data__;
    return this.size += this.has(key) ? 0 : 1, data[key] = nativeCreate && void 0 === value ? "__lodash_hash_undefined__" : value, this;
  };
}, function (module, exports, __webpack_require__) {
  var getMapData = __webpack_require__(22);

  module.exports = function (key) {
    var result = getMapData(this, key).delete(key);
    return this.size -= result ? 1 : 0, result;
  };
}, function (module, exports) {
  module.exports = function (value) {
    var type = typeof value;
    return "string" == type || "number" == type || "symbol" == type || "boolean" == type ? "__proto__" !== value : null === value;
  };
}, function (module, exports, __webpack_require__) {
  var getMapData = __webpack_require__(22);

  module.exports = function (key) {
    return getMapData(this, key).get(key);
  };
}, function (module, exports, __webpack_require__) {
  var getMapData = __webpack_require__(22);

  module.exports = function (key) {
    return getMapData(this, key).has(key);
  };
}, function (module, exports, __webpack_require__) {
  var getMapData = __webpack_require__(22);

  module.exports = function (key, value) {
    var data = getMapData(this, key),
        size = data.size;
    return data.set(key, value), this.size += data.size == size ? 0 : 1, this;
  };
}, function (module, exports, __webpack_require__) {
  var Stack = __webpack_require__(62),
      equalArrays = __webpack_require__(67),
      equalByTag = __webpack_require__(160),
      equalObjects = __webpack_require__(164),
      getTag = __webpack_require__(42),
      isArray = __webpack_require__(1),
      isBuffer = __webpack_require__(36),
      isTypedArray = __webpack_require__(38),
      objectTag = "[object Object]",
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? "[object Array]" : getTag(object),
        othTag = othIsArr ? "[object Array]" : getTag(other),
        objIsObj = (objTag = "[object Arguments]" == objTag ? objectTag : objTag) == objectTag,
        othIsObj = (othTag = "[object Arguments]" == othTag ? objectTag : othTag) == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) return !1;
      objIsArr = !0, objIsObj = !1;
    }

    if (isSameTag && !objIsObj) return stack || (stack = new Stack()), objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);

    if (!(1 & bitmask)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        return stack || (stack = new Stack()), equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    return !!isSameTag && (stack || (stack = new Stack()), equalObjects(object, other, bitmask, customizer, equalFunc, stack));
  };
}, function (module, exports, __webpack_require__) {
  var MapCache = __webpack_require__(34),
      setCacheAdd = __webpack_require__(156),
      setCacheHas = __webpack_require__(157);

  function SetCache(values) {
    var index = -1,
        length = null == values ? 0 : values.length;

    for (this.__data__ = new MapCache(); ++index < length;) this.add(values[index]);
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd, SetCache.prototype.has = setCacheHas, module.exports = SetCache;
}, function (module, exports) {
  module.exports = function (value) {
    return this.__data__.set(value, "__lodash_hash_undefined__"), this;
  };
}, function (module, exports) {
  module.exports = function (value) {
    return this.__data__.has(value);
  };
}, function (module, exports) {
  module.exports = function (array, predicate) {
    for (var index = -1, length = null == array ? 0 : array.length; ++index < length;) if (predicate(array[index], index, array)) return !0;

    return !1;
  };
}, function (module, exports) {
  module.exports = function (cache, key) {
    return cache.has(key);
  };
}, function (module, exports, __webpack_require__) {
  var Symbol = __webpack_require__(14),
      Uint8Array = __webpack_require__(161),
      eq = __webpack_require__(32),
      equalArrays = __webpack_require__(67),
      mapToArray = __webpack_require__(162),
      setToArray = __webpack_require__(163),
      symbolProto = Symbol ? Symbol.prototype : void 0,
      symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;

  module.exports = function (object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case "[object DataView]":
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return !1;
        object = object.buffer, other = other.buffer;

      case "[object ArrayBuffer]":
        return !(object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other)));

      case "[object Boolean]":
      case "[object Date]":
      case "[object Number]":
        return eq(+object, +other);

      case "[object Error]":
        return object.name == other.name && object.message == other.message;

      case "[object RegExp]":
      case "[object String]":
        return object == other + "";

      case "[object Map]":
        var convert = mapToArray;

      case "[object Set]":
        var isPartial = 1 & bitmask;
        if (convert || (convert = setToArray), object.size != other.size && !isPartial) return !1;
        var stacked = stack.get(object);
        if (stacked) return stacked == other;
        bitmask |= 2, stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        return stack.delete(object), result;

      case "[object Symbol]":
        if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
    }

    return !1;
  };
}, function (module, exports, __webpack_require__) {
  var Uint8Array = __webpack_require__(3).Uint8Array;

  module.exports = Uint8Array;
}, function (module, exports) {
  module.exports = function (map) {
    var index = -1,
        result = Array(map.size);
    return map.forEach(function (value, key) {
      result[++index] = [key, value];
    }), result;
  };
}, function (module, exports) {
  module.exports = function (set) {
    var index = -1,
        result = Array(set.size);
    return set.forEach(function (value) {
      result[++index] = value;
    }), result;
  };
}, function (module, exports, __webpack_require__) {
  var getAllKeys = __webpack_require__(165),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = 1 & bitmask,
        objProps = getAllKeys(object),
        objLength = objProps.length;
    if (objLength != getAllKeys(other).length && !isPartial) return !1;

    for (var index = objLength; index--;) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return !1;
    }

    var stacked = stack.get(object);
    if (stacked && stack.get(other)) return stacked == other;
    var result = !0;
    stack.set(object, other), stack.set(other, object);

    for (var skipCtor = isPartial; ++index < objLength;) {
      var objValue = object[key = objProps[index]],
          othValue = other[key];
      if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);

      if (!(void 0 === compared ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = !1;
        break;
      }

      skipCtor || (skipCtor = "constructor" == key);
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;
      objCtor == othCtor || !("constructor" in object) || !("constructor" in other) || "function" == typeof objCtor && objCtor instanceof objCtor && "function" == typeof othCtor && othCtor instanceof othCtor || (result = !1);
    }

    return stack.delete(object), stack.delete(other), result;
  };
}, function (module, exports, __webpack_require__) {
  var baseGetAllKeys = __webpack_require__(68),
      getSymbols = __webpack_require__(69),
      keys = __webpack_require__(23);

  module.exports = function (object) {
    return baseGetAllKeys(object, keys, getSymbols);
  };
}, function (module, exports) {
  module.exports = function (array, predicate) {
    for (var index = -1, length = null == array ? 0 : array.length, resIndex = 0, result = []; ++index < length;) {
      var value = array[index];
      predicate(value, index, array) && (result[resIndex++] = value);
    }

    return result;
  };
}, function (module, exports) {
  module.exports = function (n, iteratee) {
    for (var index = -1, result = Array(n); ++index < n;) result[index] = iteratee(index);

    return result;
  };
}, function (module, exports, __webpack_require__) {
  var baseGetTag = __webpack_require__(9),
      isObjectLike = __webpack_require__(7);

  module.exports = function (value) {
    return isObjectLike(value) && "[object Arguments]" == baseGetTag(value);
  };
}, function (module, exports) {
  module.exports = function () {
    return !1;
  };
}, function (module, exports, __webpack_require__) {
  var baseGetTag = __webpack_require__(9),
      isLength = __webpack_require__(39),
      isObjectLike = __webpack_require__(7),
      typedArrayTags = {};

  typedArrayTags["[object Float32Array]"] = typedArrayTags["[object Float64Array]"] = typedArrayTags["[object Int8Array]"] = typedArrayTags["[object Int16Array]"] = typedArrayTags["[object Int32Array]"] = typedArrayTags["[object Uint8Array]"] = typedArrayTags["[object Uint8ClampedArray]"] = typedArrayTags["[object Uint16Array]"] = typedArrayTags["[object Uint32Array]"] = !0, typedArrayTags["[object Arguments]"] = typedArrayTags["[object Array]"] = typedArrayTags["[object ArrayBuffer]"] = typedArrayTags["[object Boolean]"] = typedArrayTags["[object DataView]"] = typedArrayTags["[object Date]"] = typedArrayTags["[object Error]"] = typedArrayTags["[object Function]"] = typedArrayTags["[object Map]"] = typedArrayTags["[object Number]"] = typedArrayTags["[object Object]"] = typedArrayTags["[object RegExp]"] = typedArrayTags["[object Set]"] = typedArrayTags["[object String]"] = typedArrayTags["[object WeakMap]"] = !1, module.exports = function (value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  };
}, function (module, exports) {
  module.exports = function (func) {
    return function (value) {
      return func(value);
    };
  };
}, function (module, exports, __webpack_require__) {
  (function (module) {
    var freeGlobal = __webpack_require__(64),
        freeExports = exports && !exports.nodeType && exports,
        freeModule = freeExports && "object" == typeof module && module && !module.nodeType && module,
        freeProcess = freeModule && freeModule.exports === freeExports && freeGlobal.process,
        nodeUtil = function () {
      try {
        return freeModule && freeModule.require && freeModule.require("util").types || freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {}
    }();

    module.exports = nodeUtil;
  }).call(this, __webpack_require__(72)(module));
}, function (module, exports, __webpack_require__) {
  var nativeKeys = __webpack_require__(73)(Object.keys, Object);

  module.exports = nativeKeys;
}, function (module, exports, __webpack_require__) {
  var DataView = __webpack_require__(6)(__webpack_require__(3), "DataView");

  module.exports = DataView;
}, function (module, exports, __webpack_require__) {
  var Promise = __webpack_require__(6)(__webpack_require__(3), "Promise");

  module.exports = Promise;
}, function (module, exports, __webpack_require__) {
  var Set = __webpack_require__(6)(__webpack_require__(3), "Set");

  module.exports = Set;
}, function (module, exports, __webpack_require__) {
  var isStrictComparable = __webpack_require__(75),
      keys = __webpack_require__(23);

  module.exports = function (object) {
    for (var result = keys(object), length = result.length; length--;) {
      var key = result[length],
          value = object[key];
      result[length] = [key, value, isStrictComparable(value)];
    }

    return result;
  };
}, function (module, exports, __webpack_require__) {
  var baseIsEqual = __webpack_require__(66),
      get = __webpack_require__(25),
      hasIn = __webpack_require__(182),
      isKey = __webpack_require__(44),
      isStrictComparable = __webpack_require__(75),
      matchesStrictComparable = __webpack_require__(76),
      toKey = __webpack_require__(15);

  module.exports = function (path, srcValue) {
    return isKey(path) && isStrictComparable(srcValue) ? matchesStrictComparable(toKey(path), srcValue) : function (object) {
      var objValue = get(object, path);
      return void 0 === objValue && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, 3);
    };
  };
}, function (module, exports, __webpack_require__) {
  var memoizeCapped = __webpack_require__(180),
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
      reEscapeChar = /\\(\\)?/g,
      stringToPath = memoizeCapped(function (string) {
    var result = [];
    return 46 === string.charCodeAt(0) && result.push(""), string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
    }), result;
  });

  module.exports = stringToPath;
}, function (module, exports, __webpack_require__) {
  var memoize = __webpack_require__(181);

  module.exports = function (func) {
    var result = memoize(func, function (key) {
      return 500 === cache.size && cache.clear(), key;
    }),
        cache = result.cache;
    return result;
  };
}, function (module, exports, __webpack_require__) {
  var MapCache = __webpack_require__(34);

  function memoize(func, resolver) {
    if ("function" != typeof func || null != resolver && "function" != typeof resolver) throw new TypeError("Expected a function");

    var memoized = function () {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;
      if (cache.has(key)) return cache.get(key);
      var result = func.apply(this, args);
      return memoized.cache = cache.set(key, result) || cache, result;
    };

    return memoized.cache = new (memoize.Cache || MapCache)(), memoized;
  }

  memoize.Cache = MapCache, module.exports = memoize;
}, function (module, exports, __webpack_require__) {
  var baseHasIn = __webpack_require__(183),
      hasPath = __webpack_require__(184);

  module.exports = function (object, path) {
    return null != object && hasPath(object, path, baseHasIn);
  };
}, function (module, exports) {
  module.exports = function (object, key) {
    return null != object && key in Object(object);
  };
}, function (module, exports, __webpack_require__) {
  var castPath = __webpack_require__(26),
      isArguments = __webpack_require__(24),
      isArray = __webpack_require__(1),
      isIndex = __webpack_require__(37),
      isLength = __webpack_require__(39),
      toKey = __webpack_require__(15);

  module.exports = function (object, path, hasFunc) {
    for (var index = -1, length = (path = castPath(path, object)).length, result = !1; ++index < length;) {
      var key = toKey(path[index]);
      if (!(result = null != object && hasFunc(object, key))) break;
      object = object[key];
    }

    return result || ++index != length ? result : !!(length = null == object ? 0 : object.length) && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  };
}, function (module, exports, __webpack_require__) {
  var baseProperty = __webpack_require__(80),
      basePropertyDeep = __webpack_require__(186),
      isKey = __webpack_require__(44),
      toKey = __webpack_require__(15);

  module.exports = function (path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  };
}, function (module, exports, __webpack_require__) {
  var baseGet = __webpack_require__(43);

  module.exports = function (path) {
    return function (object) {
      return baseGet(object, path);
    };
  };
}, function (module, exports, __webpack_require__) {
  var baseFindIndex = __webpack_require__(81),
      baseIteratee = __webpack_require__(5),
      toInteger = __webpack_require__(46),
      nativeMax = Math.max;

  module.exports = function (array, predicate, fromIndex) {
    var length = null == array ? 0 : array.length;
    if (!length) return -1;
    var index = null == fromIndex ? 0 : toInteger(fromIndex);
    return index < 0 && (index = nativeMax(length + index, 0)), baseFindIndex(array, baseIteratee(predicate, 3), index);
  };
}, function (module, exports, __webpack_require__) {
  var toNumber = __webpack_require__(47);

  module.exports = function (value) {
    return value ? 1 / 0 === (value = toNumber(value)) || -1 / 0 === value ? 17976931348623157e292 * (value < 0 ? -1 : 1) : value == value ? value : 0 : 0 === value ? value : 0;
  };
}, function (module, exports) {
  module.exports = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  };
}, function (module, exports) {
  module.exports = function (iter) {
    if (Symbol.iterator in Object(iter) || "[object Arguments]" === Object.prototype.toString.call(iter)) return Array.from(iter);
  };
}, function (module, exports) {
  module.exports = function () {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.createElementState = createElementState, exports.mergeActionState = mergeActionState, exports.ixElements = void 0;

  var _timm = __webpack_require__(13),
      _constants = __webpack_require__(2),
      _constants$IX2EngineC = _constants.IX2EngineConstants,
      PLAIN_OBJECT = (_constants$IX2EngineC.HTML_ELEMENT, _constants$IX2EngineC.PLAIN_OBJECT),
      CONFIG_X_VALUE = (_constants$IX2EngineC.ABSTRACT_NODE, _constants$IX2EngineC.CONFIG_X_VALUE),
      CONFIG_Y_VALUE = _constants$IX2EngineC.CONFIG_Y_VALUE,
      CONFIG_Z_VALUE = _constants$IX2EngineC.CONFIG_Z_VALUE,
      CONFIG_VALUE = _constants$IX2EngineC.CONFIG_VALUE,
      CONFIG_X_UNIT = _constants$IX2EngineC.CONFIG_X_UNIT,
      CONFIG_Y_UNIT = _constants$IX2EngineC.CONFIG_Y_UNIT,
      CONFIG_Z_UNIT = _constants$IX2EngineC.CONFIG_Z_UNIT,
      CONFIG_UNIT = _constants$IX2EngineC.CONFIG_UNIT,
      _constants$IX2EngineA = _constants.IX2EngineActionTypes,
      IX2_SESSION_STOPPED = _constants$IX2EngineA.IX2_SESSION_STOPPED,
      IX2_INSTANCE_ADDED = _constants$IX2EngineA.IX2_INSTANCE_ADDED,
      IX2_ELEMENT_STATE_CHANGED = _constants$IX2EngineA.IX2_ELEMENT_STATE_CHANGED,
      initialState = {};

  function createElementState(state, ref, refType, elementId, actionItem) {
    var refId = refType === PLAIN_OBJECT ? (0, _timm.getIn)(actionItem, ["config", "target", "objectId"]) : null;
    return (0, _timm.mergeIn)(state, [elementId], {
      id: elementId,
      ref: ref,
      refId: refId,
      refType: refType
    });
  }

  function mergeActionState(state, elementId, actionTypeId, actionState, actionItem) {
    var units = function (actionItem) {
      var config = actionItem.config;
      return valueUnitPairs.reduce(function (result, pair) {
        var valueKey = pair[0],
            unitKey = pair[1],
            configValue = config[valueKey],
            configUnit = config[unitKey];
        return null != configValue && null != configUnit && (result[unitKey] = configUnit), result;
      }, {});
    }(actionItem),
        mergePath = [elementId, "refState", actionTypeId];

    return (0, _timm.mergeIn)(state, mergePath, actionState, units);
  }

  exports.ixElements = function () {
    var state = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : initialState,
        action = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};

    switch (action.type) {
      case IX2_SESSION_STOPPED:
        return initialState;

      case IX2_INSTANCE_ADDED:
        var _action$payload = action.payload,
            elementId = _action$payload.elementId,
            ref = _action$payload.element,
            origin = _action$payload.origin,
            actionItem = _action$payload.actionItem,
            refType = _action$payload.refType,
            actionTypeId = actionItem.actionTypeId,
            newState = state;
        return (0, _timm.getIn)(newState, [elementId, ref]) !== ref && (newState = createElementState(newState, ref, refType, elementId, actionItem)), mergeActionState(newState, elementId, actionTypeId, origin, actionItem);

      case IX2_ELEMENT_STATE_CHANGED:
        var _action$payload2 = action.payload,
            _elementId = _action$payload2.elementId,
            _actionTypeId = _action$payload2.actionTypeId,
            current = _action$payload2.current,
            _actionItem = _action$payload2.actionItem;
        return mergeActionState(state, _elementId, _actionTypeId, current, _actionItem);

      default:
        return state;
    }
  };

  var valueUnitPairs = [[CONFIG_X_VALUE, CONFIG_X_UNIT], [CONFIG_Y_VALUE, CONFIG_Y_UNIT], [CONFIG_Z_VALUE, CONFIG_Z_UNIT], [CONFIG_VALUE, CONFIG_UNIT]];
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.clearPlugin = exports.renderPlugin = exports.createPluginInstance = exports.getPluginDestination = exports.getPluginOrigin = exports.getPluginDuration = exports.getPluginConfig = void 0, exports.getPluginConfig = function (actionItemConfig) {
    return actionItemConfig.value;
  }, exports.getPluginDuration = function (element, actionItem) {
    if ("auto" !== actionItem.config.duration) return null;
    var duration = parseFloat(element.getAttribute("data-duration"));
    return duration > 0 ? 1e3 * duration : 1e3 * parseFloat(element.getAttribute("data-default-duration"));
  }, exports.getPluginOrigin = function (refState) {
    return refState || {
      value: 0
    };
  }, exports.getPluginDestination = function (actionItemConfig) {
    return {
      value: actionItemConfig.value
    };
  }, exports.createPluginInstance = function (element) {
    var instance = window.Webflow.require("lottie").createInstance(element);

    return instance.stop(), instance.setSubframe(!0), instance;
  }, exports.renderPlugin = function (pluginInstance, refState, actionItem) {
    if (pluginInstance) {
      var percent = refState[actionItem.actionTypeId].value / 100;
      pluginInstance.goToFrame(pluginInstance.frames * percent);
    }
  }, exports.clearPlugin = function (element) {
    window.Webflow.require("lottie").createInstance(element).stop();
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _Object$freeze,
      _Object$freeze2,
      _transformDefaults,
      _interopRequireDefault2 = __webpack_require__(0),
      _typeof2 = _interopRequireDefault2(__webpack_require__(16)),
      _defineProperty2 = _interopRequireDefault2(__webpack_require__(17)),
      _interopRequireDefault = __webpack_require__(0);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.getInstanceId = function () {
    return "i" + instanceCount++;
  }, exports.getElementId = function (ixElements, ref) {
    for (var key in ixElements) {
      var ixEl = ixElements[key];
      if (ixEl && ixEl.ref === ref) return ixEl.id;
    }

    return "e" + elementCount++;
  }, exports.reifyState = function () {
    var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
        events = _ref.events,
        actionLists = _ref.actionLists,
        site = _ref.site,
        eventTypeMap = (0, _reduce.default)(events, function (result, event) {
      var eventTypeId = event.eventTypeId;
      return result[eventTypeId] || (result[eventTypeId] = {}), result[eventTypeId][event.id] = event, result;
    }, {}),
        mediaQueries = site && site.mediaQueries,
        mediaQueryKeys = [];

    return mediaQueries ? mediaQueryKeys = mediaQueries.map(function (mq) {
      return mq.key;
    }) : (mediaQueries = [], console.warn("IX2 missing mediaQueries in site data")), {
      ixData: {
        events: events,
        actionLists: actionLists,
        eventTypeMap: eventTypeMap,
        mediaQueries: mediaQueries,
        mediaQueryKeys: mediaQueryKeys
      }
    };
  }, exports.observeStore = function (_ref2) {
    var store = _ref2.store,
        select = _ref2.select,
        onChange = _ref2.onChange,
        _ref2$comparator = _ref2.comparator,
        comparator = void 0 === _ref2$comparator ? strictEqual : _ref2$comparator,
        getState = store.getState,
        unsubscribe = (0, store.subscribe)(function () {
      var nextState = select(getState());
      null != nextState ? comparator(nextState, currentState) || onChange(currentState = nextState, store) : unsubscribe();
    }),
        currentState = select(getState());
    return unsubscribe;
  }, exports.getAffectedElements = getAffectedElements, exports.getComputedStyle = function (_ref4) {
    var element = _ref4.element,
        actionItem = _ref4.actionItem;
    if (!_IX2BrowserSupport.IS_BROWSER_ENV) return {};

    switch (actionItem.actionTypeId) {
      case STYLE_SIZE:
      case STYLE_BACKGROUND_COLOR:
      case STYLE_BORDER:
      case STYLE_TEXT_COLOR:
      case GENERAL_DISPLAY:
        return window.getComputedStyle(element);

      default:
        return {};
    }
  }, exports.getInstanceOrigin = function (element) {
    var refState = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        computedStyle = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
        actionItem = arguments.length > 3 ? arguments[3] : void 0,
        elementApi = arguments.length > 4 ? arguments[4] : void 0,
        getStyle = elementApi.getStyle,
        actionTypeId = actionItem.actionTypeId,
        config = actionItem.config;
    if ((0, _IX2VanillaPlugins.isPluginType)(actionTypeId)) return (0, _IX2VanillaPlugins.getPluginOrigin)(actionTypeId)(refState[actionTypeId]);

    switch (actionTypeId) {
      case TRANSFORM_MOVE:
      case TRANSFORM_SCALE:
      case TRANSFORM_ROTATE:
      case TRANSFORM_SKEW:
        return refState[actionTypeId] || transformDefaults[actionTypeId];

      case STYLE_FILTER:
        return getFilterDefaults(refState[actionTypeId], actionItem.config.filters);

      case STYLE_OPACITY:
        return {
          value: (0, _defaultTo.default)(parseFloat(getStyle(element, OPACITY)), 1)
        };

      case STYLE_SIZE:
        var inlineWidth = getStyle(element, WIDTH),
            inlineHeight = getStyle(element, HEIGHT);
        return {
          widthValue: config.widthUnit === AUTO ? pxValueRegex.test(inlineWidth) ? parseFloat(inlineWidth) : parseFloat(computedStyle.width) : (0, _defaultTo.default)(parseFloat(inlineWidth), parseFloat(computedStyle.width)),
          heightValue: config.heightUnit === AUTO ? pxValueRegex.test(inlineHeight) ? parseFloat(inlineHeight) : parseFloat(computedStyle.height) : (0, _defaultTo.default)(parseFloat(inlineHeight), parseFloat(computedStyle.height))
        };

      case STYLE_BACKGROUND_COLOR:
      case STYLE_BORDER:
      case STYLE_TEXT_COLOR:
        return parseColor({
          element: element,
          actionTypeId: actionTypeId,
          computedStyle: computedStyle,
          getStyle: getStyle
        });

      case GENERAL_DISPLAY:
        return {
          value: (0, _defaultTo.default)(getStyle(element, DISPLAY), computedStyle.display)
        };

      case "OBJECT_VALUE":
        return refState[actionTypeId] || {
          value: 0
        };

      default:
        return;
    }
  }, exports.getDestinationValues = function (_ref6) {
    var element = _ref6.element,
        actionItem = _ref6.actionItem,
        elementApi = _ref6.elementApi,
        actionTypeId = actionItem.actionTypeId;
    if ((0, _IX2VanillaPlugins.isPluginType)(actionTypeId)) return (0, _IX2VanillaPlugins.getPluginDestination)(actionTypeId)(actionItem.config);

    switch (actionTypeId) {
      case TRANSFORM_MOVE:
      case TRANSFORM_SCALE:
      case TRANSFORM_ROTATE:
      case TRANSFORM_SKEW:
        var _actionItem$config = actionItem.config;
        return {
          xValue: _actionItem$config.xValue,
          yValue: _actionItem$config.yValue,
          zValue: _actionItem$config.zValue
        };

      case STYLE_SIZE:
        var getStyle = elementApi.getStyle,
            setStyle = elementApi.setStyle,
            getProperty = elementApi.getProperty,
            _actionItem$config2 = actionItem.config,
            widthUnit = _actionItem$config2.widthUnit,
            heightUnit = _actionItem$config2.heightUnit,
            _actionItem$config3 = actionItem.config,
            widthValue = _actionItem$config3.widthValue,
            heightValue = _actionItem$config3.heightValue;
        if (!_IX2BrowserSupport.IS_BROWSER_ENV) return {
          widthValue: widthValue,
          heightValue: heightValue
        };

        if (widthUnit === AUTO) {
          var temp = getStyle(element, WIDTH);
          setStyle(element, WIDTH, ""), widthValue = getProperty(element, "offsetWidth"), setStyle(element, WIDTH, temp);
        }

        if (heightUnit === AUTO) {
          var _temp = getStyle(element, HEIGHT);

          setStyle(element, HEIGHT, ""), heightValue = getProperty(element, "offsetHeight"), setStyle(element, HEIGHT, _temp);
        }

        return {
          widthValue: widthValue,
          heightValue: heightValue
        };

      case STYLE_BACKGROUND_COLOR:
      case STYLE_BORDER:
      case STYLE_TEXT_COLOR:
        var _actionItem$config4 = actionItem.config;
        return {
          rValue: _actionItem$config4.rValue,
          gValue: _actionItem$config4.gValue,
          bValue: _actionItem$config4.bValue,
          aValue: _actionItem$config4.aValue
        };

      case STYLE_FILTER:
        return actionItem.config.filters.reduce(reduceFilters, {});

      default:
        return {
          value: actionItem.config.value
        };
    }
  }, exports.getRenderType = getRenderType, exports.getStyleProp = function (renderType, actionTypeId) {
    return renderType === RENDER_STYLE ? actionTypeId.replace("STYLE_", "").toLowerCase() : null;
  }, exports.renderHTMLElement = function (element, refState, actionState, eventId, actionItem, styleProp, elementApi, renderType, pluginInstance) {
    switch (renderType) {
      case RENDER_TRANSFORM:
        return function (element, refState, actionState, actionItem, elementApi) {
          var newTransform = transformKeys.map(function (actionTypeId) {
            var defaults = transformDefaults[actionTypeId],
                _ref8 = refState[actionTypeId] || {},
                _ref8$xValue = _ref8.xValue,
                xValue = void 0 === _ref8$xValue ? defaults.xValue : _ref8$xValue,
                _ref8$yValue = _ref8.yValue,
                yValue = void 0 === _ref8$yValue ? defaults.yValue : _ref8$yValue,
                _ref8$zValue = _ref8.zValue,
                zValue = void 0 === _ref8$zValue ? defaults.zValue : _ref8$zValue,
                _ref8$xUnit = _ref8.xUnit,
                xUnit = void 0 === _ref8$xUnit ? "" : _ref8$xUnit,
                _ref8$yUnit = _ref8.yUnit,
                yUnit = void 0 === _ref8$yUnit ? "" : _ref8$yUnit,
                _ref8$zUnit = _ref8.zUnit,
                zUnit = void 0 === _ref8$zUnit ? "" : _ref8$zUnit;

            switch (actionTypeId) {
              case TRANSFORM_MOVE:
                return "".concat(TRANSLATE_3D, "(").concat(xValue).concat(xUnit, ", ").concat(yValue).concat(yUnit, ", ").concat(zValue).concat(zUnit, ")");

              case TRANSFORM_SCALE:
                return "".concat(SCALE_3D, "(").concat(xValue).concat(xUnit, ", ").concat(yValue).concat(yUnit, ", ").concat(zValue).concat(zUnit, ")");

              case TRANSFORM_ROTATE:
                return "".concat(ROTATE_X, "(").concat(xValue).concat(xUnit, ") ").concat(ROTATE_Y, "(").concat(yValue).concat(yUnit, ") ").concat(ROTATE_Z, "(").concat(zValue).concat(zUnit, ")");

              case TRANSFORM_SKEW:
                return "".concat(SKEW, "(").concat(xValue).concat(xUnit, ", ").concat(yValue).concat(yUnit, ")");

              default:
                return "";
            }
          }).join(" "),
              setStyle = elementApi.setStyle;
          addWillChange(element, _IX2BrowserSupport.TRANSFORM_PREFIXED, elementApi), setStyle(element, _IX2BrowserSupport.TRANSFORM_PREFIXED, newTransform), function (_ref9, _ref10) {
            var actionTypeId = _ref9.actionTypeId,
                xValue = _ref10.xValue,
                yValue = _ref10.yValue,
                zValue = _ref10.zValue;
            return actionTypeId === TRANSFORM_MOVE && void 0 !== zValue || actionTypeId === TRANSFORM_SCALE && void 0 !== zValue || actionTypeId === TRANSFORM_ROTATE && (void 0 !== xValue || void 0 !== yValue);
          }(actionItem, actionState) && setStyle(element, _IX2BrowserSupport.TRANSFORM_STYLE_PREFIXED, PRESERVE_3D);
        }(element, refState, actionState, actionItem, elementApi);

      case RENDER_STYLE:
        return function (element, refState, actionState, actionItem, styleProp, elementApi) {
          var setStyle = elementApi.setStyle,
              actionTypeId = actionItem.actionTypeId,
              config = actionItem.config;

          switch (actionTypeId) {
            case STYLE_SIZE:
              var _actionItem$config5 = actionItem.config,
                  _actionItem$config5$w = _actionItem$config5.widthUnit,
                  widthUnit = void 0 === _actionItem$config5$w ? "" : _actionItem$config5$w,
                  _actionItem$config5$h = _actionItem$config5.heightUnit,
                  heightUnit = void 0 === _actionItem$config5$h ? "" : _actionItem$config5$h,
                  widthValue = actionState.widthValue,
                  heightValue = actionState.heightValue;
              void 0 !== widthValue && (widthUnit === AUTO && (widthUnit = "px"), addWillChange(element, WIDTH, elementApi), setStyle(element, WIDTH, widthValue + widthUnit)), void 0 !== heightValue && (heightUnit === AUTO && (heightUnit = "px"), addWillChange(element, HEIGHT, elementApi), setStyle(element, HEIGHT, heightValue + heightUnit));
              break;

            case STYLE_FILTER:
              !function (element, actionState, actionItemConfig, elementApi) {
                var filterValue = (0, _reduce.default)(actionState, function (result, value, type) {
                  return "".concat(result, " ").concat(type, "(").concat(value).concat(function (filterType, actionItemConfig) {
                    var filter = (0, _findLast.default)(actionItemConfig.filters, function (_ref7) {
                      return _ref7.type === filterType;
                    });
                    if (filter && filter.unit) return filter.unit;

                    switch (filterType) {
                      case "blur":
                        return "px";

                      case "hue-rotate":
                        return "deg";

                      default:
                        return "%";
                    }
                  }(type, actionItemConfig), ")");
                }, ""),
                    setStyle = elementApi.setStyle;
                addWillChange(element, FILTER, elementApi), setStyle(element, FILTER, filterValue);
              }(element, actionState, config, elementApi);
              break;

            case STYLE_BACKGROUND_COLOR:
            case STYLE_BORDER:
            case STYLE_TEXT_COLOR:
              var prop = colorStyleProps[actionTypeId],
                  rValue = Math.round(actionState.rValue),
                  gValue = Math.round(actionState.gValue),
                  bValue = Math.round(actionState.bValue),
                  aValue = actionState.aValue;
              addWillChange(element, prop, elementApi), setStyle(element, prop, aValue >= 1 ? "rgb(".concat(rValue, ",").concat(gValue, ",").concat(bValue, ")") : "rgba(".concat(rValue, ",").concat(gValue, ",").concat(bValue, ",").concat(aValue, ")"));
              break;

            default:
              var _config$unit = config.unit,
                  unit = void 0 === _config$unit ? "" : _config$unit;
              addWillChange(element, styleProp, elementApi), setStyle(element, styleProp, actionState.value + unit);
          }
        }(element, 0, actionState, actionItem, styleProp, elementApi);

      case RENDER_GENERAL:
        return function (element, actionItem, elementApi) {
          var setStyle = elementApi.setStyle;

          switch (actionItem.actionTypeId) {
            case GENERAL_DISPLAY:
              var value = actionItem.config.value;
              return void (value === FLEX && _IX2BrowserSupport.IS_BROWSER_ENV ? setStyle(element, DISPLAY, _IX2BrowserSupport.FLEX_PREFIXED) : setStyle(element, DISPLAY, value));
          }
        }(element, actionItem, elementApi);

      case RENDER_PLUGIN:
        var actionTypeId = actionItem.actionTypeId;
        if ((0, _IX2VanillaPlugins.isPluginType)(actionTypeId)) return (0, _IX2VanillaPlugins.renderPlugin)(actionTypeId)(pluginInstance, refState, actionItem);
    }
  }, exports.clearAllStyles = function (_ref12) {
    var store = _ref12.store,
        elementApi = _ref12.elementApi,
        ixData = store.getState().ixData,
        _ixData$events = ixData.events,
        events = void 0 === _ixData$events ? {} : _ixData$events,
        _ixData$actionLists = ixData.actionLists,
        actionLists = void 0 === _ixData$actionLists ? {} : _ixData$actionLists;
    Object.keys(events).forEach(function (eventId) {
      var event = events[eventId],
          actionListId = event.action.config.actionListId,
          actionList = actionLists[actionListId];
      actionList && clearActionListStyles({
        actionList: actionList,
        event: event,
        elementApi: elementApi
      });
    }), Object.keys(actionLists).forEach(function (actionListId) {
      clearActionListStyles({
        actionList: actionLists[actionListId],
        elementApi: elementApi
      });
    });
  }, exports.cleanupHTMLElement = function (element, actionItem, elementApi) {
    var setStyle = elementApi.setStyle,
        getStyle = elementApi.getStyle,
        actionTypeId = actionItem.actionTypeId;

    if (actionTypeId === STYLE_SIZE) {
      var config = actionItem.config;
      config.widthUnit === AUTO && setStyle(element, WIDTH, ""), config.heightUnit === AUTO && setStyle(element, HEIGHT, "");
    }

    getStyle(element, WILL_CHANGE) && processElementByType({
      effect: removeWillChange,
      actionTypeId: actionTypeId,
      elementApi: elementApi
    })(element);
  }, exports.getMaxDurationItemIndex = getMaxDurationItemIndex, exports.getActionListProgress = function (actionList, instance) {
    var actionItemGroups = actionList.actionItemGroups,
        useFirstGroupAsInitialState = actionList.useFirstGroupAsInitialState,
        instanceItem = instance.actionItem,
        _instance$verboseTime = instance.verboseTimeElapsed,
        verboseTimeElapsed = void 0 === _instance$verboseTime ? 0 : _instance$verboseTime,
        totalDuration = 0,
        elapsedDuration = 0;
    return actionItemGroups.forEach(function (group, index) {
      if (!useFirstGroupAsInitialState || 0 !== index) {
        var actionItems = group.actionItems,
            carrierItem = actionItems[getMaxDurationItemIndex(actionItems)],
            config = carrierItem.config,
            actionTypeId = carrierItem.actionTypeId;
        instanceItem.id === carrierItem.id && (elapsedDuration = totalDuration + verboseTimeElapsed);
        var duration = getRenderType(actionTypeId) === RENDER_GENERAL ? 0 : config.duration;
        totalDuration += config.delay + duration;
      }
    }), totalDuration > 0 ? (0, _IX2EasingUtils.optimizeFloat)(elapsedDuration / totalDuration) : 0;
  }, exports.reduceListToGroup = function (_ref17) {
    var actionList = _ref17.actionList,
        actionItemId = _ref17.actionItemId,
        rawData = _ref17.rawData,
        actionItemGroups = actionList.actionItemGroups,
        continuousParameterGroups = actionList.continuousParameterGroups,
        newActionItems = [],
        takeItemUntilMatch = function (actionItem) {
      return newActionItems.push((0, _timm.mergeIn)(actionItem, ["config"], {
        delay: 0,
        duration: 0
      })), actionItem.id === actionItemId;
    };

    return actionItemGroups && actionItemGroups.some(function (_ref18) {
      return _ref18.actionItems.some(takeItemUntilMatch);
    }), continuousParameterGroups && continuousParameterGroups.some(function (paramGroup) {
      return paramGroup.continuousActionGroups.some(function (_ref19) {
        return _ref19.actionItems.some(takeItemUntilMatch);
      });
    }), (0, _timm.setIn)(rawData, ["actionLists"], (0, _defineProperty2.default)({}, actionList.id, {
      id: actionList.id,
      actionItemGroups: [{
        actionItems: newActionItems
      }]
    }));
  }, exports.shouldNamespaceEventParameter = function (eventTypeId, _ref21) {
    var basedOn = _ref21.basedOn;
    return eventTypeId === _constants.EventTypeConsts.SCROLLING_IN_VIEW && (basedOn === _constants.EventBasedOn.ELEMENT || null == basedOn) || eventTypeId === _constants.EventTypeConsts.MOUSE_MOVE && basedOn === _constants.EventBasedOn.ELEMENT;
  }, exports.getNamespacedParameterId = function (eventStateKey, continuousParameterGroupId) {
    return eventStateKey + COLON_DELIMITER + continuousParameterGroupId;
  }, exports.shouldAllowMediaQuery = function (mediaQueries, mediaQueryKey) {
    return null == mediaQueryKey || -1 !== mediaQueries.indexOf(mediaQueryKey);
  }, exports.mediaQueriesEqual = function (listA, listB) {
    return (0, _shallowEqual.default)(listA && listA.sort(), listB && listB.sort());
  }, exports.stringifyTarget = function (target) {
    if ("string" == typeof target) return target;
    var _target$id = target.id,
        id = void 0 === _target$id ? "" : _target$id,
        _target$selector = target.selector,
        selector = void 0 === _target$selector ? "" : _target$selector,
        _target$useEventTarge = target.useEventTarget;
    return id + BAR_DELIMITER + selector + BAR_DELIMITER + (void 0 === _target$useEventTarge ? "" : _target$useEventTarge);
  }, exports.getItemConfigByKey = void 0;

  var _defaultTo = _interopRequireDefault(__webpack_require__(195)),
      _reduce = _interopRequireDefault(__webpack_require__(196)),
      _findLast = _interopRequireDefault(__webpack_require__(202)),
      _get = _interopRequireDefault(__webpack_require__(25)),
      _timm = __webpack_require__(13),
      _shallowEqual = _interopRequireDefault(__webpack_require__(89)),
      _constants = __webpack_require__(2),
      _IX2EasingUtils = __webpack_require__(84),
      _IX2VanillaPlugins = __webpack_require__(86),
      _IX2BrowserSupport = __webpack_require__(31),
      _constants$IX2EngineC = _constants.IX2EngineConstants,
      BACKGROUND = _constants$IX2EngineC.BACKGROUND,
      TRANSFORM = _constants$IX2EngineC.TRANSFORM,
      TRANSLATE_3D = _constants$IX2EngineC.TRANSLATE_3D,
      SCALE_3D = _constants$IX2EngineC.SCALE_3D,
      ROTATE_X = _constants$IX2EngineC.ROTATE_X,
      ROTATE_Y = _constants$IX2EngineC.ROTATE_Y,
      ROTATE_Z = _constants$IX2EngineC.ROTATE_Z,
      SKEW = _constants$IX2EngineC.SKEW,
      PRESERVE_3D = _constants$IX2EngineC.PRESERVE_3D,
      FLEX = _constants$IX2EngineC.FLEX,
      OPACITY = _constants$IX2EngineC.OPACITY,
      FILTER = _constants$IX2EngineC.FILTER,
      WIDTH = _constants$IX2EngineC.WIDTH,
      HEIGHT = _constants$IX2EngineC.HEIGHT,
      BACKGROUND_COLOR = _constants$IX2EngineC.BACKGROUND_COLOR,
      BORDER_COLOR = _constants$IX2EngineC.BORDER_COLOR,
      COLOR = _constants$IX2EngineC.COLOR,
      CHILDREN = _constants$IX2EngineC.CHILDREN,
      IMMEDIATE_CHILDREN = _constants$IX2EngineC.IMMEDIATE_CHILDREN,
      SIBLINGS = _constants$IX2EngineC.SIBLINGS,
      PARENT = _constants$IX2EngineC.PARENT,
      DISPLAY = _constants$IX2EngineC.DISPLAY,
      WILL_CHANGE = _constants$IX2EngineC.WILL_CHANGE,
      AUTO = _constants$IX2EngineC.AUTO,
      COMMA_DELIMITER = _constants$IX2EngineC.COMMA_DELIMITER,
      COLON_DELIMITER = _constants$IX2EngineC.COLON_DELIMITER,
      BAR_DELIMITER = _constants$IX2EngineC.BAR_DELIMITER,
      RENDER_TRANSFORM = _constants$IX2EngineC.RENDER_TRANSFORM,
      RENDER_GENERAL = _constants$IX2EngineC.RENDER_GENERAL,
      RENDER_STYLE = _constants$IX2EngineC.RENDER_STYLE,
      RENDER_PLUGIN = _constants$IX2EngineC.RENDER_PLUGIN,
      _constants$ActionType = _constants.ActionTypeConsts,
      TRANSFORM_MOVE = _constants$ActionType.TRANSFORM_MOVE,
      TRANSFORM_SCALE = _constants$ActionType.TRANSFORM_SCALE,
      TRANSFORM_ROTATE = _constants$ActionType.TRANSFORM_ROTATE,
      TRANSFORM_SKEW = _constants$ActionType.TRANSFORM_SKEW,
      STYLE_OPACITY = _constants$ActionType.STYLE_OPACITY,
      STYLE_FILTER = _constants$ActionType.STYLE_FILTER,
      STYLE_SIZE = _constants$ActionType.STYLE_SIZE,
      STYLE_BACKGROUND_COLOR = _constants$ActionType.STYLE_BACKGROUND_COLOR,
      STYLE_BORDER = _constants$ActionType.STYLE_BORDER,
      STYLE_TEXT_COLOR = _constants$ActionType.STYLE_TEXT_COLOR,
      GENERAL_DISPLAY = _constants$ActionType.GENERAL_DISPLAY,
      trim = function (v) {
    return v.trim();
  },
      colorStyleProps = Object.freeze((_Object$freeze = {}, (0, _defineProperty2.default)(_Object$freeze, STYLE_BACKGROUND_COLOR, BACKGROUND_COLOR), (0, _defineProperty2.default)(_Object$freeze, STYLE_BORDER, BORDER_COLOR), (0, _defineProperty2.default)(_Object$freeze, STYLE_TEXT_COLOR, COLOR), _Object$freeze)),
      willChangeProps = Object.freeze((_Object$freeze2 = {}, (0, _defineProperty2.default)(_Object$freeze2, _IX2BrowserSupport.TRANSFORM_PREFIXED, TRANSFORM), (0, _defineProperty2.default)(_Object$freeze2, BACKGROUND_COLOR, BACKGROUND), (0, _defineProperty2.default)(_Object$freeze2, OPACITY, OPACITY), (0, _defineProperty2.default)(_Object$freeze2, FILTER, FILTER), (0, _defineProperty2.default)(_Object$freeze2, WIDTH, WIDTH), (0, _defineProperty2.default)(_Object$freeze2, HEIGHT, HEIGHT), _Object$freeze2)),
      objectCache = {},
      instanceCount = 1,
      elementCount = 1,
      strictEqual = function (a, b) {
    return a === b;
  };

  function normalizeTarget(target) {
    var type = (0, _typeof2.default)(target);
    return "string" === type ? {
      id: target
    } : null != target && "object" === type ? {
      id: target.id,
      objectId: target.objectId,
      selector: target.selector,
      selectorGuids: target.selectorGuids,
      appliesTo: target.appliesTo,
      useEventTarget: target.useEventTarget
    } : {};
  }

  function getAffectedElements(_ref3) {
    var config = _ref3.config,
        event = _ref3.event,
        eventTarget = _ref3.eventTarget,
        elementRoot = _ref3.elementRoot,
        elementApi = _ref3.elementApi;
    if (!elementApi) throw new Error("IX2 missing elementApi");
    var getValidDocument = elementApi.getValidDocument,
        getQuerySelector = elementApi.getQuerySelector,
        queryDocument = elementApi.queryDocument,
        getChildElements = elementApi.getChildElements,
        getSiblingElements = elementApi.getSiblingElements,
        matchSelector = elementApi.matchSelector,
        elementContains = elementApi.elementContains,
        isSiblingNode = elementApi.isSiblingNode,
        target = config.target;
    if (!target) return [];

    var _normalizeTarget = normalizeTarget(target),
        id = _normalizeTarget.id,
        objectId = _normalizeTarget.objectId,
        selector = _normalizeTarget.selector,
        selectorGuids = _normalizeTarget.selectorGuids,
        appliesTo = _normalizeTarget.appliesTo,
        useEventTarget = _normalizeTarget.useEventTarget;

    if (objectId) return [objectCache[objectId] || (objectCache[objectId] = {})];

    if (appliesTo === _constants.EventAppliesTo.PAGE) {
      var doc = getValidDocument(id);
      return doc ? [doc] : [];
    }

    var limitAffectedElements,
        baseSelector,
        finalSelector,
        override = (0, _get.default)(event, "action.config.affectedElements", {})[id || selector] || {},
        validOverride = Boolean(override.id || override.selector),
        eventTargetSelector = event && getQuerySelector(normalizeTarget(event.target));

    if (validOverride ? (limitAffectedElements = override.limitAffectedElements, baseSelector = eventTargetSelector, finalSelector = getQuerySelector(override)) : baseSelector = finalSelector = getQuerySelector({
      id: id,
      selector: selector,
      selectorGuids: selectorGuids
    }), event && useEventTarget) {
      var eventTargets = eventTarget && (finalSelector || !0 === useEventTarget) ? [eventTarget] : queryDocument(eventTargetSelector);

      if (finalSelector) {
        if (useEventTarget === PARENT) return queryDocument(finalSelector).filter(function (parentElement) {
          return eventTargets.some(function (targetElement) {
            return elementContains(parentElement, targetElement);
          });
        });
        if (useEventTarget === CHILDREN) return queryDocument(finalSelector).filter(function (childElement) {
          return eventTargets.some(function (targetElement) {
            return elementContains(targetElement, childElement);
          });
        });
        if (useEventTarget === SIBLINGS) return queryDocument(finalSelector).filter(function (siblingElement) {
          return eventTargets.some(function (targetElement) {
            return isSiblingNode(targetElement, siblingElement);
          });
        });
      }

      return eventTargets;
    }

    return null == baseSelector || null == finalSelector ? [] : _IX2BrowserSupport.IS_BROWSER_ENV && elementRoot ? queryDocument(finalSelector).filter(function (element) {
      return elementRoot.contains(element);
    }) : limitAffectedElements === CHILDREN ? queryDocument(baseSelector, finalSelector) : limitAffectedElements === IMMEDIATE_CHILDREN ? getChildElements(queryDocument(baseSelector)).filter(matchSelector(finalSelector)) : limitAffectedElements === SIBLINGS ? getSiblingElements(queryDocument(baseSelector)).filter(matchSelector(finalSelector)) : queryDocument(finalSelector);
  }

  var pxValueRegex = /px/,
      getFilterDefaults = function (actionState, filters) {
    return filters.reduce(function (result, filter) {
      return null == result[filter.type] && (result[filter.type] = filterDefaults[filter.type]), result;
    }, actionState || {});
  },
      reduceFilters = function (result, filter) {
    return filter && (result[filter.type] = filter.value || 0), result;
  };

  function getRenderType(actionTypeId) {
    return /^TRANSFORM_/.test(actionTypeId) ? RENDER_TRANSFORM : /^STYLE_/.test(actionTypeId) ? RENDER_STYLE : /^GENERAL_/.test(actionTypeId) ? RENDER_GENERAL : /^PLUGIN_/.test(actionTypeId) ? RENDER_PLUGIN : void 0;
  }

  exports.getItemConfigByKey = function (actionTypeId, key, config) {
    if ((0, _IX2VanillaPlugins.isPluginType)(actionTypeId)) return (0, _IX2VanillaPlugins.getPluginConfig)(actionTypeId)(config, key);

    switch (actionTypeId) {
      case STYLE_FILTER:
        var filter = (0, _findLast.default)(config.filters, function (_ref5) {
          return _ref5.type === key;
        });
        return filter ? filter.value : 0;

      default:
        return config[key];
    }
  };

  var transformDefaults = (_transformDefaults = {}, (0, _defineProperty2.default)(_transformDefaults, TRANSFORM_MOVE, Object.freeze({
    xValue: 0,
    yValue: 0,
    zValue: 0
  })), (0, _defineProperty2.default)(_transformDefaults, TRANSFORM_SCALE, Object.freeze({
    xValue: 1,
    yValue: 1,
    zValue: 1
  })), (0, _defineProperty2.default)(_transformDefaults, TRANSFORM_ROTATE, Object.freeze({
    xValue: 0,
    yValue: 0,
    zValue: 0
  })), (0, _defineProperty2.default)(_transformDefaults, TRANSFORM_SKEW, Object.freeze({
    xValue: 0,
    yValue: 0
  })), _transformDefaults),
      filterDefaults = Object.freeze({
    blur: 0,
    "hue-rotate": 0,
    invert: 0,
    grayscale: 0,
    saturate: 100,
    sepia: 0,
    contrast: 100,
    brightness: 100
  }),
      transformKeys = Object.keys(transformDefaults),
      rgbValidRegex = /^rgb/,
      rgbMatchRegex = RegExp("rgba?".concat("\\(([^)]+)\\)"));

  function parseColor(_ref11) {
    var element = _ref11.element,
        actionTypeId = _ref11.actionTypeId,
        computedStyle = _ref11.computedStyle,
        getStyle = _ref11.getStyle,
        prop = colorStyleProps[actionTypeId],
        inlineValue = getStyle(element, prop),
        value = rgbValidRegex.test(inlineValue) ? inlineValue : computedStyle[prop],
        matches = function (regex, value) {
      var match = regex.exec(value);
      return match ? match[1] : "";
    }(rgbMatchRegex, value).split(COMMA_DELIMITER);

    return {
      rValue: (0, _defaultTo.default)(parseInt(matches[0], 10), 255),
      gValue: (0, _defaultTo.default)(parseInt(matches[1], 10), 255),
      bValue: (0, _defaultTo.default)(parseInt(matches[2], 10), 255),
      aValue: (0, _defaultTo.default)(parseFloat(matches[3]), 1)
    };
  }

  function addWillChange(element, prop, elementApi) {
    if (_IX2BrowserSupport.IS_BROWSER_ENV) {
      var validProp = willChangeProps[prop];

      if (validProp) {
        var getStyle = elementApi.getStyle,
            setStyle = elementApi.setStyle,
            value = getStyle(element, WILL_CHANGE);

        if (value) {
          var values = value.split(COMMA_DELIMITER).map(trim);
          -1 === values.indexOf(validProp) && setStyle(element, WILL_CHANGE, values.concat(validProp).join(COMMA_DELIMITER));
        } else setStyle(element, WILL_CHANGE, validProp);
      }
    }
  }

  function removeWillChange(element, prop, elementApi) {
    if (_IX2BrowserSupport.IS_BROWSER_ENV) {
      var validProp = willChangeProps[prop];

      if (validProp) {
        var getStyle = elementApi.getStyle,
            setStyle = elementApi.setStyle,
            value = getStyle(element, WILL_CHANGE);
        value && -1 !== value.indexOf(validProp) && setStyle(element, WILL_CHANGE, value.split(COMMA_DELIMITER).map(trim).filter(function (v) {
          return v !== validProp;
        }).join(COMMA_DELIMITER));
      }
    }
  }

  function clearActionListStyles(_ref13) {
    var _ref13$actionList = _ref13.actionList,
        actionList = void 0 === _ref13$actionList ? {} : _ref13$actionList,
        event = _ref13.event,
        elementApi = _ref13.elementApi,
        actionItemGroups = actionList.actionItemGroups,
        continuousParameterGroups = actionList.continuousParameterGroups;
    actionItemGroups && actionItemGroups.forEach(function (actionGroup) {
      clearActionGroupStyles({
        actionGroup: actionGroup,
        event: event,
        elementApi: elementApi
      });
    }), continuousParameterGroups && continuousParameterGroups.forEach(function (paramGroup) {
      paramGroup.continuousActionGroups.forEach(function (actionGroup) {
        clearActionGroupStyles({
          actionGroup: actionGroup,
          event: event,
          elementApi: elementApi
        });
      });
    });
  }

  function clearActionGroupStyles(_ref14) {
    var actionGroup = _ref14.actionGroup,
        event = _ref14.event,
        elementApi = _ref14.elementApi;
    actionGroup.actionItems.forEach(function (_ref15) {
      var clearElement,
          actionTypeId = _ref15.actionTypeId,
          config = _ref15.config;
      clearElement = (0, _IX2VanillaPlugins.isPluginType)(actionTypeId) ? (0, _IX2VanillaPlugins.clearPlugin)(actionTypeId) : processElementByType({
        effect: clearStyleProp,
        actionTypeId: actionTypeId,
        elementApi: elementApi
      }), getAffectedElements({
        config: config,
        event: event,
        elementApi: elementApi
      }).forEach(clearElement);
    });
  }

  var processElementByType = function (_ref16) {
    var effect = _ref16.effect,
        actionTypeId = _ref16.actionTypeId,
        elementApi = _ref16.elementApi;
    return function (element) {
      switch (actionTypeId) {
        case TRANSFORM_MOVE:
        case TRANSFORM_SCALE:
        case TRANSFORM_ROTATE:
        case TRANSFORM_SKEW:
          effect(element, _IX2BrowserSupport.TRANSFORM_PREFIXED, elementApi);
          break;

        case STYLE_FILTER:
          effect(element, FILTER, elementApi);
          break;

        case STYLE_OPACITY:
          effect(element, OPACITY, elementApi);
          break;

        case STYLE_SIZE:
          effect(element, WIDTH, elementApi), effect(element, HEIGHT, elementApi);
          break;

        case STYLE_BACKGROUND_COLOR:
        case STYLE_BORDER:
        case STYLE_TEXT_COLOR:
          effect(element, colorStyleProps[actionTypeId], elementApi);
          break;

        case GENERAL_DISPLAY:
          effect(element, DISPLAY, elementApi);
      }
    };
  };

  function clearStyleProp(element, prop, elementApi) {
    var setStyle = elementApi.setStyle;
    removeWillChange(element, prop, elementApi), setStyle(element, prop, ""), prop === _IX2BrowserSupport.TRANSFORM_PREFIXED && setStyle(element, _IX2BrowserSupport.TRANSFORM_STYLE_PREFIXED, "");
  }

  function getMaxDurationItemIndex(actionItems) {
    var maxDuration = 0,
        resultIndex = 0;
    return actionItems.forEach(function (actionItem, index) {
      var config = actionItem.config,
          total = config.delay + config.duration;
      total >= maxDuration && (maxDuration = total, resultIndex = index);
    }), resultIndex;
  }
}, function (module, exports) {
  module.exports = function (value, defaultValue) {
    return null == value || value != value ? defaultValue : value;
  };
}, function (module, exports, __webpack_require__) {
  var arrayReduce = __webpack_require__(197),
      baseEach = __webpack_require__(87),
      baseIteratee = __webpack_require__(5),
      baseReduce = __webpack_require__(201),
      isArray = __webpack_require__(1);

  module.exports = function (collection, iteratee, accumulator) {
    var func = isArray(collection) ? arrayReduce : baseReduce,
        initAccum = arguments.length < 3;
    return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
  };
}, function (module, exports) {
  module.exports = function (array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = null == array ? 0 : array.length;

    for (initAccum && length && (accumulator = array[++index]); ++index < length;) accumulator = iteratee(accumulator, array[index], index, array);

    return accumulator;
  };
}, function (module, exports, __webpack_require__) {
  var baseFor = __webpack_require__(199)();

  module.exports = baseFor;
}, function (module, exports) {
  module.exports = function (fromRight) {
    return function (object, iteratee, keysFunc) {
      for (var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length; length--;) {
        var key = props[fromRight ? length : ++index];
        if (!1 === iteratee(iterable[key], key, iterable)) break;
      }

      return object;
    };
  };
}, function (module, exports, __webpack_require__) {
  var isArrayLike = __webpack_require__(10);

  module.exports = function (eachFunc, fromRight) {
    return function (collection, iteratee) {
      if (null == collection) return collection;
      if (!isArrayLike(collection)) return eachFunc(collection, iteratee);

      for (var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection); (fromRight ? index-- : ++index < length) && !1 !== iteratee(iterable[index], index, iterable););

      return collection;
    };
  };
}, function (module, exports) {
  module.exports = function (collection, iteratee, accumulator, initAccum, eachFunc) {
    return eachFunc(collection, function (value, index, collection) {
      accumulator = initAccum ? (initAccum = !1, value) : iteratee(accumulator, value, index, collection);
    }), accumulator;
  };
}, function (module, exports, __webpack_require__) {
  var findLast = __webpack_require__(61)(__webpack_require__(203));

  module.exports = findLast;
}, function (module, exports, __webpack_require__) {
  var baseFindIndex = __webpack_require__(81),
      baseIteratee = __webpack_require__(5),
      toInteger = __webpack_require__(46),
      nativeMax = Math.max,
      nativeMin = Math.min;

  module.exports = function (array, predicate, fromIndex) {
    var length = null == array ? 0 : array.length;
    if (!length) return -1;
    var index = length - 1;
    return void 0 !== fromIndex && (index = toInteger(fromIndex), index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)), baseFindIndex(array, baseIteratee(predicate, 3), index, !0);
  };
}, function (module, exports) {
  module.exports = function (obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    return x === y ? 0 !== x || 0 !== y || 1 / x == 1 / y : x != x && y != y;
  }

  module.exports = function (objA, objB) {
    if (is(objA, objB)) return !0;
    if ("object" != typeof objA || null === objA || "object" != typeof objB || null === objB) return !1;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return !1;

    for (var i = 0; i < keysA.length; i++) if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) return !1;

    return !0;
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.ixInstances = void 0;

  var _constants = __webpack_require__(2),
      _shared = __webpack_require__(8),
      _timm = __webpack_require__(13),
      _constants$IX2EngineA = _constants.IX2EngineActionTypes,
      IX2_RAW_DATA_IMPORTED = _constants$IX2EngineA.IX2_RAW_DATA_IMPORTED,
      IX2_SESSION_STOPPED = _constants$IX2EngineA.IX2_SESSION_STOPPED,
      IX2_INSTANCE_ADDED = _constants$IX2EngineA.IX2_INSTANCE_ADDED,
      IX2_INSTANCE_STARTED = _constants$IX2EngineA.IX2_INSTANCE_STARTED,
      IX2_INSTANCE_REMOVED = _constants$IX2EngineA.IX2_INSTANCE_REMOVED,
      IX2_ANIMATION_FRAME_CHANGED = _constants$IX2EngineA.IX2_ANIMATION_FRAME_CHANGED,
      _shared$IX2EasingUtil = _shared.IX2EasingUtils,
      optimizeFloat = _shared$IX2EasingUtil.optimizeFloat,
      applyEasing = _shared$IX2EasingUtil.applyEasing,
      createBezierEasing = _shared$IX2EasingUtil.createBezierEasing,
      RENDER_GENERAL = _constants.IX2EngineConstants.RENDER_GENERAL,
      _shared$IX2VanillaUti = _shared.IX2VanillaUtils,
      getItemConfigByKey = _shared$IX2VanillaUti.getItemConfigByKey,
      getRenderType = _shared$IX2VanillaUti.getRenderType,
      getStyleProp = _shared$IX2VanillaUti.getStyleProp,
      continuousInstance = function (state, action) {
    var lastPosition = state.position,
        parameterId = state.parameterId,
        actionGroups = state.actionGroups,
        destinationKeys = state.destinationKeys,
        smoothing = state.smoothing,
        restingValue = state.restingValue,
        actionTypeId = state.actionTypeId,
        customEasingFn = state.customEasingFn,
        parameters = action.payload.parameters,
        velocity = Math.max(1 - smoothing, .01),
        paramValue = parameters[parameterId];
    null == paramValue && (velocity = 1, paramValue = restingValue);
    var fromActionItem,
        toActionItem,
        positionOffset,
        positionRange,
        nextPosition = Math.max(paramValue, 0) || 0,
        positionDiff = optimizeFloat(nextPosition - lastPosition),
        position = optimizeFloat(lastPosition + positionDiff * velocity),
        keyframePosition = 100 * position;
    if (position === lastPosition && state.current) return state;

    for (var i = 0, length = actionGroups.length; i < length; i++) {
      var _actionGroups$i = actionGroups[i],
          keyframe = _actionGroups$i.keyframe,
          actionItems = _actionGroups$i.actionItems;

      if (0 === i && (fromActionItem = actionItems[0]), keyframePosition >= keyframe) {
        fromActionItem = actionItems[0];
        var nextGroup = actionGroups[i + 1],
            hasNextItem = nextGroup && keyframePosition !== keyframe;
        toActionItem = hasNextItem ? nextGroup.actionItems[0] : null, hasNextItem && (positionOffset = keyframe / 100, positionRange = (nextGroup.keyframe - keyframe) / 100);
      }
    }

    var current = {};
    if (fromActionItem && !toActionItem) for (var _i = 0, _length = destinationKeys.length; _i < _length; _i++) {
      var key = destinationKeys[_i];
      current[key] = getItemConfigByKey(actionTypeId, key, fromActionItem.config);
    } else if (fromActionItem && toActionItem && void 0 !== positionOffset && void 0 !== positionRange) for (var localPosition = (position - positionOffset) / positionRange, easing = fromActionItem.config.easing, eased = applyEasing(easing, localPosition, customEasingFn), _i2 = 0, _length2 = destinationKeys.length; _i2 < _length2; _i2++) {
      var _key = destinationKeys[_i2],
          fromVal = getItemConfigByKey(actionTypeId, _key, fromActionItem.config),
          value = (getItemConfigByKey(actionTypeId, _key, toActionItem.config) - fromVal) * eased + fromVal;
      current[_key] = value;
    }
    return (0, _timm.merge)(state, {
      position: position,
      current: current
    });
  },
      timedInstance = function (state, action) {
    var _state = state,
        active = _state.active,
        origin = _state.origin,
        start = _state.start,
        immediate = _state.immediate,
        renderType = _state.renderType,
        verbose = _state.verbose,
        actionItem = _state.actionItem,
        destination = _state.destination,
        destinationKeys = _state.destinationKeys,
        pluginDuration = _state.pluginDuration,
        instanceDelay = _state.instanceDelay,
        customEasingFn = _state.customEasingFn,
        easing = actionItem.config.easing,
        _actionItem$config = actionItem.config,
        duration = _actionItem$config.duration,
        delay = _actionItem$config.delay;
    null != pluginDuration && (duration = pluginDuration), delay = null != instanceDelay ? instanceDelay : delay, renderType === RENDER_GENERAL ? duration = 0 : immediate && (duration = delay = 0);
    var now = action.payload.now;

    if (active && origin) {
      var delta = now - (start + delay);

      if (verbose) {
        var verboseDelta = now - start,
            verboseDuration = duration + delay,
            verbosePosition = optimizeFloat(Math.min(Math.max(0, verboseDelta / verboseDuration), 1));
        state = (0, _timm.set)(state, "verboseTimeElapsed", verboseDuration * verbosePosition);
      }

      if (delta < 0) return state;
      var position = optimizeFloat(Math.min(Math.max(0, delta / duration), 1)),
          eased = applyEasing(easing, position, customEasingFn),
          newProps = {},
          current = null;
      return destinationKeys.length && (current = destinationKeys.reduce(function (result, key) {
        var destValue = destination[key],
            originVal = parseFloat(origin[key]) || 0,
            value = (parseFloat(destValue) - originVal) * eased + originVal;
        return result[key] = value, result;
      }, {})), newProps.current = current, newProps.position = position, 1 === position && (newProps.active = !1, newProps.complete = !0), (0, _timm.merge)(state, newProps);
    }

    return state;
  };

  exports.ixInstances = function () {
    var state = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Object.freeze({}),
        action = arguments.length > 1 ? arguments[1] : void 0;

    switch (action.type) {
      case IX2_RAW_DATA_IMPORTED:
        return action.payload.ixInstances || Object.freeze({});

      case IX2_SESSION_STOPPED:
        return Object.freeze({});

      case IX2_INSTANCE_ADDED:
        var _action$payload = action.payload,
            instanceId = _action$payload.instanceId,
            elementId = _action$payload.elementId,
            actionItem = _action$payload.actionItem,
            eventId = _action$payload.eventId,
            eventTarget = _action$payload.eventTarget,
            eventStateKey = _action$payload.eventStateKey,
            actionListId = _action$payload.actionListId,
            groupIndex = _action$payload.groupIndex,
            isCarrier = _action$payload.isCarrier,
            origin = _action$payload.origin,
            destination = _action$payload.destination,
            immediate = _action$payload.immediate,
            verbose = _action$payload.verbose,
            continuous = _action$payload.continuous,
            parameterId = _action$payload.parameterId,
            actionGroups = _action$payload.actionGroups,
            smoothing = _action$payload.smoothing,
            restingValue = _action$payload.restingValue,
            pluginInstance = _action$payload.pluginInstance,
            pluginDuration = _action$payload.pluginDuration,
            instanceDelay = _action$payload.instanceDelay,
            actionTypeId = actionItem.actionTypeId,
            renderType = getRenderType(actionTypeId),
            styleProp = getStyleProp(renderType, actionTypeId),
            destinationKeys = Object.keys(destination).filter(function (key) {
          return null != destination[key];
        }),
            easing = actionItem.config.easing;
        return (0, _timm.set)(state, instanceId, {
          id: instanceId,
          elementId: elementId,
          active: !1,
          position: 0,
          start: 0,
          origin: origin,
          destination: destination,
          destinationKeys: destinationKeys,
          immediate: immediate,
          verbose: verbose,
          current: null,
          actionItem: actionItem,
          actionTypeId: actionTypeId,
          eventId: eventId,
          eventTarget: eventTarget,
          eventStateKey: eventStateKey,
          actionListId: actionListId,
          groupIndex: groupIndex,
          renderType: renderType,
          isCarrier: isCarrier,
          styleProp: styleProp,
          continuous: continuous,
          parameterId: parameterId,
          actionGroups: actionGroups,
          smoothing: smoothing,
          restingValue: restingValue,
          pluginInstance: pluginInstance,
          pluginDuration: pluginDuration,
          instanceDelay: instanceDelay,
          customEasingFn: Array.isArray(easing) && 4 === easing.length ? createBezierEasing(easing) : void 0
        });

      case IX2_INSTANCE_STARTED:
        var _action$payload2 = action.payload,
            _instanceId = _action$payload2.instanceId,
            time = _action$payload2.time;
        return (0, _timm.mergeIn)(state, [_instanceId], {
          active: !0,
          complete: !1,
          start: time
        });

      case IX2_INSTANCE_REMOVED:
        var _instanceId2 = action.payload.instanceId;
        if (!state[_instanceId2]) return state;

        for (var newState = {}, keys = Object.keys(state), length = keys.length, i = 0; i < length; i++) {
          var key = keys[i];
          key !== _instanceId2 && (newState[key] = state[key]);
        }

        return newState;

      case IX2_ANIMATION_FRAME_CHANGED:
        for (var _newState = state, _keys = Object.keys(state), _length3 = _keys.length, _i3 = 0; _i3 < _length3; _i3++) {
          var _key2 = _keys[_i3],
              instance = state[_key2],
              reducer = instance.continuous ? continuousInstance : timedInstance;
          _newState = (0, _timm.set)(_newState, _key2, reducer(instance, action));
        }

        return _newState;

      default:
        return state;
    }
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.ixParameters = void 0;

  var _constants$IX2EngineA = __webpack_require__(2).IX2EngineActionTypes,
      IX2_RAW_DATA_IMPORTED = _constants$IX2EngineA.IX2_RAW_DATA_IMPORTED,
      IX2_SESSION_STOPPED = _constants$IX2EngineA.IX2_SESSION_STOPPED,
      IX2_PARAMETER_CHANGED = _constants$IX2EngineA.IX2_PARAMETER_CHANGED;

  exports.ixParameters = function () {
    var state = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
        action = arguments.length > 1 ? arguments[1] : void 0;

    switch (action.type) {
      case IX2_RAW_DATA_IMPORTED:
        return action.payload.ixParameters || {};

      case IX2_SESSION_STOPPED:
        return {};

      case IX2_PARAMETER_CHANGED:
        var _action$payload = action.payload,
            key = _action$payload.key,
            value = _action$payload.value;
        return state[key] = value, state;

      default:
        return state;
    }
  };
}, function (module, exports) {
  module.exports = function (source, excluded) {
    if (null == source) return {};
    var key,
        i,
        target = {},
        sourceKeys = Object.keys(source);

    for (i = 0; i < sourceKeys.length; i++) key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);

    return target;
  };
}, function (module, exports, __webpack_require__) {
  var baseKeys = __webpack_require__(40),
      getTag = __webpack_require__(42),
      isArrayLike = __webpack_require__(10),
      isString = __webpack_require__(210),
      stringSize = __webpack_require__(211);

  module.exports = function (collection) {
    if (null == collection) return 0;
    if (isArrayLike(collection)) return isString(collection) ? stringSize(collection) : collection.length;
    var tag = getTag(collection);
    return "[object Map]" == tag || "[object Set]" == tag ? collection.size : baseKeys(collection).length;
  };
}, function (module, exports, __webpack_require__) {
  var baseGetTag = __webpack_require__(9),
      isArray = __webpack_require__(1),
      isObjectLike = __webpack_require__(7);

  module.exports = function (value) {
    return "string" == typeof value || !isArray(value) && isObjectLike(value) && "[object String]" == baseGetTag(value);
  };
}, function (module, exports, __webpack_require__) {
  var asciiSize = __webpack_require__(212),
      hasUnicode = __webpack_require__(213),
      unicodeSize = __webpack_require__(214);

  module.exports = function (string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
  };
}, function (module, exports, __webpack_require__) {
  var asciiSize = __webpack_require__(80)("length");

  module.exports = asciiSize;
}, function (module, exports) {
  var reHasUnicode = RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");

  module.exports = function (string) {
    return reHasUnicode.test(string);
  };
}, function (module, exports) {
  var rsCombo = "[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",
      rsFitz = "\\ud83c[\\udffb-\\udfff]",
      rsNonAstral = "[^\\ud800-\\udfff]",
      rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      reOptMod = "(?:" + rsCombo + "|" + rsFitz + ")?",
      rsSeq = "[\\ufe0e\\ufe0f]?" + reOptMod + "(?:\\u200d(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")[\\ufe0e\\ufe0f]?" + reOptMod + ")*",
      rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, "[\\ud800-\\udfff]"].join("|") + ")",
      reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");

  module.exports = function (string) {
    for (var result = reUnicode.lastIndex = 0; reUnicode.test(string);) ++result;

    return result;
  };
}, function (module, exports, __webpack_require__) {
  var baseIteratee = __webpack_require__(5),
      negate = __webpack_require__(216),
      pickBy = __webpack_require__(217);

  module.exports = function (object, predicate) {
    return pickBy(object, negate(baseIteratee(predicate)));
  };
}, function (module, exports) {
  module.exports = function (predicate) {
    if ("function" != typeof predicate) throw new TypeError("Expected a function");
    return function () {
      var args = arguments;

      switch (args.length) {
        case 0:
          return !predicate.call(this);

        case 1:
          return !predicate.call(this, args[0]);

        case 2:
          return !predicate.call(this, args[0], args[1]);

        case 3:
          return !predicate.call(this, args[0], args[1], args[2]);
      }

      return !predicate.apply(this, args);
    };
  };
}, function (module, exports, __webpack_require__) {
  var arrayMap = __webpack_require__(79),
      baseIteratee = __webpack_require__(5),
      basePickBy = __webpack_require__(218),
      getAllKeysIn = __webpack_require__(221);

  module.exports = function (object, predicate) {
    if (null == object) return {};
    var props = arrayMap(getAllKeysIn(object), function (prop) {
      return [prop];
    });
    return predicate = baseIteratee(predicate), basePickBy(object, props, function (value, path) {
      return predicate(value, path[0]);
    });
  };
}, function (module, exports, __webpack_require__) {
  var baseGet = __webpack_require__(43),
      baseSet = __webpack_require__(219),
      castPath = __webpack_require__(26);

  module.exports = function (object, paths, predicate) {
    for (var index = -1, length = paths.length, result = {}; ++index < length;) {
      var path = paths[index],
          value = baseGet(object, path);
      predicate(value, path) && baseSet(result, castPath(path, object), value);
    }

    return result;
  };
}, function (module, exports, __webpack_require__) {
  var assignValue = __webpack_require__(220),
      castPath = __webpack_require__(26),
      isIndex = __webpack_require__(37),
      isObject = __webpack_require__(4),
      toKey = __webpack_require__(15);

  module.exports = function (object, path, value, customizer) {
    if (!isObject(object)) return object;

    for (var index = -1, length = (path = castPath(path, object)).length, lastIndex = length - 1, nested = object; null != nested && ++index < length;) {
      var key = toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        void 0 === (newValue = customizer ? customizer(objValue, key, nested) : void 0) && (newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {});
      }

      assignValue(nested, key, newValue), nested = nested[key];
    }

    return object;
  };
}, function (module, exports, __webpack_require__) {
  var baseAssignValue = __webpack_require__(91),
      eq = __webpack_require__(32),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (object, key, value) {
    var objValue = object[key];
    hasOwnProperty.call(object, key) && eq(objValue, value) && (void 0 !== value || key in object) || baseAssignValue(object, key, value);
  };
}, function (module, exports, __webpack_require__) {
  var baseGetAllKeys = __webpack_require__(68),
      getSymbolsIn = __webpack_require__(222),
      keysIn = __webpack_require__(224);

  module.exports = function (object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  };
}, function (module, exports, __webpack_require__) {
  var arrayPush = __webpack_require__(35),
      getPrototype = __webpack_require__(223),
      getSymbols = __webpack_require__(69),
      stubArray = __webpack_require__(70),
      getSymbolsIn = Object.getOwnPropertySymbols ? function (object) {
    for (var result = []; object;) arrayPush(result, getSymbols(object)), object = getPrototype(object);

    return result;
  } : stubArray;

  module.exports = getSymbolsIn;
}, function (module, exports, __webpack_require__) {
  var getPrototype = __webpack_require__(73)(Object.getPrototypeOf, Object);

  module.exports = getPrototype;
}, function (module, exports, __webpack_require__) {
  var arrayLikeKeys = __webpack_require__(71),
      baseKeysIn = __webpack_require__(225),
      isArrayLike = __webpack_require__(10);

  module.exports = function (object) {
    return isArrayLike(object) ? arrayLikeKeys(object, !0) : baseKeysIn(object);
  };
}, function (module, exports, __webpack_require__) {
  var isObject = __webpack_require__(4),
      isPrototype = __webpack_require__(41),
      nativeKeysIn = __webpack_require__(226),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (object) {
    if (!isObject(object)) return nativeKeysIn(object);
    var isProto = isPrototype(object),
        result = [];

    for (var key in object) ("constructor" != key || !isProto && hasOwnProperty.call(object, key)) && result.push(key);

    return result;
  };
}, function (module, exports) {
  module.exports = function (object) {
    var result = [];
    if (null != object) for (var key in Object(object)) result.push(key);
    return result;
  };
}, function (module, exports, __webpack_require__) {
  var baseKeys = __webpack_require__(40),
      getTag = __webpack_require__(42),
      isArguments = __webpack_require__(24),
      isArray = __webpack_require__(1),
      isArrayLike = __webpack_require__(10),
      isBuffer = __webpack_require__(36),
      isPrototype = __webpack_require__(41),
      isTypedArray = __webpack_require__(38),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  module.exports = function (value) {
    if (null == value) return !0;
    if (isArrayLike(value) && (isArray(value) || "string" == typeof value || "function" == typeof value.splice || isBuffer(value) || isTypedArray(value) || isArguments(value))) return !value.length;
    var tag = getTag(value);
    if ("[object Map]" == tag || "[object Set]" == tag) return !value.size;
    if (isPrototype(value)) return !baseKeys(value).length;

    for (var key in value) if (hasOwnProperty.call(value, key)) return !1;

    return !0;
  };
}, function (module, exports, __webpack_require__) {
  var baseAssignValue = __webpack_require__(91),
      baseForOwn = __webpack_require__(88),
      baseIteratee = __webpack_require__(5);

  module.exports = function (object, iteratee) {
    var result = {};
    return iteratee = baseIteratee(iteratee, 3), baseForOwn(object, function (value, key, object) {
      baseAssignValue(result, key, iteratee(value, key, object));
    }), result;
  };
}, function (module, exports, __webpack_require__) {
  var arrayEach = __webpack_require__(230),
      baseEach = __webpack_require__(87),
      castFunction = __webpack_require__(231),
      isArray = __webpack_require__(1);

  module.exports = function (collection, iteratee) {
    return (isArray(collection) ? arrayEach : baseEach)(collection, castFunction(iteratee));
  };
}, function (module, exports) {
  module.exports = function (array, iteratee) {
    for (var index = -1, length = null == array ? 0 : array.length; ++index < length && !1 !== iteratee(array[index], index, array););

    return array;
  };
}, function (module, exports, __webpack_require__) {
  var identity = __webpack_require__(45);

  module.exports = function (value) {
    return "function" == typeof value ? value : identity;
  };
}, function (module, exports, __webpack_require__) {
  var baseClamp = __webpack_require__(93),
      baseToString = __webpack_require__(78),
      toInteger = __webpack_require__(46),
      toString = __webpack_require__(77);

  module.exports = function (string, target, position) {
    string = toString(string), target = baseToString(target);
    var length = string.length,
        end = position = void 0 === position ? length : baseClamp(toInteger(position), 0, length);
    return (position -= target.length) >= 0 && string.slice(position, end) == target;
  };
}, function (module, exports, __webpack_require__) {
  var debounce = __webpack_require__(234),
      isObject = __webpack_require__(4);

  module.exports = function (func, wait, options) {
    var leading = !0,
        trailing = !0;
    if ("function" != typeof func) throw new TypeError("Expected a function");
    return isObject(options) && (leading = "leading" in options ? !!options.leading : leading, trailing = "trailing" in options ? !!options.trailing : trailing), debounce(func, wait, {
      leading: leading,
      maxWait: wait,
      trailing: trailing
    });
  };
}, function (module, exports, __webpack_require__) {
  var isObject = __webpack_require__(4),
      now = __webpack_require__(235),
      toNumber = __webpack_require__(47),
      nativeMax = Math.max,
      nativeMin = Math.min;

  module.exports = function (func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = !1,
        maxing = !1,
        trailing = !0;
    if ("function" != typeof func) throw new TypeError("Expected a function");

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;
      return lastArgs = lastThis = void 0, lastInvokeTime = time, result = func.apply(thisArg, args);
    }

    function leadingEdge(time) {
      return lastInvokeTime = time, timerId = setTimeout(timerExpired, wait), leading ? invokeFunc(time) : result;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime;
      return void 0 === lastCallTime || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && time - lastInvokeTime >= maxWait;
    }

    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) return trailingEdge(time);
      timerId = setTimeout(timerExpired, function (time) {
        var timeWaiting = wait - (time - lastCallTime);
        return maxing ? nativeMin(timeWaiting, maxWait - (time - lastInvokeTime)) : timeWaiting;
      }(time));
    }

    function trailingEdge(time) {
      return timerId = void 0, trailing && lastArgs ? invokeFunc(time) : (lastArgs = lastThis = void 0, result);
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);

      if (lastArgs = arguments, lastThis = this, lastCallTime = time, isInvoking) {
        if (void 0 === timerId) return leadingEdge(lastCallTime);
        if (maxing) return clearTimeout(timerId), timerId = setTimeout(timerExpired, wait), invokeFunc(lastCallTime);
      }

      return void 0 === timerId && (timerId = setTimeout(timerExpired, wait)), result;
    }

    return wait = toNumber(wait) || 0, isObject(options) && (leading = !!options.leading, maxWait = (maxing = "maxWait" in options) ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait, trailing = "trailing" in options ? !!options.trailing : trailing), debounced.cancel = function () {
      void 0 !== timerId && clearTimeout(timerId), lastInvokeTime = 0, lastArgs = lastCallTime = lastThis = timerId = void 0;
    }, debounced.flush = function () {
      return void 0 === timerId ? result : trailingEdge(now());
    }, debounced;
  };
}, function (module, exports, __webpack_require__) {
  var root = __webpack_require__(3);

  module.exports = function () {
    return root.Date.now();
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _typeof2 = __webpack_require__(0)(__webpack_require__(16));

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.setStyle = function (element, prop, value) {
    element.style[prop] = value;
  }, exports.getStyle = function (element, prop) {
    return element.style[prop];
  }, exports.getProperty = function (element, prop) {
    return element[prop];
  }, exports.matchSelector = function (selector) {
    return function (element) {
      return element[ELEMENT_MATCHES](selector);
    };
  }, exports.getQuerySelector = function (_ref) {
    var id = _ref.id,
        selector = _ref.selector;

    if (id) {
      var nodeId = id;

      if (-1 !== id.indexOf(IX2_ID_DELIMITER)) {
        var pair = id.split(IX2_ID_DELIMITER),
            pageId = pair[0];
        if (nodeId = pair[1], pageId !== document.documentElement.getAttribute(WF_PAGE)) return null;
      }

      return '[data-w-id^="'.concat(nodeId, '"]');
    }

    return selector;
  }, exports.getValidDocument = function (pageId) {
    return null == pageId || pageId === document.documentElement.getAttribute(WF_PAGE) ? document : null;
  }, exports.queryDocument = function (baseSelector, descendantSelector) {
    return Array.prototype.slice.call(document.querySelectorAll(descendantSelector ? baseSelector + " " + descendantSelector : baseSelector));
  }, exports.elementContains = function (parent, child) {
    return parent.contains(child);
  }, exports.isSiblingNode = function (a, b) {
    return a !== b && a.parentNode === b.parentNode;
  }, exports.getChildElements = function (sourceElements) {
    for (var childElements = [], i = 0, length = (sourceElements || []).length; i < length; i++) {
      var children = sourceElements[i].children,
          childCount = children.length;
      if (childCount) for (var j = 0; j < childCount; j++) childElements.push(children[j]);
    }

    return childElements;
  }, exports.getSiblingElements = function () {
    for (var sourceElements = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], elements = [], parentCache = [], i = 0, length = sourceElements.length; i < length; i++) {
      var parentNode = sourceElements[i].parentNode;

      if (parentNode && parentNode.children && parentNode.children.length && -1 === parentCache.indexOf(parentNode)) {
        parentCache.push(parentNode);

        for (var el = parentNode.firstElementChild; null != el;) -1 === sourceElements.indexOf(el) && elements.push(el), el = el.nextElementSibling;
      }
    }

    return elements;
  }, exports.getRefType = function (ref) {
    return null != ref && "object" == (0, _typeof2.default)(ref) ? ref instanceof Element ? HTML_ELEMENT : PLAIN_OBJECT : null;
  }, exports.getClosestElement = void 0;

  var _shared = __webpack_require__(8),
      _constants = __webpack_require__(2),
      ELEMENT_MATCHES = _shared.IX2BrowserSupport.ELEMENT_MATCHES,
      _constants$IX2EngineC = _constants.IX2EngineConstants,
      IX2_ID_DELIMITER = _constants$IX2EngineC.IX2_ID_DELIMITER,
      HTML_ELEMENT = _constants$IX2EngineC.HTML_ELEMENT,
      PLAIN_OBJECT = _constants$IX2EngineC.PLAIN_OBJECT,
      WF_PAGE = _constants$IX2EngineC.WF_PAGE,
      getClosestElement = Element.prototype.closest ? function (element, selector) {
    return document.documentElement.contains(element) ? element.closest(selector) : null;
  } : function (element, selector) {
    if (!document.documentElement.contains(element)) return null;
    var el = element;

    do {
      if (el[ELEMENT_MATCHES] && el[ELEMENT_MATCHES](selector)) return el;
      el = el.parentNode;
    } while (null != el);

    return null;
  };

  exports.getClosestElement = getClosestElement;
}, function (module, exports, __webpack_require__) {
  "use strict";

  var _default2,
      _interopRequireDefault2 = __webpack_require__(0),
      _defineProperty2 = _interopRequireDefault2(__webpack_require__(17)),
      _typeof2 = _interopRequireDefault2(__webpack_require__(16)),
      _interopRequireDefault = __webpack_require__(0);

  Object.defineProperty(exports, "__esModule", {
    value: !0
  }), exports.default = void 0;

  var supportOffset,
      rootElement,
      handler,
      _extends2 = _interopRequireDefault(__webpack_require__(18)),
      _flow = _interopRequireDefault(__webpack_require__(238)),
      _get = _interopRequireDefault(__webpack_require__(25)),
      _clamp = _interopRequireDefault(__webpack_require__(257)),
      _constants = __webpack_require__(2),
      _IX2VanillaEngine = __webpack_require__(90),
      _IX2EngineActions = __webpack_require__(48),
      _shared = __webpack_require__(8),
      _constants$EventTypeC = _constants.EventTypeConsts,
      MOUSE_CLICK = _constants$EventTypeC.MOUSE_CLICK,
      MOUSE_SECOND_CLICK = _constants$EventTypeC.MOUSE_SECOND_CLICK,
      MOUSE_DOWN = _constants$EventTypeC.MOUSE_DOWN,
      MOUSE_UP = _constants$EventTypeC.MOUSE_UP,
      MOUSE_OVER = _constants$EventTypeC.MOUSE_OVER,
      MOUSE_OUT = _constants$EventTypeC.MOUSE_OUT,
      DROPDOWN_CLOSE = _constants$EventTypeC.DROPDOWN_CLOSE,
      DROPDOWN_OPEN = _constants$EventTypeC.DROPDOWN_OPEN,
      SLIDER_ACTIVE = _constants$EventTypeC.SLIDER_ACTIVE,
      SLIDER_INACTIVE = _constants$EventTypeC.SLIDER_INACTIVE,
      TAB_ACTIVE = _constants$EventTypeC.TAB_ACTIVE,
      TAB_INACTIVE = _constants$EventTypeC.TAB_INACTIVE,
      NAVBAR_CLOSE = _constants$EventTypeC.NAVBAR_CLOSE,
      NAVBAR_OPEN = _constants$EventTypeC.NAVBAR_OPEN,
      MOUSE_MOVE = _constants$EventTypeC.MOUSE_MOVE,
      PAGE_SCROLL_DOWN = _constants$EventTypeC.PAGE_SCROLL_DOWN,
      SCROLL_INTO_VIEW = _constants$EventTypeC.SCROLL_INTO_VIEW,
      SCROLL_OUT_OF_VIEW = _constants$EventTypeC.SCROLL_OUT_OF_VIEW,
      PAGE_SCROLL_UP = _constants$EventTypeC.PAGE_SCROLL_UP,
      SCROLLING_IN_VIEW = _constants$EventTypeC.SCROLLING_IN_VIEW,
      PAGE_FINISH = _constants$EventTypeC.PAGE_FINISH,
      ECOMMERCE_CART_CLOSE = _constants$EventTypeC.ECOMMERCE_CART_CLOSE,
      ECOMMERCE_CART_OPEN = _constants$EventTypeC.ECOMMERCE_CART_OPEN,
      PAGE_START = _constants$EventTypeC.PAGE_START,
      PAGE_SCROLL = _constants$EventTypeC.PAGE_SCROLL,
      COMPONENT_ACTIVE = "COMPONENT_ACTIVE",
      COMPONENT_INACTIVE = "COMPONENT_INACTIVE",
      COLON_DELIMITER = _constants.IX2EngineConstants.COLON_DELIMITER,
      getNamespacedParameterId = _shared.IX2VanillaUtils.getNamespacedParameterId,
      composableFilter = function (predicate) {
    return function (options) {
      return !("object" !== (0, _typeof2.default)(options) || !predicate(options)) || options;
    };
  },
      isElement = composableFilter(function (_ref) {
    return _ref.element === _ref.nativeEvent.target;
  }),
      containsElement = composableFilter(function (_ref2) {
    var element = _ref2.element,
        nativeEvent = _ref2.nativeEvent;
    return element.contains(nativeEvent.target);
  }),
      isOrContainsElement = (0, _flow.default)([isElement, containsElement]),
      getAutoStopEvent = function (store, autoStopEventId) {
    if (autoStopEventId) {
      var eventToStop = store.getState().ixData.events[autoStopEventId];
      if (eventToStop && !AUTO_STOP_DISABLED_EVENTS[eventToStop.eventTypeId]) return eventToStop;
    }

    return null;
  },
      actionGroupCreator = function (_ref4, state) {
    var store = _ref4.store,
        event = _ref4.event,
        element = _ref4.element,
        eventStateKey = _ref4.eventStateKey,
        eventAction = event.action,
        eventId = event.id,
        _eventAction$config = eventAction.config,
        actionListId = _eventAction$config.actionListId,
        autoStopEventId = _eventAction$config.autoStopEventId,
        eventToStop = getAutoStopEvent(store, autoStopEventId);
    return eventToStop && (0, _IX2VanillaEngine.stopActionGroup)({
      store: store,
      eventId: autoStopEventId,
      eventTarget: element,
      eventStateKey: autoStopEventId + COLON_DELIMITER + eventStateKey.split(COLON_DELIMITER)[1],
      actionListId: (0, _get.default)(eventToStop, "action.config.actionListId")
    }), (0, _IX2VanillaEngine.stopActionGroup)({
      store: store,
      eventId: eventId,
      eventTarget: element,
      eventStateKey: eventStateKey,
      actionListId: actionListId
    }), (0, _IX2VanillaEngine.startActionGroup)({
      store: store,
      eventId: eventId,
      eventTarget: element,
      eventStateKey: eventStateKey,
      actionListId: actionListId
    }), state;
  },
      withFilter = function (filter, handler) {
    return function (options, state) {
      return !0 === filter(options, state) ? handler(options, state) : state;
    };
  },
      baseActionGroupOptions = {
    handler: withFilter(isOrContainsElement, actionGroupCreator)
  },
      baseActivityActionGroupOptions = (0, _extends2.default)({}, baseActionGroupOptions, {
    types: [COMPONENT_ACTIVE, COMPONENT_INACTIVE].join(" ")
  }),
      SCROLL_EVENT_TYPES = [{
    target: window,
    types: "resize orientationchange",
    throttle: !0
  }, {
    target: document,
    types: "scroll wheel readystatechange IX2_PAGE_UPDATE",
    throttle: !0
  }],
      baseScrollActionGroupOptions = {
    types: SCROLL_EVENT_TYPES
  },
      AUTO_STOP_DISABLED_EVENTS = {
    PAGE_START: PAGE_START,
    PAGE_FINISH: PAGE_FINISH
  },
      getDocumentState = (supportOffset = void 0 !== window.pageXOffset, rootElement = "CSS1Compat" === document.compatMode ? document.documentElement : document.body, function () {
    return {
      scrollLeft: supportOffset ? window.pageXOffset : rootElement.scrollLeft,
      scrollTop: supportOffset ? window.pageYOffset : rootElement.scrollTop,
      stiffScrollTop: (0, _clamp.default)(supportOffset ? window.pageYOffset : rootElement.scrollTop, 0, rootElement.scrollHeight - window.innerHeight),
      scrollWidth: rootElement.scrollWidth,
      scrollHeight: rootElement.scrollHeight,
      clientWidth: rootElement.clientWidth,
      clientHeight: rootElement.clientHeight,
      innerWidth: window.innerWidth,
      innerHeight: window.innerHeight
    };
  }),
      isElementHovered = function (_ref5) {
    var element = _ref5.element,
        nativeEvent = _ref5.nativeEvent,
        type = nativeEvent.type,
        target = nativeEvent.target,
        relatedTarget = nativeEvent.relatedTarget,
        containsTarget = element.contains(target);
    if ("mouseover" === type && containsTarget) return !0;
    var containsRelated = element.contains(relatedTarget);
    return !("mouseout" !== type || !containsTarget || !containsRelated);
  },
      isElementVisible = function (options) {
    var a,
        b,
        element = options.element,
        config = options.event.config,
        _getDocumentState = getDocumentState(),
        clientWidth = _getDocumentState.clientWidth,
        clientHeight = _getDocumentState.clientHeight,
        scrollOffsetValue = config.scrollOffsetValue,
        offsetPadding = "PX" === config.scrollOffsetUnit ? scrollOffsetValue : clientHeight * (scrollOffsetValue || 0) / 100;

    return b = {
      left: 0,
      top: offsetPadding,
      right: clientWidth,
      bottom: clientHeight - offsetPadding
    }, !((a = element.getBoundingClientRect()).left > b.right || a.right < b.left || a.top > b.bottom || a.bottom < b.top);
  },
      whenComponentActiveChange = function (handler) {
    return function (options, oldState) {
      var type = options.nativeEvent.type,
          isActive = -1 !== [COMPONENT_ACTIVE, COMPONENT_INACTIVE].indexOf(type) ? type === COMPONENT_ACTIVE : oldState.isActive,
          newState = (0, _extends2.default)({}, oldState, {
        isActive: isActive
      });
      return oldState && newState.isActive === oldState.isActive ? newState : handler(options, newState) || newState;
    };
  },
      whenElementHoverChange = function (handler) {
    return function (options, oldState) {
      var newState = {
        elementHovered: isElementHovered(options)
      };
      return (oldState ? newState.elementHovered !== oldState.elementHovered : newState.elementHovered) && handler(options, newState) || newState;
    };
  },
      whenScrollDirectionChange = function (handler) {
    return function (options) {
      var oldState = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          _getDocumentState2 = getDocumentState(),
          scrollTop = _getDocumentState2.stiffScrollTop,
          scrollHeight = _getDocumentState2.scrollHeight,
          innerHeight = _getDocumentState2.innerHeight,
          _options$event = options.event,
          config = _options$event.config,
          eventTypeId = _options$event.eventTypeId,
          scrollOffsetValue = config.scrollOffsetValue,
          scrollOffsetUnit = config.scrollOffsetUnit,
          isPX = "PX" === scrollOffsetUnit,
          scrollHeightBounds = scrollHeight - innerHeight,
          percentTop = Number((scrollTop / scrollHeightBounds).toFixed(2));

      if (oldState && oldState.percentTop === percentTop) return oldState;
      var scrollingDown,
          scrollDirectionChanged,
          scrollTopPadding = (isPX ? scrollOffsetValue : innerHeight * (scrollOffsetValue || 0) / 100) / scrollHeightBounds,
          anchorTop = 0;
      oldState && (scrollingDown = percentTop > oldState.percentTop, anchorTop = (scrollDirectionChanged = oldState.scrollingDown !== scrollingDown) ? percentTop : oldState.anchorTop);
      var inBounds = eventTypeId === PAGE_SCROLL_DOWN ? percentTop >= anchorTop + scrollTopPadding : percentTop <= anchorTop - scrollTopPadding,
          newState = (0, _extends2.default)({}, oldState, {
        percentTop: percentTop,
        inBounds: inBounds,
        anchorTop: anchorTop,
        scrollingDown: scrollingDown
      });
      return oldState && inBounds && (scrollDirectionChanged || newState.inBounds !== oldState.inBounds) && handler(options, newState) || newState;
    };
  },
      pointIntersects = function (point, rect) {
    return point.left > rect.left && point.left < rect.right && point.top > rect.top && point.top < rect.bottom;
  },
      whenClickCountChange = function (handler) {
    return function (options) {
      var oldState = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        clickCount: 0
      },
          newState = {
        clickCount: oldState.clickCount % 2 + 1
      };
      return newState.clickCount !== oldState.clickCount && handler(options, newState) || newState;
    };
  },
      getComponentActiveOptions = function () {
    var allowNestedChildrenEvents = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
    return (0, _extends2.default)({}, baseActivityActionGroupOptions, {
      handler: withFilter(allowNestedChildrenEvents ? isOrContainsElement : isElement, whenComponentActiveChange(function (options, state) {
        return state.isActive ? baseActionGroupOptions.handler(options, state) : state;
      }))
    });
  },
      getComponentInactiveOptions = function () {
    var allowNestedChildrenEvents = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
    return (0, _extends2.default)({}, baseActivityActionGroupOptions, {
      handler: withFilter(allowNestedChildrenEvents ? isOrContainsElement : isElement, whenComponentActiveChange(function (options, state) {
        return state.isActive ? state : baseActionGroupOptions.handler(options, state);
      }))
    });
  },
      scrollIntoOutOfViewOptions = (0, _extends2.default)({}, baseScrollActionGroupOptions, {
    handler: (handler = function (options, state) {
      var elementVisible = state.elementVisible,
          event = options.event;
      return !options.store.getState().ixData.events[event.action.config.autoStopEventId] && state.triggered ? state : event.eventTypeId === SCROLL_INTO_VIEW === elementVisible ? (actionGroupCreator(options), (0, _extends2.default)({}, state, {
        triggered: !0
      })) : state;
    }, function (options, oldState) {
      var newState = (0, _extends2.default)({}, oldState, {
        elementVisible: isElementVisible(options)
      });
      return (oldState ? newState.elementVisible !== oldState.elementVisible : newState.elementVisible) && handler(options, newState) || newState;
    })
  }),
      _default = (_default2 = {}, (0, _defineProperty2.default)(_default2, SLIDER_ACTIVE, getComponentActiveOptions()), (0, _defineProperty2.default)(_default2, SLIDER_INACTIVE, getComponentInactiveOptions()), (0, _defineProperty2.default)(_default2, DROPDOWN_OPEN, getComponentActiveOptions()), (0, _defineProperty2.default)(_default2, DROPDOWN_CLOSE, getComponentInactiveOptions()), (0, _defineProperty2.default)(_default2, NAVBAR_OPEN, getComponentActiveOptions(!1)), (0, _defineProperty2.default)(_default2, NAVBAR_CLOSE, getComponentInactiveOptions(!1)), (0, _defineProperty2.default)(_default2, TAB_ACTIVE, getComponentActiveOptions()), (0, _defineProperty2.default)(_default2, TAB_INACTIVE, getComponentInactiveOptions()), (0, _defineProperty2.default)(_default2, ECOMMERCE_CART_OPEN, {
    types: "ecommerce-cart-open",
    handler: withFilter(isOrContainsElement, actionGroupCreator)
  }), (0, _defineProperty2.default)(_default2, ECOMMERCE_CART_CLOSE, {
    types: "ecommerce-cart-close",
    handler: withFilter(isOrContainsElement, actionGroupCreator)
  }), (0, _defineProperty2.default)(_default2, MOUSE_CLICK, {
    types: "click",
    handler: withFilter(isOrContainsElement, whenClickCountChange(function (options, _ref6) {
      var _ref3,
          store,
          autoStopEventId,
          clickCount = _ref6.clickCount;

      store = (_ref3 = options).store, autoStopEventId = _ref3.event.action.config.autoStopEventId, Boolean(getAutoStopEvent(store, autoStopEventId)) ? 1 === clickCount && actionGroupCreator(options) : actionGroupCreator(options);
    }))
  }), (0, _defineProperty2.default)(_default2, MOUSE_SECOND_CLICK, {
    types: "click",
    handler: withFilter(isOrContainsElement, whenClickCountChange(function (options, _ref7) {
      2 === _ref7.clickCount && actionGroupCreator(options);
    }))
  }), (0, _defineProperty2.default)(_default2, MOUSE_DOWN, (0, _extends2.default)({}, baseActionGroupOptions, {
    types: "mousedown"
  })), (0, _defineProperty2.default)(_default2, MOUSE_UP, (0, _extends2.default)({}, baseActionGroupOptions, {
    types: "mouseup"
  })), (0, _defineProperty2.default)(_default2, MOUSE_OVER, {
    types: "mouseover mouseout",
    handler: withFilter(isOrContainsElement, whenElementHoverChange(function (options, state) {
      state.elementHovered && actionGroupCreator(options);
    }))
  }), (0, _defineProperty2.default)(_default2, MOUSE_OUT, {
    types: "mouseover mouseout",
    handler: withFilter(isOrContainsElement, whenElementHoverChange(function (options, state) {
      state.elementHovered || actionGroupCreator(options);
    }))
  }), (0, _defineProperty2.default)(_default2, MOUSE_MOVE, {
    types: "mousemove mouseout scroll",
    handler: function (_ref8) {
      var store = _ref8.store,
          element = _ref8.element,
          eventConfig = _ref8.eventConfig,
          nativeEvent = _ref8.nativeEvent,
          eventStateKey = _ref8.eventStateKey,
          state = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0
      },
          basedOn = eventConfig.basedOn,
          selectedAxis = eventConfig.selectedAxis,
          continuousParameterGroupId = eventConfig.continuousParameterGroupId,
          reverse = eventConfig.reverse,
          _eventConfig$restingS = eventConfig.restingState,
          restingState = void 0 === _eventConfig$restingS ? 0 : _eventConfig$restingS,
          _nativeEvent$clientX = nativeEvent.clientX,
          clientX = void 0 === _nativeEvent$clientX ? state.clientX : _nativeEvent$clientX,
          _nativeEvent$clientY = nativeEvent.clientY,
          clientY = void 0 === _nativeEvent$clientY ? state.clientY : _nativeEvent$clientY,
          _nativeEvent$pageX = nativeEvent.pageX,
          pageX = void 0 === _nativeEvent$pageX ? state.pageX : _nativeEvent$pageX,
          _nativeEvent$pageY = nativeEvent.pageY,
          pageY = void 0 === _nativeEvent$pageY ? state.pageY : _nativeEvent$pageY,
          isXAxis = "X_AXIS" === selectedAxis,
          isMouseOut = "mouseout" === nativeEvent.type,
          value = restingState / 100,
          namespacedParameterId = continuousParameterGroupId,
          elementHovered = !1;

      switch (basedOn) {
        case _constants.EventBasedOn.VIEWPORT:
          value = isXAxis ? Math.min(clientX, window.innerWidth) / window.innerWidth : Math.min(clientY, window.innerHeight) / window.innerHeight;
          break;

        case _constants.EventBasedOn.PAGE:
          var _getDocumentState3 = getDocumentState(),
              scrollLeft = _getDocumentState3.scrollLeft,
              scrollTop = _getDocumentState3.scrollTop,
              scrollWidth = _getDocumentState3.scrollWidth,
              scrollHeight = _getDocumentState3.scrollHeight;

          value = isXAxis ? Math.min(scrollLeft + pageX, scrollWidth) / scrollWidth : Math.min(scrollTop + pageY, scrollHeight) / scrollHeight;
          break;

        case _constants.EventBasedOn.ELEMENT:
        default:
          namespacedParameterId = getNamespacedParameterId(eventStateKey, continuousParameterGroupId);
          var isMouseEvent = 0 === nativeEvent.type.indexOf("mouse");
          if (isMouseEvent && !0 !== isOrContainsElement({
            element: element,
            nativeEvent: nativeEvent
          })) break;
          var rect = element.getBoundingClientRect(),
              left = rect.left,
              top = rect.top,
              width = rect.width,
              height = rect.height;
          if (!isMouseEvent && !pointIntersects({
            left: clientX,
            top: clientY
          }, rect)) break;
          elementHovered = !0, value = isXAxis ? (clientX - left) / width : (clientY - top) / height;
      }

      return isMouseOut && (value > .95 || value < .05) && (value = Math.round(value)), (basedOn !== _constants.EventBasedOn.ELEMENT || elementHovered || elementHovered !== state.elementHovered) && (value = reverse ? 1 - value : value, store.dispatch((0, _IX2EngineActions.parameterChanged)(namespacedParameterId, value))), {
        elementHovered: elementHovered,
        clientX: clientX,
        clientY: clientY,
        pageX: pageX,
        pageY: pageY
      };
    }
  }), (0, _defineProperty2.default)(_default2, PAGE_SCROLL, {
    types: SCROLL_EVENT_TYPES,
    handler: function (_ref9) {
      var store = _ref9.store,
          eventConfig = _ref9.eventConfig,
          continuousParameterGroupId = eventConfig.continuousParameterGroupId,
          reverse = eventConfig.reverse,
          _getDocumentState4 = getDocumentState(),
          value = _getDocumentState4.scrollTop / (_getDocumentState4.scrollHeight - _getDocumentState4.clientHeight);

      value = reverse ? 1 - value : value, store.dispatch((0, _IX2EngineActions.parameterChanged)(continuousParameterGroupId, value));
    }
  }), (0, _defineProperty2.default)(_default2, SCROLLING_IN_VIEW, {
    types: SCROLL_EVENT_TYPES,
    handler: function (_ref10) {
      var element = _ref10.element,
          store = _ref10.store,
          eventConfig = _ref10.eventConfig,
          eventStateKey = _ref10.eventStateKey,
          state = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
        scrollPercent: 0
      },
          _getDocumentState5 = getDocumentState(),
          scrollLeft = _getDocumentState5.scrollLeft,
          scrollTop = _getDocumentState5.scrollTop,
          scrollWidth = _getDocumentState5.scrollWidth,
          scrollHeight = _getDocumentState5.scrollHeight,
          visibleHeight = _getDocumentState5.clientHeight,
          basedOn = eventConfig.basedOn,
          selectedAxis = eventConfig.selectedAxis,
          continuousParameterGroupId = eventConfig.continuousParameterGroupId,
          startsEntering = eventConfig.startsEntering,
          startsExiting = eventConfig.startsExiting,
          addEndOffset = eventConfig.addEndOffset,
          addStartOffset = eventConfig.addStartOffset,
          _eventConfig$addOffse = eventConfig.addOffsetValue,
          addOffsetValue = void 0 === _eventConfig$addOffse ? 0 : _eventConfig$addOffse,
          _eventConfig$endOffse = eventConfig.endOffsetValue,
          endOffsetValue = void 0 === _eventConfig$endOffse ? 0 : _eventConfig$endOffse,
          isXAxis = "X_AXIS" === selectedAxis;

      if (basedOn === _constants.EventBasedOn.VIEWPORT) {
        var value = isXAxis ? scrollLeft / scrollWidth : scrollTop / scrollHeight;
        return value !== state.scrollPercent && store.dispatch((0, _IX2EngineActions.parameterChanged)(continuousParameterGroupId, value)), {
          scrollPercent: value
        };
      }

      var namespacedParameterId = getNamespacedParameterId(eventStateKey, continuousParameterGroupId),
          elementRect = element.getBoundingClientRect(),
          offsetStartPerc = (addStartOffset ? addOffsetValue : 0) / 100,
          offsetEndPerc = (addEndOffset ? endOffsetValue : 0) / 100;
      offsetStartPerc = startsEntering ? offsetStartPerc : 1 - offsetStartPerc, offsetEndPerc = startsExiting ? offsetEndPerc : 1 - offsetEndPerc;
      var offsetElementTop = elementRect.top + Math.min(elementRect.height * offsetStartPerc, visibleHeight),
          offsetElementBottom = elementRect.top + elementRect.height * offsetEndPerc,
          offsetHeight = offsetElementBottom - offsetElementTop,
          fixedScrollHeight = Math.min(visibleHeight + offsetHeight, scrollHeight),
          fixedScrollTop = Math.min(Math.max(0, visibleHeight - offsetElementTop), fixedScrollHeight),
          fixedScrollPerc = fixedScrollTop / fixedScrollHeight;
      return fixedScrollPerc !== state.scrollPercent && store.dispatch((0, _IX2EngineActions.parameterChanged)(namespacedParameterId, fixedScrollPerc)), {
        scrollPercent: fixedScrollPerc
      };
    }
  }), (0, _defineProperty2.default)(_default2, SCROLL_INTO_VIEW, scrollIntoOutOfViewOptions), (0, _defineProperty2.default)(_default2, SCROLL_OUT_OF_VIEW, scrollIntoOutOfViewOptions), (0, _defineProperty2.default)(_default2, PAGE_SCROLL_DOWN, (0, _extends2.default)({}, baseScrollActionGroupOptions, {
    handler: whenScrollDirectionChange(function (options, state) {
      state.scrollingDown && actionGroupCreator(options);
    })
  })), (0, _defineProperty2.default)(_default2, PAGE_SCROLL_UP, (0, _extends2.default)({}, baseScrollActionGroupOptions, {
    handler: whenScrollDirectionChange(function (options, state) {
      state.scrollingDown || actionGroupCreator(options);
    })
  })), (0, _defineProperty2.default)(_default2, PAGE_FINISH, {
    types: "readystatechange IX2_PAGE_UPDATE",
    handler: withFilter(isElement, function (handler) {
      return function (options, oldState) {
        var newState = {
          finished: "complete" === document.readyState
        };
        return !newState.finished || oldState && oldState.finshed || handler(options), newState;
      };
    }(actionGroupCreator))
  }), (0, _defineProperty2.default)(_default2, PAGE_START, {
    types: "readystatechange IX2_PAGE_UPDATE",
    handler: withFilter(isElement, function (handler) {
      return function (options, oldState) {
        return oldState || handler(options), {
          started: !0
        };
      };
    }(actionGroupCreator))
  }), _default2);

  exports.default = _default;
}, function (module, exports, __webpack_require__) {
  var flow = __webpack_require__(239)();

  module.exports = flow;
}, function (module, exports, __webpack_require__) {
  var LodashWrapper = __webpack_require__(49),
      flatRest = __webpack_require__(240),
      getData = __webpack_require__(95),
      getFuncName = __webpack_require__(96),
      isArray = __webpack_require__(1),
      isLaziable = __webpack_require__(253);

  module.exports = function (fromRight) {
    return flatRest(function (funcs) {
      var length = funcs.length,
          index = length,
          prereq = LodashWrapper.prototype.thru;

      for (fromRight && funcs.reverse(); index--;) {
        var func = funcs[index];
        if ("function" != typeof func) throw new TypeError("Expected a function");
        if (prereq && !wrapper && "wrapper" == getFuncName(func)) var wrapper = new LodashWrapper([], !0);
      }

      for (index = wrapper ? index : length; ++index < length;) {
        func = funcs[index];
        var funcName = getFuncName(func),
            data = "wrapper" == funcName ? getData(func) : void 0;
        wrapper = data && isLaziable(data[0]) && 424 == data[1] && !data[4].length && 1 == data[9] ? wrapper[getFuncName(data[0])].apply(wrapper, data[3]) : 1 == func.length && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
      }

      return function () {
        var args = arguments,
            value = args[0];
        if (wrapper && 1 == args.length && isArray(value)) return wrapper.plant(value).value();

        for (var index = 0, result = length ? funcs[index].apply(this, args) : value; ++index < length;) result = funcs[index].call(this, result);

        return result;
      };
    });
  };
}, function (module, exports, __webpack_require__) {
  var flatten = __webpack_require__(241),
      overRest = __webpack_require__(244),
      setToString = __webpack_require__(246);

  module.exports = function (func) {
    return setToString(overRest(func, void 0, flatten), func + "");
  };
}, function (module, exports, __webpack_require__) {
  var baseFlatten = __webpack_require__(242);

  module.exports = function (array) {
    return null != array && array.length ? baseFlatten(array, 1) : [];
  };
}, function (module, exports, __webpack_require__) {
  var arrayPush = __webpack_require__(35),
      isFlattenable = __webpack_require__(243);

  module.exports = function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;

    for (predicate || (predicate = isFlattenable), result || (result = []); ++index < length;) {
      var value = array[index];
      depth > 0 && predicate(value) ? depth > 1 ? baseFlatten(value, depth - 1, predicate, isStrict, result) : arrayPush(result, value) : isStrict || (result[result.length] = value);
    }

    return result;
  };
}, function (module, exports, __webpack_require__) {
  var Symbol = __webpack_require__(14),
      isArguments = __webpack_require__(24),
      isArray = __webpack_require__(1),
      spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : void 0;

  module.exports = function (value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  };
}, function (module, exports, __webpack_require__) {
  var apply = __webpack_require__(245),
      nativeMax = Math.max;

  module.exports = function (func, start, transform) {
    return start = nativeMax(void 0 === start ? func.length - 1 : start, 0), function () {
      for (var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length); ++index < length;) array[index] = args[start + index];

      index = -1;

      for (var otherArgs = Array(start + 1); ++index < start;) otherArgs[index] = args[index];

      return otherArgs[start] = transform(array), apply(func, this, otherArgs);
    };
  };
}, function (module, exports) {
  module.exports = function (func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  };
}, function (module, exports, __webpack_require__) {
  var baseSetToString = __webpack_require__(247),
      setToString = __webpack_require__(249)(baseSetToString);

  module.exports = setToString;
}, function (module, exports, __webpack_require__) {
  var constant = __webpack_require__(248),
      defineProperty = __webpack_require__(92),
      identity = __webpack_require__(45),
      baseSetToString = defineProperty ? function (func, string) {
    return defineProperty(func, "toString", {
      configurable: !0,
      enumerable: !1,
      value: constant(string),
      writable: !0
    });
  } : identity;

  module.exports = baseSetToString;
}, function (module, exports) {
  module.exports = function (value) {
    return function () {
      return value;
    };
  };
}, function (module, exports) {
  var nativeNow = Date.now;

  module.exports = function (func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = 16 - (stamp - lastCalled);

      if (lastCalled = stamp, remaining > 0) {
        if (++count >= 800) return arguments[0];
      } else count = 0;

      return func.apply(void 0, arguments);
    };
  };
}, function (module, exports, __webpack_require__) {
  var WeakMap = __webpack_require__(74),
      metaMap = WeakMap && new WeakMap();

  module.exports = metaMap;
}, function (module, exports) {
  module.exports = function () {};
}, function (module, exports) {
  module.exports = {};
}, function (module, exports, __webpack_require__) {
  var LazyWrapper = __webpack_require__(51),
      getData = __webpack_require__(95),
      getFuncName = __webpack_require__(96),
      lodash = __webpack_require__(254);

  module.exports = function (func) {
    var funcName = getFuncName(func),
        other = lodash[funcName];
    if ("function" != typeof other || !(funcName in LazyWrapper.prototype)) return !1;
    if (func === other) return !0;
    var data = getData(other);
    return !!data && func === data[0];
  };
}, function (module, exports, __webpack_require__) {
  var LazyWrapper = __webpack_require__(51),
      LodashWrapper = __webpack_require__(49),
      baseLodash = __webpack_require__(50),
      isArray = __webpack_require__(1),
      isObjectLike = __webpack_require__(7),
      wrapperClone = __webpack_require__(255),
      hasOwnProperty = Object.prototype.hasOwnProperty;

  function lodash(value) {
    if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
      if (value instanceof LodashWrapper) return value;
      if (hasOwnProperty.call(value, "__wrapped__")) return wrapperClone(value);
    }

    return new LodashWrapper(value);
  }

  lodash.prototype = baseLodash.prototype, lodash.prototype.constructor = lodash, module.exports = lodash;
}, function (module, exports, __webpack_require__) {
  var LazyWrapper = __webpack_require__(51),
      LodashWrapper = __webpack_require__(49),
      copyArray = __webpack_require__(256);

  module.exports = function (wrapper) {
    if (wrapper instanceof LazyWrapper) return wrapper.clone();
    var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    return result.__actions__ = copyArray(wrapper.__actions__), result.__index__ = wrapper.__index__, result.__values__ = wrapper.__values__, result;
  };
}, function (module, exports) {
  module.exports = function (source, array) {
    var index = -1,
        length = source.length;

    for (array || (array = Array(length)); ++index < length;) array[index] = source[index];

    return array;
  };
}, function (module, exports, __webpack_require__) {
  var baseClamp = __webpack_require__(93),
      toNumber = __webpack_require__(47);

  module.exports = function (number, lower, upper) {
    return void 0 === upper && (upper = lower, lower = void 0), void 0 !== upper && (upper = (upper = toNumber(upper)) == upper ? upper : 0), void 0 !== lower && (lower = (lower = toNumber(lower)) == lower ? lower : 0), baseClamp(toNumber(number), lower, upper);
  };
}, function (module, exports, __webpack_require__) {
  "use strict";

  var Webflow = __webpack_require__(11);

  Webflow.define("links", module.exports = function ($, _) {
    var designer,
        anchors,
        slug,
        api = {},
        $win = $(window),
        inApp = Webflow.env(),
        location = window.location,
        tempLink = document.createElement("a"),
        indexPage = /index\.(html|php)$/,
        dirList = /\/$/;

    function select(link) {
      var href = designer && link.getAttribute("href-disabled") || link.getAttribute("href");

      if (tempLink.href = href, !(href.indexOf(":") >= 0)) {
        var $link = $(link);

        if (tempLink.hash.length > 1 && tempLink.host + tempLink.pathname === location.host + location.pathname) {
          if (!/^#[a-zA-Z0-9\-\_]+$/.test(tempLink.hash)) return;
          var $section = $(tempLink.hash);
          $section.length && anchors.push({
            link: $link,
            sec: $section,
            active: !1
          });
        } else "#" !== href && "" !== href && setClass($link, "w--current", tempLink.href === location.href || href === slug || indexPage.test(href) && dirList.test(slug));
      }
    }

    function scroll() {
      var viewTop = $win.scrollTop(),
          viewHeight = $win.height();

      _.each(anchors, function (anchor) {
        var $link = anchor.link,
            $section = anchor.sec,
            top = $section.offset().top,
            height = $section.outerHeight(),
            offset = .5 * viewHeight,
            active = $section.is(":visible") && top + height - offset >= viewTop && top + offset <= viewTop + viewHeight;
        anchor.active !== active && (anchor.active = active, setClass($link, "w--current", active));
      });
    }

    function setClass($elem, className, add) {
      var exists = $elem.hasClass(className);
      add && exists || (add || exists) && (add ? $elem.addClass(className) : $elem.removeClass(className));
    }

    return api.ready = api.design = api.preview = function () {
      designer = inApp && Webflow.env("design"), slug = Webflow.env("slug") || location.pathname || "", Webflow.scroll.off(scroll), anchors = [];

      for (var links = document.links, i = 0; i < links.length; ++i) select(links[i]);

      anchors.length && (Webflow.scroll.on(scroll), scroll());
    }, api;
  });
}, function (module, exports, __webpack_require__) {
  "use strict";

  var Webflow = __webpack_require__(11);

  Webflow.define("scroll", module.exports = function ($) {
    var locHref,
        $doc = $(document),
        win = window,
        loc = win.location,
        history = function () {
      try {
        return Boolean(win.frameElement);
      } catch (e) {
        return !0;
      }
    }() ? null : win.history,
        validHash = /^[a-zA-Z0-9][\w:.-]*$/;

    function validateScroll(e) {
      if (!(Webflow.env("design") || window.$.mobile && $(e.currentTarget).hasClass("ui-link"))) {
        var parts = this.href.split("#"),
            hash = parts[0] === locHref ? parts[1] : null;
        hash && function (hash, e) {
          if (validHash.test(hash)) {
            var el = $("#" + hash);

            if (el.length) {
              e && (e.preventDefault(), e.stopPropagation()), loc.hash === hash || !history || !history.pushState || Webflow.env.chrome && "file:" === loc.protocol || (history.state && history.state.hash) !== hash && history.pushState({
                hash: hash
              }, "", "#" + hash);
              var rootTag = Webflow.env("editor") ? ".w-editor-body" : "body",
                  header = $("header, " + rootTag + " > .header, " + rootTag + " > .w-nav:not([data-no-scroll])"),
                  offset = "fixed" === header.css("position") ? header.outerHeight() : 0;
              win.setTimeout(function () {
                !function (el, offset) {
                  var start = $(win).scrollTop(),
                      end = el.offset().top - offset;

                  if ("mid" === el.data("scroll")) {
                    var available = $(win).height() - offset,
                        elHeight = el.outerHeight();
                    elHeight < available && (end -= Math.round((available - elHeight) / 2));
                  }

                  var mult = 1;
                  $("body").add(el).each(function () {
                    var time = parseFloat($(this).attr("data-scroll-time"), 10);
                    !isNaN(time) && (0 === time || time > 0) && (mult = time);
                  }), Date.now || (Date.now = function () {
                    return new Date().getTime();
                  });

                  var clock = Date.now(),
                      animate = win.requestAnimationFrame || win.mozRequestAnimationFrame || win.webkitRequestAnimationFrame || function (fn) {
                    win.setTimeout(fn, 15);
                  },
                      duration = (472.143 * Math.log(Math.abs(start - end) + 125) - 2e3) * mult;

                  !function step() {
                    var elapsed = Date.now() - clock;
                    win.scroll(0, function (start, end, elapsed, duration) {
                      return elapsed > duration ? end : start + (end - start) * ((t = elapsed / duration) < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1);
                      var t;
                    }(start, end, elapsed, duration)), elapsed <= duration && animate(step);
                  }();
                }(el, offset);
              }, e ? 0 : 300);
            }
          }
        }(hash, e);
      }
    }

    return {
      ready: function () {
        locHref = loc.href.split("#")[0], $doc.on("click.wf-scroll", 'a[href*="#"]:not(.w-tab-link):not(a[href="#"])', validateScroll), $doc.on("click.wf-empty-link", 'a[href="#"]', function (e) {
          e.preventDefault();
        });
      }
    };
  });
}, function (module, exports, __webpack_require__) {
  "use strict";

  __webpack_require__(11).define("touch", module.exports = function ($) {
    var api = {},
        getSelection = window.getSelection;

    function Touch(el) {
      var startX,
          lastX,
          active = !1,
          useTouch = !1,
          thresholdX = Math.min(Math.round(.04 * window.innerWidth), 40);

      function start(evt) {
        var touches = evt.touches;
        touches && touches.length > 1 || (active = !0, touches ? (useTouch = !0, startX = touches[0].clientX) : startX = evt.clientX, lastX = startX);
      }

      function move(evt) {
        if (active) {
          if (useTouch && "mousemove" === evt.type) return evt.preventDefault(), void evt.stopPropagation();
          var touches = evt.touches,
              x = touches ? touches[0].clientX : evt.clientX,
              velocityX = x - lastX;
          lastX = x, Math.abs(velocityX) > thresholdX && getSelection && "" === String(getSelection()) && (function (type, evt, data) {
            var newEvent = $.Event("swipe", {
              originalEvent: evt
            });
            $(evt.target).trigger(newEvent, data);
          }(0, evt, {
            direction: velocityX > 0 ? "right" : "left"
          }), cancel());
        }
      }

      function end(evt) {
        if (active) return active = !1, useTouch && "mouseup" === evt.type ? (evt.preventDefault(), evt.stopPropagation(), void (useTouch = !1)) : void 0;
      }

      function cancel() {
        active = !1;
      }

      el.addEventListener("touchstart", start, !1), el.addEventListener("touchmove", move, !1), el.addEventListener("touchend", end, !1), el.addEventListener("touchcancel", cancel, !1), el.addEventListener("mousedown", start, !1), el.addEventListener("mousemove", move, !1), el.addEventListener("mouseup", end, !1), el.addEventListener("mouseout", cancel, !1), this.destroy = function () {
        el.removeEventListener("touchstart", start, !1), el.removeEventListener("touchmove", move, !1), el.removeEventListener("touchend", end, !1), el.removeEventListener("touchcancel", cancel, !1), el.removeEventListener("mousedown", start, !1), el.removeEventListener("mousemove", move, !1), el.removeEventListener("mouseup", end, !1), el.removeEventListener("mouseout", cancel, !1), el = null;
      };
    }

    return $.event.special.tap = {
      bindType: "click",
      delegateType: "click"
    }, api.init = function (el) {
      return (el = "string" == typeof el ? $(el).get(0) : el) ? new Touch(el) : null;
    }, api.instance = api.init(document), api;
  });
}]), Webflow.require("ix2").init({
  events: {
    e: {
      id: "e",
      eventTypeId: "MOUSE_OVER",
      action: {
        id: "",
        actionTypeId: "GENERAL_START_ACTION",
        config: {
          delay: 0,
          easing: "",
          duration: 0,
          actionListId: "a",
          affectedElements: {},
          playInReverse: !1,
          autoStopEventId: "e-2"
        }
      },
      mediaQueries: ["main"],
      target: {
        appliesTo: "ELEMENT",
        styleBlockIds: [],
        id: "5efa0a3219013f860647adf7|aa4a644b-7af4-70b3-ef72-f93c972dc6e4"
      },
      config: {
        loop: !1,
        playInReverse: !1,
        scrollOffsetValue: null,
        scrollOffsetUnit: null,
        delay: null,
        direction: null,
        effectIn: null
      },
      createdOn: 1593698555707
    },
    "e-2": {
      id: "e-2",
      eventTypeId: "MOUSE_OUT",
      action: {
        id: "",
        actionTypeId: "GENERAL_START_ACTION",
        config: {
          delay: 0,
          easing: "",
          duration: 0,
          actionListId: "a-2",
          affectedElements: {},
          playInReverse: !1,
          autoStopEventId: "e"
        }
      },
      mediaQueries: ["main"],
      target: {
        appliesTo: "ELEMENT",
        styleBlockIds: [],
        id: "5efa0a3219013f860647adf7|aa4a644b-7af4-70b3-ef72-f93c972dc6e4"
      },
      config: {
        loop: !1,
        playInReverse: !1,
        scrollOffsetValue: null,
        scrollOffsetUnit: null,
        delay: null,
        direction: null,
        effectIn: null
      },
      createdOn: 1593698555709
    },
    "e-3": {
      id: "e-3",
      eventTypeId: "MOUSE_OVER",
      action: {
        id: "",
        actionTypeId: "GENERAL_START_ACTION",
        config: {
          delay: 0,
          easing: "",
          duration: 0,
          actionListId: "a",
          affectedElements: {},
          playInReverse: !1,
          autoStopEventId: "e-4"
        }
      },
      mediaQueries: ["main", "medium", "small", "tiny"],
      target: {
        appliesTo: "ELEMENT",
        styleBlockIds: [],
        id: "5efa0a3219013f860647adf7|2e3e45b6-85b6-6c7a-a821-90225ca3c283"
      },
      config: {
        loop: !1,
        playInReverse: !1,
        scrollOffsetValue: null,
        scrollOffsetUnit: null,
        delay: null,
        direction: null,
        effectIn: null
      },
      createdOn: 1593700614069
    },
    "e-4": {
      id: "e-4",
      eventTypeId: "MOUSE_OUT",
      action: {
        id: "",
        actionTypeId: "GENERAL_START_ACTION",
        config: {
          delay: 0,
          easing: "",
          duration: 0,
          actionListId: "a-2",
          affectedElements: {},
          playInReverse: !1,
          autoStopEventId: "e-3"
        }
      },
      mediaQueries: ["main", "medium", "small", "tiny"],
      target: {
        appliesTo: "ELEMENT",
        styleBlockIds: [],
        id: "5efa0a3219013f860647adf7|2e3e45b6-85b6-6c7a-a821-90225ca3c283"
      },
      config: {
        loop: !1,
        playInReverse: !1,
        scrollOffsetValue: null,
        scrollOffsetUnit: null,
        delay: null,
        direction: null,
        effectIn: null
      },
      createdOn: 1593700614069
    },
    "e-5": {
      id: "e-5",
      eventTypeId: "MOUSE_OVER",
      action: {
        id: "",
        actionTypeId: "GENERAL_START_ACTION",
        config: {
          delay: 0,
          easing: "",
          duration: 0,
          actionListId: "a-3",
          affectedElements: {},
          playInReverse: !1,
          autoStopEventId: "e-6"
        }
      },
      mediaQueries: ["main", "medium"],
      target: {
        selector: ".theme-share-link",
        originalId: "5efa0a3219013f860647adf7|c5f282c3-8148-4219-3342-b52df91569a6",
        appliesTo: "CLASS"
      },
      config: {
        loop: !1,
        playInReverse: !1,
        scrollOffsetValue: null,
        scrollOffsetUnit: null,
        delay: null,
        direction: null,
        effectIn: null
      },
      createdOn: 1593702619861
    },
    "e-6": {
      id: "e-6",
      eventTypeId: "MOUSE_OUT",
      action: {
        id: "",
        actionTypeId: "GENERAL_START_ACTION",
        config: {
          delay: 0,
          easing: "",
          duration: 0,
          actionListId: "a-4",
          affectedElements: {},
          playInReverse: !1,
          autoStopEventId: "e-5"
        }
      },
      mediaQueries: ["main", "medium"],
      target: {
        selector: ".theme-share-link",
        originalId: "5efa0a3219013f860647adf7|c5f282c3-8148-4219-3342-b52df91569a6",
        appliesTo: "CLASS"
      },
      config: {
        loop: !1,
        playInReverse: !1,
        scrollOffsetValue: null,
        scrollOffsetUnit: null,
        delay: null,
        direction: null,
        effectIn: null
      },
      createdOn: 1593702619862
    },
    "e-7": {
      id: "e-7",
      eventTypeId: "MOUSE_CLICK",
      action: {
        id: "",
        actionTypeId: "GENERAL_START_ACTION",
        config: {
          delay: 0,
          easing: "",
          duration: 0,
          actionListId: "a-5",
          affectedElements: {},
          playInReverse: !1,
          autoStopEventId: "e-8"
        }
      },
      mediaQueries: ["main", "medium", "small", "tiny"],
      target: {
        selector: ".theme-share-link",
        originalId: "5efa0a3219013f860647adf7|c5f282c3-8148-4219-3342-b52df91569a6",
        appliesTo: "CLASS"
      },
      config: {
        loop: !1,
        playInReverse: !1,
        scrollOffsetValue: null,
        scrollOffsetUnit: null,
        delay: null,
        direction: null,
        effectIn: null
      },
      createdOn: 1593729544978
    },
    "e-9": {
      id: "e-9",
      eventTypeId: "MOUSE_CLICK",
      action: {
        id: "",
        actionTypeId: "GENERAL_START_ACTION",
        config: {
          delay: 0,
          easing: "",
          duration: 0,
          actionListId: "a-6",
          affectedElements: {},
          playInReverse: !1,
          autoStopEventId: "e-10"
        }
      },
      mediaQueries: ["main", "medium", "small", "tiny"],
      target: {
        appliesTo: "ELEMENT",
        styleBlockIds: [],
        id: "5efa0a3219013f860647adf7|c5f282c3-8148-4219-3342-b52df91569a6"
      },
      config: {
        loop: !1,
        playInReverse: !1,
        scrollOffsetValue: null,
        scrollOffsetUnit: null,
        delay: null,
        direction: null,
        effectIn: null
      },
      createdOn: 1593731507530
    },
    "e-11": {
      id: "e-11",
      eventTypeId: "MOUSE_CLICK",
      action: {
        id: "",
        actionTypeId: "GENERAL_START_ACTION",
        config: {
          delay: 0,
          easing: "",
          duration: 0,
          actionListId: "a-6",
          affectedElements: {},
          playInReverse: !1,
          autoStopEventId: "e-12"
        }
      },
      mediaQueries: ["main", "medium", "small", "tiny"],
      target: {
        appliesTo: "ELEMENT",
        styleBlockIds: [],
        id: "5efa0a3219013f860647adf7|533faead-4546-028a-1846-71f8a4f7dcd1"
      },
      config: {
        loop: !1,
        playInReverse: !1,
        scrollOffsetValue: null,
        scrollOffsetUnit: null,
        delay: null,
        direction: null,
        effectIn: null
      },
      createdOn: 1593731594755
    }
  },
  actionLists: {
    a: {
      id: "a",
      title: "badge-hover",
      actionItemGroups: [{
        actionItems: [{
          id: "a-n",
          actionTypeId: "TRANSFORM_MOVE",
          config: {
            delay: 0,
            easing: "",
            duration: 500,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".built-with-draftbit",
              selectorGuids: ["0540c352-a293-d34e-2864-d0a8f63bccce"]
            },
            yValue: 0,
            xUnit: "PX",
            yUnit: "PX",
            zUnit: "PX"
          }
        }, {
          id: "a-n-2",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "",
            duration: 500,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".built-with-draftbit",
              selectorGuids: ["0540c352-a293-d34e-2864-d0a8f63bccce"]
            },
            value: 1,
            unit: ""
          }
        }, {
          id: "a-n-5",
          actionTypeId: "TRANSFORM_MOVE",
          config: {
            delay: 0,
            easing: "",
            duration: 500,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".build-free-text",
              selectorGuids: ["823b8cb6-3b80-d23e-1e35-a36c6e3278c3"]
            },
            yValue: 0,
            xUnit: "PX",
            yUnit: "PX",
            zUnit: "PX"
          }
        }, {
          id: "a-n-6",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "",
            duration: 500,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".build-free-text",
              selectorGuids: ["823b8cb6-3b80-d23e-1e35-a36c6e3278c3"]
            },
            value: 0,
            unit: ""
          }
        }]
      }, {
        actionItems: [{
          id: "a-n-3",
          actionTypeId: "TRANSFORM_MOVE",
          config: {
            delay: 0,
            easing: "inOutQuart",
            duration: 140,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".built-with-draftbit",
              selectorGuids: ["0540c352-a293-d34e-2864-d0a8f63bccce"]
            },
            yValue: -16,
            xUnit: "PX",
            yUnit: "PX",
            zUnit: "PX"
          }
        }, {
          id: "a-n-4",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "inOutQuart",
            duration: 100,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".built-with-draftbit",
              selectorGuids: ["0540c352-a293-d34e-2864-d0a8f63bccce"]
            },
            value: 0,
            unit: ""
          }
        }, {
          id: "a-n-7",
          actionTypeId: "TRANSFORM_MOVE",
          config: {
            delay: 0,
            easing: "inOutQuart",
            duration: 140,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".build-free-text",
              selectorGuids: ["823b8cb6-3b80-d23e-1e35-a36c6e3278c3"]
            },
            yValue: -23,
            xUnit: "PX",
            yUnit: "PX",
            zUnit: "PX"
          }
        }, {
          id: "a-n-8",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "inOutQuart",
            duration: 100,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".build-free-text",
              selectorGuids: ["823b8cb6-3b80-d23e-1e35-a36c6e3278c3"]
            },
            value: 1,
            unit: ""
          }
        }]
      }],
      createdOn: 1593698557639,
      useFirstGroupAsInitialState: !0
    },
    "a-2": {
      id: "a-2",
      title: "badge-hover (reset)",
      actionItemGroups: [{
        actionItems: [{
          id: "a-2-n-5",
          actionTypeId: "TRANSFORM_MOVE",
          config: {
            delay: 0,
            easing: "inOutQuart",
            duration: 140,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".built-with-draftbit",
              selectorGuids: ["0540c352-a293-d34e-2864-d0a8f63bccce"]
            },
            yValue: 0,
            xUnit: "PX",
            yUnit: "PX",
            zUnit: "PX"
          }
        }, {
          id: "a-2-n-6",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "inOutQuart",
            duration: 100,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".built-with-draftbit",
              selectorGuids: ["0540c352-a293-d34e-2864-d0a8f63bccce"]
            },
            value: 1,
            unit: ""
          }
        }, {
          id: "a-2-n-7",
          actionTypeId: "TRANSFORM_MOVE",
          config: {
            delay: 0,
            easing: "inOutQuart",
            duration: 140,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".build-free-text",
              selectorGuids: ["823b8cb6-3b80-d23e-1e35-a36c6e3278c3"]
            },
            yValue: 0,
            xUnit: "PX",
            yUnit: "PX",
            zUnit: "PX"
          }
        }, {
          id: "a-2-n-8",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "inOutQuart",
            duration: 100,
            target: {
              useEventTarget: "CHILDREN",
              selector: ".build-free-text",
              selectorGuids: ["823b8cb6-3b80-d23e-1e35-a36c6e3278c3"]
            },
            value: 0,
            unit: ""
          }
        }]
      }],
      createdOn: 1593698557639,
      useFirstGroupAsInitialState: !1
    },
    "a-3": {
      id: "a-3",
      title: "share-link-hover",
      actionItemGroups: [{
        actionItems: [{
          id: "a-3-n-2",
          actionTypeId: "GENERAL_DISPLAY",
          config: {
            delay: 0,
            easing: "",
            duration: 0,
            value: "none",
            target: {
              useEventTarget: "SIBLINGS",
              selector: ".theme-share-tooltip",
              selectorGuids: ["9d9da6cc-c15f-6b67-d398-be6e97f34157"]
            }
          }
        }, {
          id: "a-3-n-7",
          actionTypeId: "TRANSFORM_SCALE",
          config: {
            delay: 0,
            easing: "",
            duration: 500,
            target: {
              useEventTarget: "SIBLINGS",
              selector: ".theme-share-tooltip",
              selectorGuids: ["9d9da6cc-c15f-6b67-d398-be6e97f34157"]
            },
            xValue: .8,
            yValue: .8,
            locked: !0
          }
        }, {
          id: "a-3-n-3",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "",
            duration: 500,
            target: {
              useEventTarget: "SIBLINGS",
              selector: ".theme-share-tooltip",
              selectorGuids: ["9d9da6cc-c15f-6b67-d398-be6e97f34157"]
            },
            value: 0,
            unit: ""
          }
        }]
      }, {
        actionItems: [{
          id: "a-3-n-5",
          actionTypeId: "GENERAL_DISPLAY",
          config: {
            delay: 0,
            easing: "outQuart",
            duration: 0,
            value: "flex",
            target: {
              useEventTarget: "SIBLINGS",
              selector: ".theme-share-tooltip",
              selectorGuids: ["9d9da6cc-c15f-6b67-d398-be6e97f34157"]
            }
          }
        }, {
          id: "a-3-n-6",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "outQuart",
            duration: 100,
            target: {
              useEventTarget: "SIBLINGS",
              selector: ".theme-share-tooltip",
              selectorGuids: ["9d9da6cc-c15f-6b67-d398-be6e97f34157"]
            },
            value: 1,
            unit: ""
          }
        }, {
          id: "a-3-n-8",
          actionTypeId: "TRANSFORM_SCALE",
          config: {
            delay: 0,
            easing: "outQuart",
            duration: 100,
            target: {
              useEventTarget: "SIBLINGS",
              selector: ".theme-share-tooltip",
              selectorGuids: ["9d9da6cc-c15f-6b67-d398-be6e97f34157"]
            },
            xValue: 1,
            yValue: 1,
            locked: !0
          }
        }]
      }],
      createdOn: 1593702629939,
      useFirstGroupAsInitialState: !0
    },
    "a-4": {
      id: "a-4",
      title: "share-link-hover (reset)",
      actionItemGroups: [{
        actionItems: [{
          id: "a-4-n-5",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "outQuart",
            duration: 0,
            target: {
              selector: ".theme-share-tooltip",
              selectorGuids: ["9d9da6cc-c15f-6b67-d398-be6e97f34157"]
            },
            value: 0,
            unit: ""
          }
        }, {
          id: "a-4-n-6",
          actionTypeId: "TRANSFORM_SCALE",
          config: {
            delay: 0,
            easing: "outQuart",
            duration: 0,
            target: {
              selector: ".theme-share-tooltip",
              selectorGuids: ["9d9da6cc-c15f-6b67-d398-be6e97f34157"]
            },
            xValue: .8,
            yValue: .8,
            locked: !0
          }
        }, {
          id: "a-4-n-4",
          actionTypeId: "GENERAL_DISPLAY",
          config: {
            delay: 0,
            easing: "outQuart",
            duration: 0,
            value: "flex",
            target: {
              selector: ".theme-share-tooltip",
              selectorGuids: ["9d9da6cc-c15f-6b67-d398-be6e97f34157"]
            }
          }
        }]
      }],
      createdOn: 1593702629939,
      useFirstGroupAsInitialState: !1
    },
    "a-5": {
      id: "a-5",
      title: "share-link-click",
      actionItemGroups: [{
        actionItems: [{
          id: "a-5-n",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "",
            duration: 500,
            target: {
              useEventTarget: !0,
              id: "5efa0a3219013f860647adf7|c5f282c3-8148-4219-3342-b52df91569a6"
            },
            value: 1,
            unit: ""
          }
        }]
      }, {
        actionItems: [{
          id: "a-5-n-2",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 0,
            easing: "",
            duration: 0,
            target: {
              useEventTarget: !0,
              id: "5efa0a3219013f860647adf7|c5f282c3-8148-4219-3342-b52df91569a6"
            },
            value: .64,
            unit: ""
          }
        }]
      }, {
        actionItems: [{
          id: "a-5-n-3",
          actionTypeId: "STYLE_OPACITY",
          config: {
            delay: 80,
            easing: "",
            duration: 0,
            target: {
              useEventTarget: !0,
              id: "5efa0a3219013f860647adf7|c5f282c3-8148-4219-3342-b52df91569a6"
            },
            value: 1,
            unit: ""
          }
        }]
      }],
      createdOn: 1593729548157,
      useFirstGroupAsInitialState: !0
    },
    "a-6": {
      id: "a-6",
      title: "share-copied-confirmation",
      actionItemGroups: [{
        actionItems: [{
          id: "a-6-n",
          actionTypeId: "GENERAL_DISPLAY",
          config: {
            delay: 0,
            easing: "",
            duration: 0,
            value: "block",
            target: {
              selector: ".url-default-text",
              selectorGuids: ["56158286-9b2d-7d61-461b-0f452d78ada2"]
            }
          }
        }, {
          id: "a-6-n-2",
          actionTypeId: "GENERAL_DISPLAY",
          config: {
            delay: 0,
            easing: "",
            duration: 0,
            value: "none",
            target: {
              selector: ".url-copied-confirmation",
              selectorGuids: ["f6c14014-a091-e765-60c1-25298b6ffb63"]
            }
          }
        }]
      }, {
        actionItems: [{
          id: "a-6-n-3",
          actionTypeId: "GENERAL_DISPLAY",
          config: {
            delay: 0,
            easing: "",
            duration: 0,
            value: "none",
            target: {
              selector: ".url-default-text",
              selectorGuids: ["56158286-9b2d-7d61-461b-0f452d78ada2"]
            }
          }
        }, {
          id: "a-6-n-4",
          actionTypeId: "GENERAL_DISPLAY",
          config: {
            delay: 0,
            easing: "",
            duration: 0,
            value: "block",
            target: {
              selector: ".url-copied-confirmation",
              selectorGuids: ["f6c14014-a091-e765-60c1-25298b6ffb63"]
            }
          }
        }]
      }, {
        actionItems: [{
          id: "a-6-n-6",
          actionTypeId: "GENERAL_DISPLAY",
          config: {
            delay: 600,
            easing: "",
            duration: 0,
            value: "none",
            target: {
              selector: ".url-copied-confirmation",
              selectorGuids: ["f6c14014-a091-e765-60c1-25298b6ffb63"]
            }
          }
        }, {
          id: "a-6-n-5",
          actionTypeId: "GENERAL_DISPLAY",
          config: {
            delay: 600,
            easing: "",
            duration: 0,
            value: "block",
            target: {
              selector: ".url-default-text",
              selectorGuids: ["56158286-9b2d-7d61-461b-0f452d78ada2"]
            }
          }
        }]
      }],
      createdOn: 1593731511043,
      useFirstGroupAsInitialState: !0
    }
  },
  site: {
    mediaQueries: [{
      key: "main",
      min: 992,
      max: 1e4
    }, {
      key: "medium",
      min: 768,
      max: 991
    }, {
      key: "small",
      min: 480,
      max: 767
    }, {
      key: "tiny",
      min: 0,
      max: 479
    }]
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,